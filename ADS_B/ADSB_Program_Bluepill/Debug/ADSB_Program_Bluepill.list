
ADSB_Program_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000696c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007130  08007130  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007130  08007130  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007130  08007130  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000279c  20000024  0800715c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027c0  0800715c  000227c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b404  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002156  00000000  00000000  0002b451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ebf  00000000  00000000  0002ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb8b  00000000  00000000  00046aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084387  00000000  00000000  0005567a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  000d9a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a60 	.word	0x08006a60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08006a60 	.word	0x08006a60

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <SELECT+0x14>)
 8000166:	f001 fb2b 	bl	80017c0 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010c00 	.word	0x40010c00

08000174 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2101      	movs	r1, #1
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <DESELECT+0x14>)
 800017e:	f001 fb1f 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010c00 	.word	0x40010c00

0800018c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000196:	bf00      	nop
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <SPI_TxByte+0x30>)
 800019a:	f002 faa5 	bl	80026e8 <HAL_SPI_GetState>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d1f9      	bne.n	8000198 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80001a4:	1df9      	adds	r1, r7, #7
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	2201      	movs	r2, #1
 80001ac:	4803      	ldr	r0, [pc, #12]	; (80001bc <SPI_TxByte+0x30>)
 80001ae:	f001 ffbd 	bl	800212c <HAL_SPI_Transmit>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000044 	.word	0x20000044

080001c0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001c6:	23ff      	movs	r3, #255	; 0xff
 80001c8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001ce:	bf00      	nop
 80001d0:	4809      	ldr	r0, [pc, #36]	; (80001f8 <SPI_RxByte+0x38>)
 80001d2:	f002 fa89 	bl	80026e8 <HAL_SPI_GetState>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d1f9      	bne.n	80001d0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001dc:	1dba      	adds	r2, r7, #6
 80001de:	1df9      	adds	r1, r7, #7
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <SPI_RxByte+0x38>)
 80001ea:	f002 f8db 	bl	80023a4 <HAL_SPI_TransmitReceive>
  
  return data;
 80001ee:	79bb      	ldrb	r3, [r7, #6]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000044 	.word	0x20000044

080001fc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000204:	f7ff ffdc 	bl	80001c0 <SPI_RxByte>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	701a      	strb	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SD_ReadyWait+0x34>)
 8000220:	2232      	movs	r2, #50	; 0x32
 8000222:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000224:	f7ff ffcc 	bl	80001c0 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000228:	f7ff ffca 	bl	80001c0 <SPI_RxByte>
 800022c:	4603      	mov	r3, r0
 800022e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2bff      	cmp	r3, #255	; 0xff
 8000234:	d004      	beq.n	8000240 <SD_ReadyWait+0x28>
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <SD_ReadyWait+0x34>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f3      	bne.n	8000228 <SD_ReadyWait+0x10>
  
  return res;
 8000240:	79fb      	ldrb	r3, [r7, #7]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20002586 	.word	0x20002586

08000250 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000256:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800025a:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800025c:	f7ff ff8a 	bl	8000174 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e005      	b.n	8000272 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000266:	20ff      	movs	r0, #255	; 0xff
 8000268:	f7ff ff90 	bl	800018c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	3301      	adds	r3, #1
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	2b09      	cmp	r3, #9
 8000276:	ddf6      	ble.n	8000266 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000278:	f7ff ff70 	bl	800015c <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800027c:	2340      	movs	r3, #64	; 0x40
 800027e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000290:	2395      	movs	r3, #149	; 0x95
 8000292:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e009      	b.n	80002ae <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800029a:	1d3a      	adds	r2, r7, #4
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff72 	bl	800018c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	ddf2      	ble.n	800029a <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002b4:	e002      	b.n	80002bc <SD_PowerOn+0x6c>
  {
    Count--;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002bc:	f7ff ff80 	bl	80001c0 <SPI_RxByte>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d002      	beq.n	80002cc <SD_PowerOn+0x7c>
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f4      	bne.n	80002b6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80002cc:	f7ff ff52 	bl	8000174 <DESELECT>
  SPI_TxByte(0XFF);
 80002d0:	20ff      	movs	r0, #255	; 0xff
 80002d2:	f7ff ff5b 	bl	800018c <SPI_TxByte>
  
  PowerFlag = 1;
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <SD_PowerOn+0x94>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000041 	.word	0x20000041

080002e8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <SD_PowerOff+0x14>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000041 	.word	0x20000041

08000300 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <SD_CheckPower+0x10>)
 8000306:	781b      	ldrb	r3, [r3, #0]
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000041 	.word	0x20000041

08000314 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <SD_RxDataBlock+0x68>)
 8000320:	220a      	movs	r2, #10
 8000322:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000324:	f7ff ff4c 	bl	80001c0 <SPI_RxByte>
 8000328:	4603      	mov	r3, r0
 800032a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bff      	cmp	r3, #255	; 0xff
 8000330:	d104      	bne.n	800033c <SD_RxDataBlock+0x28>
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <SD_RxDataBlock+0x68>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f3      	bne.n	8000324 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bfe      	cmp	r3, #254	; 0xfe
 8000340:	d001      	beq.n	8000346 <SD_RxDataBlock+0x32>
    return FALSE;
 8000342:	2300      	movs	r3, #0
 8000344:	e016      	b.n	8000374 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff55 	bl	80001fc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff4f 	bl	80001fc <SPI_RxBytePtr>
  } while(btr -= 2);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3b02      	subs	r3, #2
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1ed      	bne.n	8000346 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800036a:	f7ff ff29 	bl	80001c0 <SPI_RxByte>
  SPI_RxByte();
 800036e:	f7ff ff27 	bl	80001c0 <SPI_RxByte>
  
  return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20002585 	.word	0x20002585

08000380 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000390:	f7ff ff42 	bl	8000218 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
    return FALSE;
 800039a:	2300      	movs	r3, #0
 800039c:	e040      	b.n	8000420 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fef3 	bl	800018c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	; 0xfd
 80003aa:	d031      	beq.n	8000410 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fee7 	bl	800018c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	1c5a      	adds	r2, r3, #1
 80003c2:	607a      	str	r2, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff fee0 	bl	800018c <SPI_TxByte>
    } while (--wc);
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	73bb      	strb	r3, [r7, #14]
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1eb      	bne.n	80003b0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80003d8:	f7ff fef2 	bl	80001c0 <SPI_RxByte>
    SPI_RxByte();
 80003dc:	f7ff fef0 	bl	80001c0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80003e0:	e00b      	b.n	80003fa <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80003e2:	f7ff feed 	bl	80001c0 <SPI_RxByte>
 80003e6:	4603      	mov	r3, r0
 80003e8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	f003 031f 	and.w	r3, r3, #31
 80003f0:	2b05      	cmp	r3, #5
 80003f2:	d006      	beq.n	8000402 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80003f4:	7b7b      	ldrb	r3, [r7, #13]
 80003f6:	3301      	adds	r3, #1
 80003f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80003fa:	7b7b      	ldrb	r3, [r7, #13]
 80003fc:	2b40      	cmp	r3, #64	; 0x40
 80003fe:	d9f0      	bls.n	80003e2 <SD_TxDataBlock+0x62>
 8000400:	e000      	b.n	8000404 <SD_TxDataBlock+0x84>
        break;
 8000402:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000404:	bf00      	nop
 8000406:	f7ff fedb 	bl	80001c0 <SPI_RxByte>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0fa      	beq.n	8000406 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	f003 031f 	and.w	r3, r3, #31
 8000416:	2b05      	cmp	r3, #5
 8000418:	d101      	bne.n	800041e <SD_TxDataBlock+0x9e>
    return TRUE;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000434:	f7ff fef0 	bl	8000218 <SD_ReadyWait>
 8000438:	4603      	mov	r3, r0
 800043a:	2bff      	cmp	r3, #255	; 0xff
 800043c:	d001      	beq.n	8000442 <SD_SendCmd+0x1a>
    return 0xFF;
 800043e:	23ff      	movs	r3, #255	; 0xff
 8000440:	e040      	b.n	80004c4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff fea1 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	0e1b      	lsrs	r3, r3, #24
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe9b 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe95 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe8f 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fe8a 	bl	800018c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b40      	cmp	r3, #64	; 0x40
 8000480:	d101      	bne.n	8000486 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000482:	2395      	movs	r3, #149	; 0x95
 8000484:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b48      	cmp	r3, #72	; 0x48
 800048a:	d101      	bne.n	8000490 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800048c:	2387      	movs	r3, #135	; 0x87
 800048e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe7a 	bl	800018c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b4c      	cmp	r3, #76	; 0x4c
 800049c:	d101      	bne.n	80004a2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800049e:	f7ff fe8f 	bl	80001c0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80004a2:	230a      	movs	r3, #10
 80004a4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80004a6:	f7ff fe8b 	bl	80001c0 <SPI_RxByte>
 80004aa:	4603      	mov	r3, r0
 80004ac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da05      	bge.n	80004c2 <SD_SendCmd+0x9a>
 80004b6:	7bbb      	ldrb	r3, [r7, #14]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	7bbb      	ldrb	r3, [r7, #14]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d1f1      	bne.n	80004a6 <SD_SendCmd+0x7e>
  
  return res;
 80004c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80004dc:	2301      	movs	r3, #1
 80004de:	e0d5      	b.n	800068c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004e0:	4b6c      	ldr	r3, [pc, #432]	; (8000694 <SD_disk_initialize+0x1c8>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <SD_disk_initialize+0x2a>
    return Stat;        
 80004ee:	4b69      	ldr	r3, [pc, #420]	; (8000694 <SD_disk_initialize+0x1c8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	e0ca      	b.n	800068c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80004f6:	f7ff feab 	bl	8000250 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80004fa:	f7ff fe2f 	bl	800015c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000502:	2100      	movs	r1, #0
 8000504:	2040      	movs	r0, #64	; 0x40
 8000506:	f7ff ff8f 	bl	8000428 <SD_SendCmd>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	f040 80a5 	bne.w	800065c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000512:	4b61      	ldr	r3, [pc, #388]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000518:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800051c:	2048      	movs	r0, #72	; 0x48
 800051e:	f7ff ff83 	bl	8000428 <SD_SendCmd>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d158      	bne.n	80005da <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e00c      	b.n	8000548 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800052e:	7bfc      	ldrb	r4, [r7, #15]
 8000530:	f7ff fe46 	bl	80001c0 <SPI_RxByte>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	f104 0310 	add.w	r3, r4, #16
 800053c:	443b      	add	r3, r7
 800053e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	3301      	adds	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d9ef      	bls.n	800052e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800054e:	7abb      	ldrb	r3, [r7, #10]
 8000550:	2b01      	cmp	r3, #1
 8000552:	f040 8083 	bne.w	800065c <SD_disk_initialize+0x190>
 8000556:	7afb      	ldrb	r3, [r7, #11]
 8000558:	2baa      	cmp	r3, #170	; 0xaa
 800055a:	d17f      	bne.n	800065c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800055c:	2100      	movs	r1, #0
 800055e:	2077      	movs	r0, #119	; 0x77
 8000560:	f7ff ff62 	bl	8000428 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	d807      	bhi.n	800057a <SD_disk_initialize+0xae>
 800056a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800056e:	2069      	movs	r0, #105	; 0x69
 8000570:	f7ff ff5a 	bl	8000428 <SD_SendCmd>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <SD_disk_initialize+0x1cc>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1eb      	bne.n	800055c <SD_disk_initialize+0x90>
 8000584:	e000      	b.n	8000588 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000586:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <SD_disk_initialize+0x1cc>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d064      	beq.n	800065c <SD_disk_initialize+0x190>
 8000592:	2100      	movs	r1, #0
 8000594:	207a      	movs	r0, #122	; 0x7a
 8000596:	f7ff ff47 	bl	8000428 <SD_SendCmd>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d15d      	bne.n	800065c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e00c      	b.n	80005c0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80005a6:	7bfc      	ldrb	r4, [r7, #15]
 80005a8:	f7ff fe0a 	bl	80001c0 <SPI_RxByte>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	f104 0310 	add.w	r3, r4, #16
 80005b4:	443b      	add	r3, r7
 80005b6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	3301      	adds	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d9ef      	bls.n	80005a6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80005c6:	7a3b      	ldrb	r3, [r7, #8]
 80005c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SD_disk_initialize+0x108>
 80005d0:	2306      	movs	r3, #6
 80005d2:	e000      	b.n	80005d6 <SD_disk_initialize+0x10a>
 80005d4:	2302      	movs	r3, #2
 80005d6:	73bb      	strb	r3, [r7, #14]
 80005d8:	e040      	b.n	800065c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005da:	2100      	movs	r1, #0
 80005dc:	2077      	movs	r0, #119	; 0x77
 80005de:	f7ff ff23 	bl	8000428 <SD_SendCmd>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d808      	bhi.n	80005fa <SD_disk_initialize+0x12e>
 80005e8:	2100      	movs	r1, #0
 80005ea:	2069      	movs	r0, #105	; 0x69
 80005ec:	f7ff ff1c 	bl	8000428 <SD_SendCmd>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d801      	bhi.n	80005fa <SD_disk_initialize+0x12e>
 80005f6:	2302      	movs	r3, #2
 80005f8:	e000      	b.n	80005fc <SD_disk_initialize+0x130>
 80005fa:	2301      	movs	r3, #1
 80005fc:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d10e      	bne.n	8000622 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000604:	2100      	movs	r1, #0
 8000606:	2077      	movs	r0, #119	; 0x77
 8000608:	f7ff ff0e 	bl	8000428 <SD_SendCmd>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d80e      	bhi.n	8000630 <SD_disk_initialize+0x164>
 8000612:	2100      	movs	r1, #0
 8000614:	2069      	movs	r0, #105	; 0x69
 8000616:	f7ff ff07 	bl	8000428 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d107      	bne.n	8000630 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000620:	e00d      	b.n	800063e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000622:	2100      	movs	r1, #0
 8000624:	2041      	movs	r0, #65	; 0x41
 8000626:	f7ff feff 	bl	8000428 <SD_SendCmd>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1e1      	bne.n	80005fe <SD_disk_initialize+0x132>
 800063a:	e000      	b.n	800063e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800063c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d007      	beq.n	8000658 <SD_disk_initialize+0x18c>
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	2050      	movs	r0, #80	; 0x50
 800064e:	f7ff feeb 	bl	8000428 <SD_SendCmd>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <SD_disk_initialize+0x1d0>)
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000662:	f7ff fd87 	bl	8000174 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000666:	f7ff fdab 	bl	80001c0 <SPI_RxByte>
  
  if (type) 
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SD_disk_initialize+0x1c8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SD_disk_initialize+0x1c8>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e001      	b.n	8000686 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000682:	f7ff fe31 	bl	80002e8 <SD_PowerOff>
  }
  
  return Stat;
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_disk_initialize+0x1c8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20002585 	.word	0x20002585
 800069c:	20000040 	.word	0x20000040

080006a0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80006b0:	2301      	movs	r3, #1
 80006b2:	e002      	b.n	80006ba <SD_disk_status+0x1a>
  
  return Stat;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <SD_disk_status+0x24>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000000 	.word	0x20000000

080006c8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d102      	bne.n	80006e4 <SD_disk_read+0x1c>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006e4:	2304      	movs	r3, #4
 80006e6:	e051      	b.n	800078c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <SD_disk_read+0xcc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006f6:	2303      	movs	r3, #3
 80006f8:	e048      	b.n	800078c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SD_disk_read+0xd0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800070c:	f7ff fd26 	bl	800015c <SELECT>
  
  if (count == 1) 
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d111      	bne.n	800073a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2051      	movs	r0, #81	; 0x51
 800071a:	f7ff fe85 	bl	8000428 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d129      	bne.n	8000778 <SD_disk_read+0xb0>
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdf3 	bl	8000314 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d021      	beq.n	8000778 <SD_disk_read+0xb0>
      count = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	e01e      	b.n	8000778 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2052      	movs	r0, #82	; 0x52
 800073e:	f7ff fe73 	bl	8000428 <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d117      	bne.n	8000778 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	f7ff fde1 	bl	8000314 <SD_RxDataBlock>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800075e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ed      	bne.n	8000748 <SD_disk_read+0x80>
 800076c:	e000      	b.n	8000770 <SD_disk_read+0xa8>
          break;
 800076e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000770:	2100      	movs	r1, #0
 8000772:	204c      	movs	r0, #76	; 0x4c
 8000774:	f7ff fe58 	bl	8000428 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000778:	f7ff fcfc 	bl	8000174 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800077c:	f7ff fd20 	bl	80001c0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000040 	.word	0x20000040

0800079c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <SD_disk_write+0x1c>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <SD_disk_write+0x20>
    return RES_PARERR;
 80007b8:	2304      	movs	r3, #4
 80007ba:	e06b      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <SD_disk_write+0x100>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ca:	2303      	movs	r3, #3
 80007cc:	e062      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <SD_disk_write+0x100>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007dc:	2302      	movs	r3, #2
 80007de:	e059      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <SD_disk_write+0x104>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80007f2:	f7ff fcb3 	bl	800015c <SELECT>
  
  if (count == 1) 
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d110      	bne.n	800081e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	2058      	movs	r0, #88	; 0x58
 8000800:	f7ff fe12 	bl	8000428 <SD_SendCmd>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d13a      	bne.n	8000880 <SD_disk_write+0xe4>
 800080a:	21fe      	movs	r1, #254	; 0xfe
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	f7ff fdb7 	bl	8000380 <SD_TxDataBlock>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d033      	beq.n	8000880 <SD_disk_write+0xe4>
      count = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	e030      	b.n	8000880 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <SD_disk_write+0x104>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2077      	movs	r0, #119	; 0x77
 800082e:	f7ff fdfb 	bl	8000428 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	2057      	movs	r0, #87	; 0x57
 8000836:	f7ff fdf7 	bl	8000428 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2059      	movs	r0, #89	; 0x59
 800083e:	f7ff fdf3 	bl	8000428 <SD_SendCmd>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11b      	bne.n	8000880 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000848:	21fc      	movs	r1, #252	; 0xfc
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fd98 	bl	8000380 <SD_TxDataBlock>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800085c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1ee      	bne.n	8000848 <SD_disk_write+0xac>
 800086a:	e000      	b.n	800086e <SD_disk_write+0xd2>
          break;
 800086c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800086e:	21fd      	movs	r1, #253	; 0xfd
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fd85 	bl	8000380 <SD_TxDataBlock>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <SD_disk_write+0xe4>
      {        
        count = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000880:	f7ff fc78 	bl	8000174 <DESELECT>
  SPI_RxByte();
 8000884:	f7ff fc9c 	bl	80001c0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000040 	.word	0x20000040

080008a4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	603a      	str	r2, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	460b      	mov	r3, r1
 80008b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008be:	2304      	movs	r3, #4
 80008c0:	e11b      	b.n	8000afa <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d129      	bne.n	8000922 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d017      	beq.n	8000906 <SD_disk_ioctl+0x62>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	dc1f      	bgt.n	800091a <SD_disk_ioctl+0x76>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <SD_disk_ioctl+0x40>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <SD_disk_ioctl+0x56>
 80008e2:	e01a      	b.n	800091a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80008e4:	f7ff fd0c 	bl	8000300 <SD_CheckPower>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80008ee:	f7ff fcfb 	bl	80002e8 <SD_PowerOff>
      res = RES_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008f8:	e0fd      	b.n	8000af6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80008fa:	f7ff fca9 	bl	8000250 <SD_PowerOn>
      res = RES_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000904:	e0f7      	b.n	8000af6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	1c5c      	adds	r4, r3, #1
 800090a:	f7ff fcf9 	bl	8000300 <SD_CheckPower>
 800090e:	4603      	mov	r3, r0
 8000910:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000918:	e0ed      	b.n	8000af6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800091a:	2304      	movs	r3, #4
 800091c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000920:	e0e9      	b.n	8000af6 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000922:	4b78      	ldr	r3, [pc, #480]	; (8000b04 <SD_disk_ioctl+0x260>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000930:	2303      	movs	r3, #3
 8000932:	e0e2      	b.n	8000afa <SD_disk_ioctl+0x256>
    
    SELECT();
 8000934:	f7ff fc12 	bl	800015c <SELECT>
    
    switch (ctrl) 
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	2b0d      	cmp	r3, #13
 800093c:	f200 80cc 	bhi.w	8000ad8 <SD_disk_ioctl+0x234>
 8000940:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <SD_disk_ioctl+0xa4>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000a43 	.word	0x08000a43
 800094c:	08000981 	.word	0x08000981
 8000950:	08000a33 	.word	0x08000a33
 8000954:	08000ad9 	.word	0x08000ad9
 8000958:	08000ad9 	.word	0x08000ad9
 800095c:	08000ad9 	.word	0x08000ad9
 8000960:	08000ad9 	.word	0x08000ad9
 8000964:	08000ad9 	.word	0x08000ad9
 8000968:	08000ad9 	.word	0x08000ad9
 800096c:	08000ad9 	.word	0x08000ad9
 8000970:	08000ad9 	.word	0x08000ad9
 8000974:	08000a55 	.word	0x08000a55
 8000978:	08000a79 	.word	0x08000a79
 800097c:	08000a9d 	.word	0x08000a9d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000980:	2100      	movs	r1, #0
 8000982:	2049      	movs	r0, #73	; 0x49
 8000984:	f7ff fd50 	bl	8000428 <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	f040 80a8 	bne.w	8000ae0 <SD_disk_ioctl+0x23c>
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2110      	movs	r1, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fcbc 	bl	8000314 <SD_RxDataBlock>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 809e 	beq.w	8000ae0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80009a4:	7b3b      	ldrb	r3, [r7, #12]
 80009a6:	099b      	lsrs	r3, r3, #6
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10e      	bne.n	80009cc <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	7d3b      	ldrb	r3, [r7, #20]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009c2:	8bfb      	ldrh	r3, [r7, #30]
 80009c4:	029a      	lsls	r2, r3, #10
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e02e      	b.n	8000a2a <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009cc:	7c7b      	ldrb	r3, [r7, #17]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	7dbb      	ldrb	r3, [r7, #22]
 80009d6:	09db      	lsrs	r3, r3, #7
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	7d7b      	ldrb	r3, [r7, #21]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f003 0306 	and.w	r3, r3, #6
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	3302      	adds	r3, #2
 80009f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	099b      	lsrs	r3, r3, #6
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	7cbb      	ldrb	r3, [r7, #18]
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a1c:	8bfa      	ldrh	r2, [r7, #30]
 8000a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a22:	3b09      	subs	r3, #9
 8000a24:	409a      	lsls	r2, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a30:	e056      	b.n	8000ae0 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a40:	e055      	b.n	8000aee <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a42:	f7ff fbe9 	bl	8000218 <SD_ReadyWait>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2bff      	cmp	r3, #255	; 0xff
 8000a4a:	d14b      	bne.n	8000ae4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a52:	e047      	b.n	8000ae4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a54:	2100      	movs	r1, #0
 8000a56:	2049      	movs	r0, #73	; 0x49
 8000a58:	f7ff fce6 	bl	8000428 <SD_SendCmd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d142      	bne.n	8000ae8 <SD_disk_ioctl+0x244>
 8000a62:	2110      	movs	r1, #16
 8000a64:	6a38      	ldr	r0, [r7, #32]
 8000a66:	f7ff fc55 	bl	8000314 <SD_RxDataBlock>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d03b      	beq.n	8000ae8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a76:	e037      	b.n	8000ae8 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a78:	2100      	movs	r1, #0
 8000a7a:	204a      	movs	r0, #74	; 0x4a
 8000a7c:	f7ff fcd4 	bl	8000428 <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d132      	bne.n	8000aec <SD_disk_ioctl+0x248>
 8000a86:	2110      	movs	r1, #16
 8000a88:	6a38      	ldr	r0, [r7, #32]
 8000a8a:	f7ff fc43 	bl	8000314 <SD_RxDataBlock>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d02b      	beq.n	8000aec <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a9a:	e027      	b.n	8000aec <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	207a      	movs	r0, #122	; 0x7a
 8000aa0:	f7ff fcc2 	bl	8000428 <SD_SendCmd>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d116      	bne.n	8000ad8 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ab0:	e00b      	b.n	8000aca <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ab2:	6a3c      	ldr	r4, [r7, #32]
 8000ab4:	1c63      	adds	r3, r4, #1
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	f7ff fb82 	bl	80001c0 <SPI_RxByte>
 8000abc:	4603      	mov	r3, r0
 8000abe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d9ef      	bls.n	8000ab2 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ade:	e006      	b.n	8000aee <SD_disk_ioctl+0x24a>
      break;
 8000ae0:	bf00      	nop
 8000ae2:	e004      	b.n	8000aee <SD_disk_ioctl+0x24a>
      break;
 8000ae4:	bf00      	nop
 8000ae6:	e002      	b.n	8000aee <SD_disk_ioctl+0x24a>
      break;
 8000ae8:	bf00      	nop
 8000aea:	e000      	b.n	8000aee <SD_disk_ioctl+0x24a>
      break;
 8000aec:	bf00      	nop
    }
    
    DESELECT();
 8000aee:	f7ff fb41 	bl	8000174 <DESELECT>
    SPI_RxByte();
 8000af2:	f7ff fb65 	bl	80001c0 <SPI_RxByte>
  }
  
  return res;
 8000af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	372c      	adds	r7, #44	; 0x2c
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000000 	.word	0x20000000

08000b08 <send_uart>:
FRESULT fresult;
char buffer[1024];

UINT br, bw;

void send_uart(char *string){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <send_uart+0x2c>)
 8000b26:	f001 fee0 	bl	80028ea <HAL_UART_Transmit>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000009c 	.word	0x2000009c

08000b38 <bufclear>:

void bufclear(void){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++){
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	e007      	b.n	8000b54 <bufclear+0x1c>
		buffer[i] = '\0';
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <bufclear+0x30>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b5a:	dbf3      	blt.n	8000b44 <bufclear+0xc>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	20002184 	.word	0x20002184

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 fb37 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f889 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f000 f957 	bl	8000e2c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b7e:	f000 f8cb 	bl	8000d18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b82:	f000 f8ff 	bl	8000d84 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b86:	f000 f927 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000b8a:	f002 f8bb 	bl	8002d04 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "", 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4930      	ldr	r1, [pc, #192]	; (8000c54 <main+0xe8>)
 8000b92:	4831      	ldr	r0, [pc, #196]	; (8000c58 <main+0xec>)
 8000b94:	f004 fd8c 	bl	80056b0 <f_mount>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <main+0xf0>)
 8000b9e:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <main+0xf0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <main+0x44>
	  send_uart("Error Mounting SD CARD...\n");
 8000ba8:	482d      	ldr	r0, [pc, #180]	; (8000c60 <main+0xf4>)
 8000baa:	f7ff ffad 	bl	8000b08 <send_uart>
 8000bae:	e002      	b.n	8000bb6 <main+0x4a>
  else
	  send_uart("SD CARD mounted successfully...\n");
 8000bb0:	482c      	ldr	r0, [pc, #176]	; (8000c64 <main+0xf8>)
 8000bb2:	f7ff ffa9 	bl	8000b08 <send_uart>

  f_open(&fil, "result.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000bb6:	2213      	movs	r2, #19
 8000bb8:	492b      	ldr	r1, [pc, #172]	; (8000c68 <main+0xfc>)
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <main+0x100>)
 8000bbc:	f004 fdc2 	bl	8005744 <f_open>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int loop = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  while (loop < 50)
 8000bc4:	e027      	b.n	8000c16 <main+0xaa>
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<256; i++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	e010      	b.n	8000bee <main+0x82>
		  buffer[i] = HAL_UART_Receive(&huart3, buffer, sizeof(buffer), 10);
 8000bcc:	230a      	movs	r3, #10
 8000bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd2:	4927      	ldr	r1, [pc, #156]	; (8000c70 <main+0x104>)
 8000bd4:	4827      	ldr	r0, [pc, #156]	; (8000c74 <main+0x108>)
 8000bd6:	f001 ff1a 	bl	8002a0e <HAL_UART_Receive>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <main+0x104>)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	460a      	mov	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<256; i++){
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	ddeb      	ble.n	8000bcc <main+0x60>
		  if(buffer[i] == '\r\n') break;
	  }

	  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 10);
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	491d      	ldr	r1, [pc, #116]	; (8000c70 <main+0x104>)
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <main+0x10c>)
 8000bfe:	f001 fe74 	bl	80028ea <HAL_UART_Transmit>
	  f_printf(&fil, "Receiver: '%s' \n\r", buffer);
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <main+0x104>)
 8000c04:	491d      	ldr	r1, [pc, #116]	; (8000c7c <main+0x110>)
 8000c06:	4819      	ldr	r0, [pc, #100]	; (8000c6c <main+0x100>)
 8000c08:	f005 fc24 	bl	8006454 <f_printf>

	  bufclear();
 8000c0c:	f7ff ff94 	bl	8000b38 <bufclear>
	  loop++;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	607b      	str	r3, [r7, #4]
  while (loop < 50)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b31      	cmp	r3, #49	; 0x31
 8000c1a:	ddd4      	ble.n	8000bc6 <main+0x5a>
    /* USER CODE BEGIN 3 */
  }
  bufclear();
 8000c1c:	f7ff ff8c 	bl	8000b38 <bufclear>

  HAL_Delay(2000);
 8000c20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c24:	f000 fb40 	bl	80012a8 <HAL_Delay>
  f_close(&fil);
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <main+0x100>)
 8000c2a:	f005 fbaa 	bl	8006382 <f_close>

  send_uart("The data is being written...\n");
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <main+0x114>)
 8000c30:	f7ff ff6a 	bl	8000b08 <send_uart>
  send_uart("Please wait 5-10 seconds before unplugging the SD Card\n");
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <main+0x118>)
 8000c36:	f7ff ff67 	bl	8000b08 <send_uart>

  HAL_Delay(7000);
 8000c3a:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000c3e:	f000 fb33 	bl	80012a8 <HAL_Delay>
  send_uart("DONE...The data has successfully written in the SD Card\n");
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <main+0x11c>)
 8000c44:	f7ff ff60 	bl	8000b08 <send_uart>
 8000c48:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08006a78 	.word	0x08006a78
 8000c58:	20000124 	.word	0x20000124
 8000c5c:	20002180 	.word	0x20002180
 8000c60:	08006a7c 	.word	0x08006a7c
 8000c64:	08006a98 	.word	0x08006a98
 8000c68:	08006abc 	.word	0x08006abc
 8000c6c:	20001154 	.word	0x20001154
 8000c70:	20002184 	.word	0x20002184
 8000c74:	200000e0 	.word	0x200000e0
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	08006ac8 	.word	0x08006ac8
 8000c80:	08006adc 	.word	0x08006adc
 8000c84:	08006afc 	.word	0x08006afc
 8000c88:	08006b34 	.word	0x08006b34

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 fed8 	bl	8006a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fd8b 	bl	80017f0 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ce0:	f000 f8ee 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fff8 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d0a:	f000 f8d9 	bl	8000ec0 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3740      	adds	r7, #64	; 0x40
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d1e:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d64:	220a      	movs	r2, #10
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d6a:	f001 f95b 	bl	8002024 <HAL_SPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d74:	f000 f8a4 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000044 	.word	0x20000044
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f001 fd48 	bl	8002850 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f87b 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_USART3_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e10:	f001 fd1e 	bl	8002850 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f851 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000e0 	.word	0x200000e0
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e46:	f043 0320 	orr.w	r3, r3, #32
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <MX_GPIO_Init+0x90>)
 8000e8e:	f000 fc97 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_GPIO_Init+0x90>)
 8000eaa:	f000 fb05 	bl	80014b8 <HAL_GPIO_Init>

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010c00 	.word	0x40010c00

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_MspInit+0x5c>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x60>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_MspInit+0x60>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d12f      	bne.n	8000fb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f80:	23a0      	movs	r3, #160	; 0xa0
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_SPI_MspInit+0x90>)
 8000f94:	f000 fa90 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_SPI_MspInit+0x90>)
 8000fac:	f000 fa84 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40013000 	.word	0x40013000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a37      	ldr	r2, [pc, #220]	; (80010bc <HAL_UART_MspInit+0xf8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d130      	bne.n	8001046 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001014:	2304      	movs	r3, #4
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4619      	mov	r1, r3
 8001026:	4827      	ldr	r0, [pc, #156]	; (80010c4 <HAL_UART_MspInit+0x100>)
 8001028:	f000 fa46 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800102c:	2308      	movs	r3, #8
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4619      	mov	r1, r3
 800103e:	4821      	ldr	r0, [pc, #132]	; (80010c4 <HAL_UART_MspInit+0x100>)
 8001040:	f000 fa3a 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001044:	e036      	b.n	80010b4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_UART_MspInit+0x104>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d131      	bne.n	80010b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8001056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_UART_MspInit+0xfc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	4619      	mov	r1, r3
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <HAL_UART_MspInit+0x108>)
 8001096:	f000 fa0f 	bl	80014b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800109a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <HAL_UART_MspInit+0x108>)
 80010b0:	f000 fa02 	bl	80014b8 <HAL_GPIO_Init>
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40004800 	.word	0x40004800
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <SDTimer_Handler+0x3c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <SDTimer_Handler+0x1c>
		Timer1--;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <SDTimer_Handler+0x3c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <SDTimer_Handler+0x3c>)
 80010ea:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SDTimer_Handler+0x40>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <SDTimer_Handler+0x34>
		Timer2--;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SDTimer_Handler+0x40>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <SDTimer_Handler+0x40>)
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20002585 	.word	0x20002585
 8001110:	20002586 	.word	0x20002586

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <SysTick_Handler+0x30>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3301      	adds	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SysTick_Handler+0x30>)
 8001168:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <SysTick_Handler+0x30>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b09      	cmp	r3, #9
 8001172:	d904      	bls.n	800117e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Handler+0x30>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800117a:	f7ff ffa9 	bl	80010d0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f877 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20002584 	.word	0x20002584

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011be:	f7ff ffe5 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f005 fc21 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c6:	f7ff fcd1 	bl	8000b6c <main>
  bx lr
 80011ca:	4770      	bx	lr
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011d4:	08007138 	.word	0x08007138
  ldr r2, =_sbss
 80011d8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80011dc:	200027c0 	.word	0x200027c0

080011e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC1_2_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x28>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x28>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f92b 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fe64 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f935 	bl	800149e <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f90b 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000004 	.word	0x20000004
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000008 	.word	0x20000008

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_IncTick+0x20>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20002588 	.word	0x20002588

08001294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_GetTick+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20002588 	.word	0x20002588

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff fff0 	bl	8001294 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffe0 	bl	8001294 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff90 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff49 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff5e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffb0 	bl	800140c <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e169      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8158 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a9a      	ldr	r2, [pc, #616]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d875      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 80014fa:	4a98      	ldr	r2, [pc, #608]	; (800175c <HAL_GPIO_Init+0x2a4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d058      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001500:	4a96      	ldr	r2, [pc, #600]	; (800175c <HAL_GPIO_Init+0x2a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d86f      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001506:	4a96      	ldr	r2, [pc, #600]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d052      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d869      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001512:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04c      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001518:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d863      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800151e:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d046      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001524:	4a90      	ldr	r2, [pc, #576]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d85d      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d82a      	bhi.n	8001584 <HAL_GPIO_Init+0xcc>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d859      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_GPIO_Init+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015b3 	.word	0x080015b3
 800153c:	0800158d 	.word	0x0800158d
 8001540:	0800159f 	.word	0x0800159f
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	080015e7 	.word	0x080015e7
 8001554:	080015e7 	.word	0x080015e7
 8001558:	080015e7 	.word	0x080015e7
 800155c:	080015e7 	.word	0x080015e7
 8001560:	080015e7 	.word	0x080015e7
 8001564:	080015e7 	.word	0x080015e7
 8001568:	080015e7 	.word	0x080015e7
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015e7 	.word	0x080015e7
 8001574:	080015e7 	.word	0x080015e7
 8001578:	080015e7 	.word	0x080015e7
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	4a79      	ldr	r2, [pc, #484]	; (800176c <HAL_GPIO_Init+0x2b4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e02c      	b.n	80015e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e029      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e024      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e01f      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	330c      	adds	r3, #12
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e01a      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ba:	2304      	movs	r3, #4
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e013      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	611a      	str	r2, [r3, #16]
          break;
 80015d2:	e009      	b.n	80015e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	615a      	str	r2, [r3, #20]
          break;
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          break;
 80015e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d801      	bhi.n	80015f2 <HAL_GPIO_Init+0x13a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_Init+0x13e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d802      	bhi.n	8001604 <HAL_GPIO_Init+0x14c>
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x152>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3b08      	subs	r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	210f      	movs	r1, #15
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80b1 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_GPIO_Init+0x2c0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1ec>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1e8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1e0>
 8001694:	2303      	movs	r3, #3
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 8001698:	2304      	movs	r3, #4
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a4:	2300      	movs	r3, #0
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b6:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4928      	ldr	r1, [pc, #160]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	491e      	ldr	r1, [pc, #120]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	4918      	ldr	r1, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4914      	ldr	r1, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d021      	beq.n	800178c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e021      	b.n	800179a <HAL_GPIO_Init+0x2e2>
 8001756:	bf00      	nop
 8001758:	10320000 	.word	0x10320000
 800175c:	10310000 	.word	0x10310000
 8001760:	10220000 	.word	0x10220000
 8001764:	10210000 	.word	0x10210000
 8001768:	10120000 	.word	0x10120000
 800176c:	10110000 	.word	0x10110000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_GPIO_Init+0x304>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x304>)
 8001796:	4013      	ands	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f ae8e 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	; 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e272      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06c      	beq.n	800191c <HAL_RCC_OscConfig+0x12c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d168      	bne.n	800191c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x76>
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e02e      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xbc>
 8001892:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a71      	ldr	r2, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fce2 	bl	8001294 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fcde 	bl	8001294 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e200      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe4>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fcce 	bl	8001294 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fcca 	bl	8001294 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1ec      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x10c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fc83 	bl	8001294 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fc7f 	bl	8001294 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc62 	bl	8001294 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc5e 	bl	8001294 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e180      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d019      	beq.n	8001a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc42 	bl	8001294 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc3e 	bl	8001294 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e160      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 fad8 	bl	8001fe8 <RCC_Delay>
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fc28 	bl	8001294 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fc24 	bl	8001294 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e146      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbe5 	bl	8001294 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fbe1 	bl	8001294 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e103      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x312>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x356>
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb95 	bl	8001294 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb91 	bl	8001294 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x37e>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb7f 	bl	8001294 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb7b 	bl	8001294 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d061      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d146      	bne.n	8001c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb4f 	bl	8001294 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fb4b 	bl	8001294 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	430b      	orrs	r3, r1
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb1f 	bl	8001294 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb1b 	bl	8001294 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e03d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46a>
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb08 	bl	8001294 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fb04 	bl	8001294 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x498>
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x500>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff fa56 	bl	8001294 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff fa52 	bl	8001294 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f9b4 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08006bc8 	.word	0x08006bc8
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b490      	push	{r4, r7}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ed0:	1d3c      	adds	r4, r7, #4
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ed8:	f240 2301 	movw	r3, #513	; 0x201
 8001edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x40>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x46>
 8001f06:	e02b      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0a:	623b      	str	r3, [r7, #32]
      break;
 8001f0c:	e02b      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	443b      	add	r3, r7
 8001f1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	443b      	add	r3, r7
 8001f38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f42:	fb03 f202 	mul.w	r2, r3, r2
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e004      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	623b      	str	r3, [r7, #32]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc90      	pop	{r4, r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08006b70 	.word	0x08006b70
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08006bd8 	.word	0x08006bd8

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08006bd8 	.word	0x08006bd8

08001fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <RCC_Delay+0x34>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <RCC_Delay+0x38>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002004:	bf00      	nop
  }
  while (Delay --);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <RCC_Delay+0x1c>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000004 	.word	0x20000004
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e076      	b.n	8002124 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002046:	d009      	beq.n	800205c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
 800204e:	e005      	b.n	800205c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe ff5a 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	0c1a      	lsrs	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f002 0204 	and.w	r2, r2, #4
 8002102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_SPI_Transmit+0x22>
 800214a:	2302      	movs	r3, #2
 800214c:	e126      	b.n	800239c <HAL_SPI_Transmit+0x270>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002156:	f7ff f89d 	bl	8001294 <HAL_GetTick>
 800215a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d002      	beq.n	8002172 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002170:	e10b      	b.n	800238a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_SPI_Transmit+0x52>
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002182:	e102      	b.n	800238a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ca:	d10f      	bne.n	80021ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d007      	beq.n	800220a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002212:	d14b      	bne.n	80022ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Transmit+0xf6>
 800221c:	8afb      	ldrh	r3, [r7, #22]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d13e      	bne.n	80022a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	1c9a      	adds	r2, r3, #2
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002246:	e02b      	b.n	80022a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d112      	bne.n	800227c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c9a      	adds	r2, r3, #2
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
 800227a:	e011      	b.n	80022a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227c:	f7ff f80a 	bl	8001294 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d803      	bhi.n	8002294 <HAL_SPI_Transmit+0x168>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d102      	bne.n	800229a <HAL_SPI_Transmit+0x16e>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800229e:	e074      	b.n	800238a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ce      	bne.n	8002248 <HAL_SPI_Transmit+0x11c>
 80022aa:	e04c      	b.n	8002346 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_SPI_Transmit+0x18e>
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d140      	bne.n	800233c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022e0:	e02c      	b.n	800233c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d113      	bne.n	8002318 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	86da      	strh	r2, [r3, #54]	; 0x36
 8002316:	e011      	b.n	800233c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002318:	f7fe ffbc 	bl	8001294 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d803      	bhi.n	8002330 <HAL_SPI_Transmit+0x204>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d102      	bne.n	8002336 <HAL_SPI_Transmit+0x20a>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	77fb      	strb	r3, [r7, #31]
          goto error;
 800233a:	e026      	b.n	800238a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1cd      	bne.n	80022e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa62 	bl	8002814 <SPI_EndRxTxTransaction>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]
 8002386:	e000      	b.n	800238a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002388:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800239a:	7ffb      	ldrb	r3, [r7, #31]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x26>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e18a      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x33c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d2:	f7fe ff5f 	bl	8001294 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d00f      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x70>
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023fa:	d107      	bne.n	800240c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <HAL_SPI_TransmitReceive+0x68>
 8002404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002408:	2b04      	cmp	r3, #4
 800240a:	d003      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800240c:	2302      	movs	r3, #2
 800240e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002412:	e15b      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x82>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x82>
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800242c:	e14e      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b04      	cmp	r3, #4
 8002438:	d003      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2205      	movs	r2, #5
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	887a      	ldrh	r2, [r7, #2]
 800246a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d007      	beq.n	8002496 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249e:	d178      	bne.n	8002592 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x10a>
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d166      	bne.n	800257c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d2:	e053      	b.n	800257c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11b      	bne.n	800251a <HAL_SPI_TransmitReceive+0x176>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d016      	beq.n	800251a <HAL_SPI_TransmitReceive+0x176>
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d113      	bne.n	800251a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	1c9a      	adds	r2, r3, #2
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d119      	bne.n	800255c <HAL_SPI_TransmitReceive+0x1b8>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	b292      	uxth	r2, r2
 800253e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002558:	2301      	movs	r3, #1
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800255c:	f7fe fe9a 	bl	8001294 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002568:	429a      	cmp	r2, r3
 800256a:	d807      	bhi.n	800257c <HAL_SPI_TransmitReceive+0x1d8>
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d003      	beq.n	800257c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800257a:	e0a7      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1a6      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x130>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1a1      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x130>
 8002590:	e07c      	b.n	800268c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_TransmitReceive+0x1fc>
 800259a:	8b7b      	ldrh	r3, [r7, #26]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d16b      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c6:	e057      	b.n	8002678 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d11c      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x26c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d017      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x26c>
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d114      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d119      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x2ae>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d014      	beq.n	8002652 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800264e:	2301      	movs	r3, #1
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002652:	f7fe fe1f 	bl	8001294 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265e:	429a      	cmp	r2, r3
 8002660:	d803      	bhi.n	800266a <HAL_SPI_TransmitReceive+0x2c6>
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d102      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x2cc>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002676:	e029      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1a2      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x224>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d19d      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f8bf 	bl	8002814 <SPI_EndRxTxTransaction>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026a8:	e010      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	e000      	b.n	80026cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f6:	b2db      	uxtb	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
	...

08002704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002714:	f7fe fdbe 	bl	8001294 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002724:	f7fe fdb6 	bl	8001294 <HAL_GetTick>
 8002728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800273a:	e054      	b.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d050      	beq.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002744:	f7fe fda6 	bl	8001294 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d902      	bls.n	800275a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d13d      	bne.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002772:	d111      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277c:	d004      	beq.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d107      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a0:	d10f      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e017      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d19b      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000004 	.word	0x20000004

08002814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff ff6a 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e000      	b.n	8002848 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e03f      	b.n	80028e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fba4 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f9a7 	bl	8002be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08a      	sub	sp, #40	; 0x28
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	d17c      	bne.n	8002a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_UART_Transmit+0x2c>
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e075      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit+0x3e>
 8002924:	2302      	movs	r3, #2
 8002926:	e06e      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2221      	movs	r2, #33	; 0x21
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293e:	f7fe fca9 	bl	8001294 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x82>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800297c:	e02a      	b.n	80029d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f8e2 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e036      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3302      	adds	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e007      	b.n	80029c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1cf      	bne.n	800297e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f8b2 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e006      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b08a      	sub	sp, #40	; 0x28
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	f040 808c 	bne.w	8002b48 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Receive+0x2e>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e084      	b.n	8002b4a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Receive+0x40>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e07d      	b.n	8002b4a <HAL_UART_Receive+0x13c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2222      	movs	r2, #34	; 0x22
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6a:	f7fe fc13 	bl	8001294 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a84:	d108      	bne.n	8002a98 <HAL_UART_Receive+0x8a>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e003      	b.n	8002aa0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002aa8:	e043      	b.n	8002b32 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f84c 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e042      	b.n	8002b4a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	3302      	adds	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e01f      	b.n	8002b24 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d007      	beq.n	8002afe <HAL_UART_Receive+0xf0>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_UART_Receive+0xfe>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e008      	b.n	8002b1e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1b6      	bne.n	8002aaa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	e02c      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d028      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b72:	f7fe fb8f 	bl	8001294 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d21d      	bcs.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e00f      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0c3      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c22:	f023 030c 	bic.w	r3, r3, #12
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <UART_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7ff f9b6 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	e002      	b.n	8002c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7ff f99e 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <UART_SetConfig+0x118>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	0119      	lsls	r1, r3, #4
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <UART_SetConfig+0x118>)
 8002c96:	fba3 0302 	umull	r0, r3, r3, r2
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2064      	movs	r0, #100	; 0x64
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	3332      	adds	r3, #50	; 0x32
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <UART_SetConfig+0x118>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb4:	4419      	add	r1, r3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <UART_SetConfig+0x118>)
 8002cce:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <MX_FATFS_Init+0x18>)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_FATFS_Init+0x1c>)
 8002d0c:	f003 fe04 	bl	8006918 <FATFS_LinkDriver>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <MX_FATFS_Init+0x20>)
 8002d16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20002590 	.word	0x20002590
 8002d20:	20000010 	.word	0x20000010
 8002d24:	2000258c 	.word	0x2000258c

08002d28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002d2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fbc2 	bl	80004cc <SD_disk_initialize>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fc9d 	bl	80006a0 <SD_disk_status>
 8002d66:	4603      	mov	r3, r0
 8002d68:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002d82:	7bf8      	ldrb	r0, [r7, #15]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	f7fd fc9d 	bl	80006c8 <SD_disk_read>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	4603      	mov	r3, r0
 8002da8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002daa:	7bf8      	ldrb	r0, [r7, #15]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	f7fd fcf3 	bl	800079c <SD_disk_write>
 8002db6:	4603      	mov	r3, r0
 8002db8:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	603a      	str	r2, [r7, #0]
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	79b9      	ldrb	r1, [r7, #6]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fd63 	bl	80008a4 <SD_disk_ioctl>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <disk_status+0x30>)
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	4905      	ldr	r1, [pc, #20]	; (8002e1c <disk_status+0x30>)
 8002e06:	440a      	add	r2, r1
 8002e08:	7a12      	ldrb	r2, [r2, #8]
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4798      	blx	r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200027b4 	.word	0x200027b4

08002e20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <disk_initialize+0x48>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <disk_initialize+0x48>)
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <disk_initialize+0x48>)
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	4906      	ldr	r1, [pc, #24]	; (8002e68 <disk_initialize+0x48>)
 8002e50:	440a      	add	r2, r1
 8002e52:	7a12      	ldrb	r2, [r2, #8]
 8002e54:	4610      	mov	r0, r2
 8002e56:	4798      	blx	r3
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200027b4 	.word	0x200027b4

08002e6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <disk_read+0x3c>)
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	689c      	ldr	r4, [r3, #8]
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <disk_read+0x3c>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	7a18      	ldrb	r0, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	47a0      	blx	r4
 8002e98:	4603      	mov	r3, r0
 8002e9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200027b4 	.word	0x200027b4

08002eac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <disk_write+0x3c>)
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	68dc      	ldr	r4, [r3, #12]
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <disk_write+0x3c>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	7a18      	ldrb	r0, [r3, #8]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	47a0      	blx	r4
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]
  return res;
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200027b4 	.word	0x200027b4

08002eec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	603a      	str	r2, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <disk_ioctl+0x38>)
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	4906      	ldr	r1, [pc, #24]	; (8002f24 <disk_ioctl+0x38>)
 8002f0c:	440a      	add	r2, r1
 8002f0e:	7a10      	ldrb	r0, [r2, #8]
 8002f10:	79b9      	ldrb	r1, [r7, #6]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	4798      	blx	r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
  return res;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200027b4 	.word	0x200027b4

08002f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002f3c:	e007      	b.n	8002f4e <mem_cpy+0x26>
		*d++ = *s++;
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	1c53      	adds	r3, r2, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	6179      	str	r1, [r7, #20]
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f2      	bne.n	8002f3e <mem_cpy+0x16>
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002f74:	e005      	b.n	8002f82 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	617a      	str	r2, [r7, #20]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f4      	bne.n	8002f76 <mem_set+0x12>
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002fb0:	bf00      	nop
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <mem_cmp+0x40>
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	61ba      	str	r2, [r7, #24]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ec      	beq.n	8002fb2 <mem_cmp+0x1a>
	return r;
 8002fd8:	697b      	ldr	r3, [r7, #20]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002fee:	e002      	b.n	8002ff6 <chk_chr+0x12>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <chk_chr+0x26>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4293      	cmp	r3, r2
 8003008:	d1f2      	bne.n	8002ff0 <chk_chr+0xc>
	return *str;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	781b      	ldrb	r3, [r3, #0]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e03b      	b.n	80030a4 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800302c:	4931      	ldr	r1, [pc, #196]	; (80030f4 <chk_lock+0xdc>)
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02c      	beq.n	800309a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003040:	492c      	ldr	r1, [pc, #176]	; (80030f4 <chk_lock+0xdc>)
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d120      	bne.n	800309e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800305c:	4925      	ldr	r1, [pc, #148]	; (80030f4 <chk_lock+0xdc>)
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3304      	adds	r3, #4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003076:	429a      	cmp	r2, r3
 8003078:	d111      	bne.n	800309e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800307a:	491e      	ldr	r1, [pc, #120]	; (80030f4 <chk_lock+0xdc>)
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3308      	adds	r3, #8
 800308a:	881a      	ldrh	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003092:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8003094:	429a      	cmp	r2, r3
 8003096:	d102      	bne.n	800309e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8003098:	e007      	b.n	80030aa <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d9c0      	bls.n	800302c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d109      	bne.n	80030c4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <chk_lock+0xa4>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d101      	bne.n	80030c0 <chk_lock+0xa8>
 80030bc:	2300      	movs	r3, #0
 80030be:	e013      	b.n	80030e8 <chk_lock+0xd0>
 80030c0:	2312      	movs	r3, #18
 80030c2:	e011      	b.n	80030e8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <chk_lock+0xca>
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <chk_lock+0xdc>)
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	330a      	adds	r3, #10
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e0:	d101      	bne.n	80030e6 <chk_lock+0xce>
 80030e2:	2310      	movs	r3, #16
 80030e4:	e000      	b.n	80030e8 <chk_lock+0xd0>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000259c 	.word	0x2000259c

080030f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	e002      	b.n	800310a <enq_lock+0x12>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d809      	bhi.n	8003124 <enq_lock+0x2c>
 8003110:	490a      	ldr	r1, [pc, #40]	; (800313c <enq_lock+0x44>)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ef      	bne.n	8003104 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000259c 	.word	0x2000259c

08003140 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e02e      	b.n	80031ae <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003150:	4958      	ldr	r1, [pc, #352]	; (80032b4 <inc_lock+0x174>)
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d11d      	bne.n	80031a8 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800316c:	4951      	ldr	r1, [pc, #324]	; (80032b4 <inc_lock+0x174>)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3304      	adds	r3, #4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003184:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8003186:	429a      	cmp	r2, r3
 8003188:	d10e      	bne.n	80031a8 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800318a:	494a      	ldr	r1, [pc, #296]	; (80032b4 <inc_lock+0x174>)
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3308      	adds	r3, #8
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a2:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d006      	beq.n	80031b6 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d9cd      	bls.n	8003150 <inc_lock+0x10>
 80031b4:	e000      	b.n	80031b8 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80031b6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d148      	bne.n	8003250 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e002      	b.n	80031ca <inc_lock+0x8a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d809      	bhi.n	80031e4 <inc_lock+0xa4>
 80031d0:	4938      	ldr	r1, [pc, #224]	; (80032b4 <inc_lock+0x174>)
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ef      	bne.n	80031c4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d101      	bne.n	80031ee <inc_lock+0xae>
 80031ea:	2300      	movs	r3, #0
 80031ec:	e05d      	b.n	80032aa <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	482f      	ldr	r0, [pc, #188]	; (80032b4 <inc_lock+0x174>)
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4403      	add	r3, r0
 8003204:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	4829      	ldr	r0, [pc, #164]	; (80032b4 <inc_lock+0x174>)
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4403      	add	r3, r0
 800321c:	3304      	adds	r3, #4
 800321e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	88d8      	ldrh	r0, [r3, #6]
 8003228:	4922      	ldr	r1, [pc, #136]	; (80032b4 <inc_lock+0x174>)
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3308      	adds	r3, #8
 8003238:	4602      	mov	r2, r0
 800323a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800323c:	491d      	ldr	r1, [pc, #116]	; (80032b4 <inc_lock+0x174>)
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	330a      	adds	r3, #10
 800324c:	2200      	movs	r2, #0
 800324e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <inc_lock+0x130>
 8003256:	4917      	ldr	r1, [pc, #92]	; (80032b4 <inc_lock+0x174>)
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	330a      	adds	r3, #10
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <inc_lock+0x130>
 800326c:	2300      	movs	r3, #0
 800326e:	e01c      	b.n	80032aa <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <inc_lock+0x14e>
 8003276:	490f      	ldr	r1, [pc, #60]	; (80032b4 <inc_lock+0x174>)
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	330a      	adds	r3, #10
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	b299      	uxth	r1, r3
 800328c:	e001      	b.n	8003292 <inc_lock+0x152>
 800328e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003292:	4808      	ldr	r0, [pc, #32]	; (80032b4 <inc_lock+0x174>)
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	330a      	adds	r3, #10
 80032a2:	460a      	mov	r2, r1
 80032a4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	2000259c 	.word	0x2000259c

080032b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d82e      	bhi.n	800332a <dec_lock+0x72>
		n = Files[i].ctr;
 80032cc:	491b      	ldr	r1, [pc, #108]	; (800333c <dec_lock+0x84>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	330a      	adds	r3, #10
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d101      	bne.n	80032ec <dec_lock+0x34>
 80032e8:	2300      	movs	r3, #0
 80032ea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <dec_lock+0x40>
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80032f8:	4910      	ldr	r1, [pc, #64]	; (800333c <dec_lock+0x84>)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	330a      	adds	r3, #10
 8003308:	89fa      	ldrh	r2, [r7, #14]
 800330a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <dec_lock+0x6c>
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <dec_lock+0x84>)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	737b      	strb	r3, [r7, #13]
 8003328:	e001      	b.n	800332e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800332a:	2302      	movs	r3, #2
 800332c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800332e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	2000259c 	.word	0x2000259c

08003340 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e016      	b.n	800337c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800334e:	4910      	ldr	r1, [pc, #64]	; (8003390 <clear_lock+0x50>)
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d108      	bne.n	8003376 <clear_lock+0x36>
 8003364:	490a      	ldr	r1, [pc, #40]	; (8003390 <clear_lock+0x50>)
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3301      	adds	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d9e5      	bls.n	800334e <clear_lock+0xe>
	}
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	2000259c 	.word	0x2000259c

08003394 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a6:	791b      	ldrb	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d040      	beq.n	800342e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033bc:	7858      	ldrb	r0, [r3, #1]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	f7ff fd72 	bl	8002eac <disk_write>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <sync_window+0x40>
			res = FR_DISK_ERR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
 80033d2:	e02c      	b.n	800342e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033da:	2200      	movs	r2, #0
 80033dc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	1ad2      	subs	r2, r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d21b      	bcs.n	800342e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e012      	b.n	8003428 <sync_window+0x94>
					wsect += fs->fsize;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4413      	add	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	7858      	ldrb	r0, [r3, #1]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	2301      	movs	r3, #1
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	f7ff fd45 	bl	8002eac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3b01      	subs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d8e9      	bhi.n	8003402 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d01e      	beq.n	8003492 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff9d 	bl	8003394 <sync_window>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d116      	bne.n	8003492 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346a:	7858      	ldrb	r0, [r3, #1]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	2301      	movs	r3, #1
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f7ff fcfb 	bl	8002e6c <disk_read>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348c:	461a      	mov	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff75 	bl	8003394 <sync_window>
 80034aa:	4603      	mov	r3, r0
 80034ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 80ad 	bne.w	8003610 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f040 8098 	bne.w	80035f4 <sync_fs+0x158>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	795b      	ldrb	r3, [r3, #5]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 8091 	bne.w	80035f4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034da:	895b      	ldrh	r3, [r3, #10]
 80034dc:	461a      	mov	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	f7ff fd40 	bl	8002f64 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2255      	movs	r2, #85	; 0x55
 80034e8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	22aa      	movs	r2, #170	; 0xaa
 80034f0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2252      	movs	r2, #82	; 0x52
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2252      	movs	r2, #82	; 0x52
 80034fe:	705a      	strb	r2, [r3, #1]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2261      	movs	r2, #97	; 0x61
 8003504:	709a      	strb	r2, [r3, #2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2241      	movs	r2, #65	; 0x41
 800350a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2272      	movs	r2, #114	; 0x72
 8003510:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2272      	movs	r2, #114	; 0x72
 8003518:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2241      	movs	r2, #65	; 0x41
 8003520:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2261      	movs	r2, #97	; 0x61
 8003528:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	b29b      	uxth	r3, r3
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29b      	uxth	r3, r3
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	b2da      	uxtb	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	0e1b      	lsrs	r3, r3, #24
 800356e:	b2da      	uxtb	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	b29b      	uxth	r3, r3
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	b29b      	uxth	r3, r3
 8003594:	b2da      	uxtb	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	0e1b      	lsrs	r3, r3, #24
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	3301      	adds	r3, #1
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d8:	7858      	ldrb	r0, [r3, #1]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	2301      	movs	r3, #1
 80035e6:	f7ff fc61 	bl	8002eac <disk_write>
			fs->fsi_flag = 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	2200      	movs	r2, #0
 80035f2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fc73 	bl	8002eec <disk_ioctl>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3b02      	subs	r3, #2
 8003628:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	3b02      	subs	r3, #2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d301      	bcc.n	800363e <clust2sect+0x24>
 800363a:	2300      	movs	r3, #0
 800363c:	e00c      	b.n	8003658 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003644:	789b      	ldrb	r3, [r3, #2]
 8003646:	461a      	mov	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	fb03 f202 	mul.w	r2, r3, r2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	4413      	add	r3, r2
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d906      	bls.n	8003680 <get_fat+0x1e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <get_fat+0x24>
		val = 1;	/* Internal error */
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e0e4      	b.n	8003850 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	f000 8098 	beq.w	80037ca <get_fat+0x168>
 800369a:	2b03      	cmp	r3, #3
 800369c:	f300 80ce 	bgt.w	800383c <get_fat+0x1da>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d002      	beq.n	80036aa <get_fat+0x48>
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d05f      	beq.n	8003768 <get_fat+0x106>
 80036a8:	e0c8      	b.n	800383c <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c6:	895b      	ldrh	r3, [r3, #10]
 80036c8:	4619      	mov	r1, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d0:	4413      	add	r3, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff feaf 	bl	8003438 <move_window>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 80b0 	bne.w	8003842 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	60fa      	str	r2, [r7, #12]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ee:	8952      	ldrh	r2, [r2, #10]
 80036f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80036f4:	fb01 f202 	mul.w	r2, r1, r2
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370e:	895b      	ldrh	r3, [r3, #10]
 8003710:	4619      	mov	r1, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	fbb3 f3f1 	udiv	r3, r3, r1
 8003718:	4413      	add	r3, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fe8b 	bl	8003438 <move_window>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 808e 	bne.w	8003846 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003730:	895b      	ldrh	r3, [r3, #10]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	fbb3 f1f2 	udiv	r1, r3, r2
 800373a:	fb01 f202 	mul.w	r2, r1, r2
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <get_fat+0xfc>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	e002      	b.n	8003764 <get_fat+0x102>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	617b      	str	r3, [r7, #20]
			break;
 8003766:	e073      	b.n	8003850 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	895b      	ldrh	r3, [r3, #10]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	fbb3 f3f1 	udiv	r3, r3, r1
 8003784:	4413      	add	r3, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fe55 	bl	8003438 <move_window>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d15a      	bne.n	800384a <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800379e:	8952      	ldrh	r2, [r2, #10]
 80037a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80037a4:	fb01 f202 	mul.w	r2, r1, r2
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3301      	adds	r3, #1
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	b21a      	sxth	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	617b      	str	r3, [r7, #20]
			break;
 80037c8:	e042      	b.n	8003850 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	895b      	ldrh	r3, [r3, #10]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	4413      	add	r3, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fe24 	bl	8003438 <move_window>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d12b      	bne.n	800384e <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003800:	8952      	ldrh	r2, [r2, #10]
 8003802:	fbb3 f1f2 	udiv	r1, r3, r2
 8003806:	fb01 f202 	mul.w	r2, r1, r2
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3303      	adds	r3, #3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	061a      	lsls	r2, r3, #24
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3302      	adds	r3, #2
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	4313      	orrs	r3, r2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	3201      	adds	r2, #1
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	0212      	lsls	r2, r2, #8
 800382c:	4313      	orrs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003838:	617b      	str	r3, [r7, #20]
			break;
 800383a:	e009      	b.n	8003850 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e006      	b.n	8003850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800384e:	bf00      	nop
		}
	}

	return val;
 8003850:	697b      	ldr	r3, [r7, #20]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d906      	bls.n	800387a <put_fat+0x20>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <put_fat+0x26>
		res = FR_INT_ERR;
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e13a      	b.n	8003af6 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b03      	cmp	r3, #3
 800388a:	f000 80d0 	beq.w	8003a2e <put_fat+0x1d4>
 800388e:	2b03      	cmp	r3, #3
 8003890:	f300 8127 	bgt.w	8003ae2 <put_fat+0x288>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d003      	beq.n	80038a0 <put_fat+0x46>
 8003898:	2b02      	cmp	r3, #2
 800389a:	f000 808f 	beq.w	80039bc <put_fat+0x162>
 800389e:	e120      	b.n	8003ae2 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	895b      	ldrh	r3, [r3, #10]
 80038be:	4619      	mov	r1, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c6:	4413      	add	r3, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fdb4 	bl	8003438 <move_window>
 80038d0:	4603      	mov	r3, r0
 80038d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8106 	bne.w	8003ae8 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	617a      	str	r2, [r7, #20]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038e8:	8952      	ldrh	r2, [r2, #10]
 80038ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80038ee:	fb01 f202 	mul.w	r2, r1, r2
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <put_fat+0xc6>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	b25a      	sxtb	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	b25b      	sxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b25b      	sxtb	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e001      	b.n	8003924 <put_fat+0xca>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392e:	2201      	movs	r2, #1
 8003930:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003940:	895b      	ldrh	r3, [r3, #10]
 8003942:	4619      	mov	r1, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fbb3 f3f1 	udiv	r3, r3, r1
 800394a:	4413      	add	r3, r2
 800394c:	4619      	mov	r1, r3
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff fd72 	bl	8003438 <move_window>
 8003954:	4603      	mov	r3, r0
 8003956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80c6 	bne.w	8003aec <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003966:	895b      	ldrh	r3, [r3, #10]
 8003968:	461a      	mov	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003970:	fb01 f202 	mul.w	r2, r1, r2
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <put_fat+0x134>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e00e      	b.n	80039ac <put_fat+0x152>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b25b      	sxtb	r3, r3
 8003994:	f023 030f 	bic.w	r3, r3, #15
 8003998:	b25a      	sxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b25b      	sxtb	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b6:	2201      	movs	r2, #1
 80039b8:	711a      	strb	r2, [r3, #4]
			break;
 80039ba:	e09c      	b.n	8003af6 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	895b      	ldrh	r3, [r3, #10]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d8:	4413      	add	r3, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fd2b 	bl	8003438 <move_window>
 80039e2:	4603      	mov	r3, r0
 80039e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 8081 	bne.w	8003af0 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039f8:	8952      	ldrh	r2, [r2, #10]
 80039fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80039fe:	fb01 f202 	mul.w	r2, r1, r2
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a28:	2201      	movs	r2, #1
 8003a2a:	711a      	strb	r2, [r3, #4]
			break;
 8003a2c:	e063      	b.n	8003af6 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3c:	895b      	ldrh	r3, [r3, #10]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4619      	mov	r1, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fcf2 	bl	8003438 <move_window>
 8003a54:	4603      	mov	r3, r0
 8003a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a58:	7ffb      	ldrb	r3, [r7, #31]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d14a      	bne.n	8003af4 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a68:	8952      	ldrh	r2, [r2, #10]
 8003a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a6e:	fb01 f202 	mul.w	r2, r1, r2
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	061a      	lsls	r2, r3, #24
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	3201      	adds	r2, #1
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	0212      	lsls	r2, r2, #8
 8003a94:	4313      	orrs	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0c1a      	lsrs	r2, r3, #16
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0e1a      	lsrs	r2, r3, #24
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3303      	adds	r3, #3
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	2201      	movs	r2, #1
 8003ade:	711a      	strb	r2, [r3, #4]
			break;
 8003ae0:	e009      	b.n	8003af6 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e006      	b.n	8003af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003ae8:	bf00      	nop
 8003aea:	e004      	b.n	8003af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003aec:	bf00      	nop
 8003aee:	e002      	b.n	8003af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003af4:	bf00      	nop
		}
	}

	return res;
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d906      	bls.n	8003b1e <remove_chain+0x1e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <remove_chain+0x24>
		res = FR_INT_ERR;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	e049      	b.n	8003bb8 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003b28:	e03b      	b.n	8003ba2 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003b2a:	6839      	ldr	r1, [r7, #0]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fd98 	bl	8003662 <get_fat>
 8003b32:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03b      	beq.n	8003bb2 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <remove_chain+0x46>
 8003b40:	2302      	movs	r3, #2
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	e038      	b.n	8003bb8 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d102      	bne.n	8003b54 <remove_chain+0x54>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e031      	b.n	8003bb8 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003b54:	2200      	movs	r2, #0
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fe7e 	bl	800385a <put_fat>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d126      	bne.n	8003bb6 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d013      	beq.n	8003b9e <remove_chain+0x9e>
				fs->free_clust++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b86:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8e:	795b      	ldrb	r3, [r3, #5]
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b9c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d3bc      	bcc.n	8003b2a <remove_chain+0x2a>
 8003bb0:	e002      	b.n	8003bb8 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8003bb6:	bf00      	nop
		}
	}

	return res;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <create_chain+0x2e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d31d      	bcc.n	8003c2c <create_chain+0x6a>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e01a      	b.n	8003c2c <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fd32 	bl	8003662 <get_fat>
 8003bfe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d801      	bhi.n	8003c0a <create_chain+0x48>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d101      	bne.n	8003c16 <create_chain+0x54>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	e079      	b.n	8003d0a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d201      	bcs.n	8003c28 <create_chain+0x66>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	e070      	b.n	8003d0a <create_chain+0x148>
		scl = clst;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	3301      	adds	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d307      	bcc.n	8003c54 <create_chain+0x92>
			ncl = 2;
 8003c44:	2302      	movs	r3, #2
 8003c46:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d901      	bls.n	8003c54 <create_chain+0x92>
 8003c50:	2300      	movs	r3, #0
 8003c52:	e05a      	b.n	8003d0a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fd03 	bl	8003662 <get_fat>
 8003c5c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d002      	beq.n	8003c72 <create_chain+0xb0>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <create_chain+0xb4>
			return cs;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	e049      	b.n	8003d0a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d1d8      	bne.n	8003c30 <create_chain+0x6e>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e043      	b.n	8003d0a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8003c82:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003c84:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff fde5 	bl	800385a <put_fat>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <create_chain+0xec>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6839      	ldr	r1, [r7, #0]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fdd8 	bl	800385a <put_fat>
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d121      	bne.n	8003cf8 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	461a      	mov	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d01c      	beq.n	8003d08 <create_chain+0x146>
			fs->free_clust--;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cde:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce6:	795b      	ldrb	r3, [r3, #5]
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf4:	715a      	strb	r2, [r3, #5]
 8003cf6:	e007      	b.n	8003d08 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <create_chain+0x142>
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	e000      	b.n	8003d06 <create_chain+0x144>
 8003d04:	2301      	movs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003d08:	697b      	ldr	r3, [r7, #20]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	3304      	adds	r3, #4
 8003d26:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d34:	895b      	ldrh	r3, [r3, #10]
 8003d36:	461a      	mov	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d4a:	7892      	ldrb	r2, [r2, #2]
 8003d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	613a      	str	r2, [r7, #16]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <clmt_clust+0x54>
 8003d62:	2300      	movs	r3, #0
 8003d64:	e010      	b.n	8003d88 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d307      	bcc.n	8003d7e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d7c:	e7e9      	b.n	8003d52 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8003d7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d009      	beq.n	8003dcc <dir_sdi+0x3a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d301      	bcc.n	8003dd0 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0aa      	b.n	8003f26 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d110      	bne.n	8003df8 <dir_sdi+0x66>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d107      	bne.n	8003df8 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0a:	891b      	ldrh	r3, [r3, #8]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d301      	bcc.n	8003e18 <dir_sdi+0x86>
			return FR_INT_ERR;
 8003e14:	2302      	movs	r3, #2
 8003e16:	e086      	b.n	8003f26 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	e043      	b.n	8003eb2 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e36:	895b      	ldrh	r3, [r3, #10]
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	789b      	ldrb	r3, [r3, #2]
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003e52:	e021      	b.n	8003e98 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fbff 	bl	8003662 <get_fat>
 8003e64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d101      	bne.n	8003e72 <dir_sdi+0xe0>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e059      	b.n	8003f26 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d909      	bls.n	8003e8c <dir_sdi+0xfa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d301      	bcc.n	8003e90 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e04a      	b.n	8003f26 <dir_sdi+0x194>
			idx -= ic;
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d2d9      	bcs.n	8003e54 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fbb5 	bl	800361a <clust2sect>
 8003eb0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	461a      	mov	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <dir_sdi+0x136>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e02e      	b.n	8003f26 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed4:	895b      	ldrh	r3, [r3, #10]
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eec:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f04:	895b      	ldrh	r3, [r3, #10]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f12:	fb01 f202 	mul.w	r2, r1, r2
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	015b      	lsls	r3, r3, #5
 8003f1a:	4403      	add	r3, r0
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f22:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003f2e:	b590      	push	{r4, r7, lr}
 8003f30:	b087      	sub	sp, #28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3e:	88db      	ldrh	r3, [r3, #6]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <dir_next+0x2a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <dir_next+0x2e>
		return FR_NO_FILE;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e12e      	b.n	80041ba <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f68:	895b      	ldrh	r3, [r3, #10]
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f76:	fb01 f202 	mul.w	r2, r1, r2
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 80fa 	bne.w	8004176 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f92:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10d      	bne.n	8003fbc <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fac:	891b      	ldrh	r3, [r3, #8]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	f0c0 80df 	bcc.w	8004176 <dir_next+0x248>
				return FR_NO_FILE;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	e0fe      	b.n	80041ba <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc8:	895b      	ldrh	r3, [r3, #10]
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fe2:	7892      	ldrb	r2, [r2, #2]
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 80c4 	bne.w	8004176 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7ff fb2e 	bl	8003662 <get_fat>
 8004006:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d801      	bhi.n	8004012 <dir_next+0xe4>
 800400e:	2302      	movs	r3, #2
 8004010:	e0d3      	b.n	80041ba <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d101      	bne.n	800401e <dir_next+0xf0>
 800401a:	2301      	movs	r3, #1
 800401c:	e0cd      	b.n	80041ba <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	429a      	cmp	r2, r3
 8004030:	f0c0 808e 	bcc.w	8004150 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <dir_next+0x110>
 800403a:	2304      	movs	r3, #4
 800403c:	e0bd      	b.n	80041ba <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fdb6 	bl	8003bc2 <create_chain>
 8004056:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <dir_next+0x134>
 800405e:	2307      	movs	r3, #7
 8004060:	e0ab      	b.n	80041ba <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <dir_next+0x13e>
 8004068:	2302      	movs	r3, #2
 800406a:	e0a6      	b.n	80041ba <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d101      	bne.n	8004078 <dir_next+0x14a>
 8004074:	2301      	movs	r3, #1
 8004076:	e0a0      	b.n	80041ba <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f987 	bl	8003394 <sync_window>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <dir_next+0x162>
 800408c:	2301      	movs	r3, #1
 800408e:	e094      	b.n	80041ba <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a6:	895b      	ldrh	r3, [r3, #10]
 80040a8:	461a      	mov	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f7fe ff5a 	bl	8002f64 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040be:	681c      	ldr	r4, [r3, #0]
 80040c0:	6979      	ldr	r1, [r7, #20]
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7ff faa9 	bl	800361a <clust2sect>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e021      	b.n	800411a <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	2201      	movs	r2, #1
 80040e4:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f950 	bl	8003394 <sync_window>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <dir_next+0x1d0>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e05d      	b.n	80041ba <dir_next+0x28c>
						dp->fs->winsect++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800410a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800410c:	3201      	adds	r2, #1
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3301      	adds	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	789b      	ldrb	r3, [r3, #2]
 8004128:	461a      	mov	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4293      	cmp	r3, r2
 800412e:	d3d2      	bcc.n	80040d6 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1acb      	subs	r3, r1, r3
 800414a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	461a      	mov	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fa57 	bl	800361a <clust2sect>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004174:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	895b      	ldrh	r3, [r3, #10]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80041a6:	fb01 f202 	mul.w	r2, r1, r2
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	015b      	lsls	r3, r3, #5
 80041ae:	4403      	add	r3, r0
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}

080041c2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80041cc:	2100      	movs	r1, #0
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fddf 	bl	8003d92 <dir_sdi>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d135      	bne.n	800424a <dir_alloc+0x88>
		n = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7ff f91f 	bl	8003438 <move_window>
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d121      	bne.n	8004248 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2be5      	cmp	r3, #229	; 0xe5
 8004210:	d006      	beq.n	8004220 <dir_alloc+0x5e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	3301      	adds	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d102      	bne.n	8004234 <dir_alloc+0x72>
 800422e:	e00c      	b.n	800424a <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004234:	2101      	movs	r1, #1
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fe79 	bl	8003f2e <dir_next>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0cd      	beq.n	80041e2 <dir_alloc+0x20>
 8004246:	e000      	b.n	800424a <dir_alloc+0x88>
			if (res != FR_OK) break;
 8004248:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d101      	bne.n	8004254 <dir_alloc+0x92>
 8004250:	2307      	movs	r3, #7
 8004252:	73fb      	strb	r3, [r7, #15]
	return res;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	331b      	adds	r3, #27
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	b21a      	sxth	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	331a      	adds	r3, #26
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b21b      	sxth	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b21b      	sxth	r3, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b03      	cmp	r3, #3
 800428c:	d10f      	bne.n	80042ae <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	3315      	adds	r3, #21
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	b21a      	sxth	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b21b      	sxth	r3, r3
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

	return cl;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	331a      	adds	r3, #26
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	331b      	adds	r3, #27
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	0c1a      	lsrs	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3314      	adds	r3, #20
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3315      	adds	r3, #21
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
	...

08004308 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	2301      	movs	r3, #1
 800432e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <cmp_lfn+0xd8>)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	4413      	add	r3, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	b21a      	sxth	r2, r3
 8004344:	4926      	ldr	r1, [pc, #152]	; (80043e0 <cmp_lfn+0xd8>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	440b      	add	r3, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	440b      	add	r3, r1
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b21b      	sxth	r3, r3
 8004356:	4313      	orrs	r3, r2
 8004358:	b21b      	sxth	r3, r3
 800435a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d019      	beq.n	8004396 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004362:	89bb      	ldrh	r3, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f002 fb21 	bl	80069ac <ff_wtoupper>
 800436a:	4603      	mov	r3, r0
 800436c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2bfe      	cmp	r3, #254	; 0xfe
 8004372:	d80e      	bhi.n	8004392 <cmp_lfn+0x8a>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	617a      	str	r2, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f002 fb12 	bl	80069ac <ff_wtoupper>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	4293      	cmp	r3, r2
 8004390:	d008      	beq.n	80043a4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004392:	2300      	movs	r3, #0
 8004394:	e01f      	b.n	80043d6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004396:	89bb      	ldrh	r3, [r7, #12]
 8004398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439c:	4293      	cmp	r3, r2
 800439e:	d001      	beq.n	80043a4 <cmp_lfn+0x9c>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e018      	b.n	80043d6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3301      	adds	r3, #1
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d9bf      	bls.n	8004330 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <cmp_lfn+0xcc>
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <cmp_lfn+0xcc>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <cmp_lfn+0xcc>
		return 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	08006c60 	.word	0x08006c60

080043e4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4611      	mov	r1, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	460b      	mov	r3, r1
 80043f4:	71fb      	strb	r3, [r7, #7]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	330d      	adds	r3, #13
 80043fe:	79ba      	ldrb	r2, [r7, #6]
 8004400:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	330b      	adds	r3, #11
 8004406:	220f      	movs	r2, #15
 8004408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	330c      	adds	r3, #12
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	331a      	adds	r3, #26
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	331b      	adds	r3, #27
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	82fb      	strh	r3, [r7, #22]
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800443a:	8afb      	ldrh	r3, [r7, #22]
 800443c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <fit_lfn+0x70>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	61fa      	str	r2, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <fit_lfn+0xe4>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	8afa      	ldrh	r2, [r7, #22]
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	8afb      	ldrh	r3, [r7, #22]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	b299      	uxth	r1, r3
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <fit_lfn+0xe4>)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4413      	add	r3, r2
 800447c:	b2ca      	uxtb	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <fit_lfn+0xa8>
 8004486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	3301      	adds	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d9d0      	bls.n	800443a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004498:	8afb      	ldrh	r3, [r7, #22]
 800449a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800449e:	4293      	cmp	r3, r2
 80044a0:	d006      	beq.n	80044b0 <fit_lfn+0xcc>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <fit_lfn+0xd4>
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	79fa      	ldrb	r2, [r7, #7]
 80044bc:	701a      	strb	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	08006c60 	.word	0x08006c60

080044cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80044da:	220b      	movs	r2, #11
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7fe fd22 	bl	8002f28 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d92b      	bls.n	8004542 <gen_numname+0x76>
		sr = seq;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80044ee:	e022      	b.n	8004536 <gen_numname+0x6a>
			wc = *lfn++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	e017      	b.n	8004530 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005a      	lsls	r2, r3, #1
 8004504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800450e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <gen_numname+0x5e>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004524:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004528:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	3301      	adds	r3, #1
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b0f      	cmp	r3, #15
 8004534:	d9e4      	bls.n	8004500 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1d8      	bne.n	80044f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004542:	2307      	movs	r3, #7
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3330      	adds	r3, #48	; 0x30
 8004552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800455a:	2b39      	cmp	r3, #57	; 0x39
 800455c:	d904      	bls.n	8004568 <gen_numname+0x9c>
 800455e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004562:	3307      	adds	r3, #7
 8004564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	62ba      	str	r2, [r7, #40]	; 0x28
 800456e:	3330      	adds	r3, #48	; 0x30
 8004570:	443b      	add	r3, r7
 8004572:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004576:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1df      	bne.n	8004546 <gen_numname+0x7a>
	ns[i] = '~';
 8004586:	f107 0214 	add.w	r2, r7, #20
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	4413      	add	r3, r2
 800458e:	227e      	movs	r2, #126	; 0x7e
 8004590:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	e002      	b.n	800459e <gen_numname+0xd2>
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d205      	bcs.n	80045b2 <gen_numname+0xe6>
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	4413      	add	r3, r2
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d1f2      	bne.n	8004598 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	2b07      	cmp	r3, #7
 80045b6:	d807      	bhi.n	80045c8 <gen_numname+0xfc>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	62ba      	str	r2, [r7, #40]	; 0x28
 80045be:	3330      	adds	r3, #48	; 0x30
 80045c0:	443b      	add	r3, r7
 80045c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80045c6:	e000      	b.n	80045ca <gen_numname+0xfe>
 80045c8:	2120      	movs	r1, #32
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	627a      	str	r2, [r7, #36]	; 0x24
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	460a      	mov	r2, r1
 80045d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	2b07      	cmp	r3, #7
 80045dc:	d9e9      	bls.n	80045b2 <gen_numname+0xe6>
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	3730      	adds	r7, #48	; 0x30
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80045f4:	230b      	movs	r3, #11
 80045f6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	4313      	orrs	r3, r2
 8004602:	b2da      	uxtb	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6079      	str	r1, [r7, #4]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	4413      	add	r3, r2
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	3b01      	subs	r3, #1
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ed      	bne.n	80045f8 <sum_sfn+0x10>
	return sum;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004630:	2100      	movs	r1, #0
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fbad 	bl	8003d92 <dir_sdi>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <dir_find+0x1e>
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	e0b8      	b.n	80047b8 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004646:	23ff      	movs	r3, #255	; 0xff
 8004648:	753b      	strb	r3, [r7, #20]
 800464a:	7d3b      	ldrb	r3, [r7, #20]
 800464c:	757b      	strb	r3, [r7, #21]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7fe fee3 	bl	8003438 <move_window>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8097 	bne.w	80047ac <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800468e:	7dbb      	ldrb	r3, [r7, #22]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <dir_find+0x72>
 8004694:	2304      	movs	r3, #4
 8004696:	75fb      	strb	r3, [r7, #23]
 8004698:	e08d      	b.n	80047b6 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	330b      	adds	r3, #11
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80046a6:	7dbb      	ldrb	r3, [r7, #22]
 80046a8:	2be5      	cmp	r3, #229	; 0xe5
 80046aa:	d007      	beq.n	80046bc <dir_find+0x94>
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <dir_find+0xa6>
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b0f      	cmp	r3, #15
 80046ba:	d008      	beq.n	80046ce <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80046bc:	23ff      	movs	r3, #255	; 0xff
 80046be:	757b      	strb	r3, [r7, #21]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ca:	849a      	strh	r2, [r3, #36]	; 0x24
 80046cc:	e063      	b.n	8004796 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b0f      	cmp	r3, #15
 80046d2:	d137      	bne.n	8004744 <dir_find+0x11c>
				if (dp->lfn) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05a      	beq.n	8004796 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80046e0:	7dbb      	ldrb	r3, [r7, #22]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d010      	beq.n	800470c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	7b5b      	ldrb	r3, [r3, #13]
 80046ee:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80046f0:	7dbb      	ldrb	r3, [r7, #22]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	75bb      	strb	r3, [r7, #22]
 80046f8:	7dbb      	ldrb	r3, [r7, #22]
 80046fa:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	88da      	ldrh	r2, [r3, #6]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800470c:	7dba      	ldrb	r2, [r7, #22]
 800470e:	7d7b      	ldrb	r3, [r7, #21]
 8004710:	429a      	cmp	r2, r3
 8004712:	d114      	bne.n	800473e <dir_find+0x116>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	330d      	adds	r3, #13
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	7d3a      	ldrb	r2, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	d10e      	bne.n	800473e <dir_find+0x116>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	6939      	ldr	r1, [r7, #16]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fdec 	bl	8004308 <cmp_lfn>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <dir_find+0x116>
 8004736:	7d7b      	ldrb	r3, [r7, #21]
 8004738:	3b01      	subs	r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e000      	b.n	8004740 <dir_find+0x118>
 800473e:	23ff      	movs	r3, #255	; 0xff
 8004740:	757b      	strb	r3, [r7, #21]
 8004742:	e028      	b.n	8004796 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004744:	7d7b      	ldrb	r3, [r7, #21]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <dir_find+0x132>
 800474a:	6938      	ldr	r0, [r7, #16]
 800474c:	f7ff ff4c 	bl	80045e8 <sum_sfn>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	7d3b      	ldrb	r3, [r7, #20]
 8004756:	4293      	cmp	r3, r2
 8004758:	d02a      	beq.n	80047b0 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	330b      	adds	r3, #11
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <dir_find+0x15e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	220b      	movs	r2, #11
 8004778:	4619      	mov	r1, r3
 800477a:	6938      	ldr	r0, [r7, #16]
 800477c:	f7fe fc0c 	bl	8002f98 <mem_cmp>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004786:	23ff      	movs	r3, #255	; 0xff
 8004788:	757b      	strb	r3, [r7, #21]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004794:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004796:	2100      	movs	r1, #0
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fbc8 	bl	8003f2e <dir_next>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f43f af58 	beq.w	800465a <dir_find+0x32>
 80047aa:	e004      	b.n	80047b6 <dir_find+0x18e>
		if (res != FR_OK) break;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80047b4:	bf00      	nop

	return res;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	; 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	220c      	movs	r2, #12
 80047e2:	6a39      	ldr	r1, [r7, #32]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fb9f 	bl	8002f28 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03b      	beq.n	800486c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	330b      	adds	r3, #11
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004808:	2301      	movs	r3, #1
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
 800480c:	e013      	b.n	8004836 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800480e:	f107 010c 	add.w	r1, r7, #12
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	6a38      	ldr	r0, [r7, #32]
 8004818:	f7ff fe58 	bl	80044cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff03 	bl	8004628 <dir_find>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	3301      	adds	r3, #1
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	2b63      	cmp	r3, #99	; 0x63
 800483a:	d9e8      	bls.n	800480e <dir_register+0x4e>
 800483c:	e000      	b.n	8004840 <dir_register+0x80>
			if (res != FR_OK) break;
 800483e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d101      	bne.n	800484a <dir_register+0x8a>
 8004846:	2307      	movs	r3, #7
 8004848:	e0d8      	b.n	80049fc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800484a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800484e:	2b04      	cmp	r3, #4
 8004850:	d002      	beq.n	8004858 <dir_register+0x98>
 8004852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004856:	e0d1      	b.n	80049fc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	330b      	adds	r3, #11
 800485c:	7dfa      	ldrb	r2, [r7, #23]
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004866:	461a      	mov	r2, r3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	e002      	b.n	8004882 <dir_register+0xc2>
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	3301      	adds	r3, #1
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f5      	bne.n	800487c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	3319      	adds	r3, #25
 8004894:	4a5b      	ldr	r2, [pc, #364]	; (8004a04 <dir_register+0x244>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e001      	b.n	80048a4 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80048a0:	2301      	movs	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80048a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fc8b 	bl	80041c2 <dir_alloc>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80048b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d15b      	bne.n	8004972 <dir_register+0x1b2>
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3b01      	subs	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d055      	beq.n	8004972 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	88db      	ldrh	r3, [r3, #6]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fa5b 	bl	8003d92 <dir_sdi>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80048e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d143      	bne.n	8004972 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fe78 	bl	80045e8 <sum_sfn>
 80048f8:	4603      	mov	r3, r0
 80048fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7fe fd92 	bl	8003438 <move_window>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800491a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d126      	bne.n	8004970 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	6a18      	ldr	r0, [r3, #32]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	b2da      	uxtb	r2, r3
 8004936:	7efb      	ldrb	r3, [r7, #27]
 8004938:	f7ff fd54 	bl	80043e4 <fit_lfn>
				dp->fs->wflag = 1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004948:	2201      	movs	r2, #1
 800494a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800494c:	2100      	movs	r1, #0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff faed 	bl	8003f2e <dir_next>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800495a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <dir_register+0x1b2>
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	3b01      	subs	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1c6      	bne.n	80048fc <dir_register+0x13c>
 800496e:	e000      	b.n	8004972 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004970:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004976:	2b00      	cmp	r3, #0
 8004978:	d13e      	bne.n	80049f8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe fd53 	bl	8003438 <move_window>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800499c:	2b00      	cmp	r3, #0
 800499e:	d12b      	bne.n	80049f8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2220      	movs	r2, #32
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fad9 	bl	8002f64 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	6958      	ldr	r0, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	220b      	movs	r2, #11
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fe faaf 	bl	8002f28 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	330b      	adds	r3, #11
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	330c      	adds	r3, #12
 80049e0:	f002 0218 	and.w	r2, r2, #24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	2201      	movs	r2, #1
 80049f6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80049f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3730      	adds	r7, #48	; 0x30
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	4ec4ec4f 	.word	0x4ec4ec4f

08004a08 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e002      	b.n	8004a20 <create_name+0x18>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b2f      	cmp	r3, #47	; 0x2f
 8004a26:	d0f8      	beq.n	8004a1a <create_name+0x12>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a2e:	d0f4      	beq.n	8004a1a <create_name+0x12>
	lfn = dp->lfn;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	61ba      	str	r2, [r7, #24]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a52:	2b1f      	cmp	r3, #31
 8004a54:	d92f      	bls.n	8004ab6 <create_name+0xae>
 8004a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a58:	2b2f      	cmp	r3, #47	; 0x2f
 8004a5a:	d02c      	beq.n	8004ab6 <create_name+0xae>
 8004a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a5e:	2b5c      	cmp	r3, #92	; 0x5c
 8004a60:	d029      	beq.n	8004ab6 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2bfe      	cmp	r3, #254	; 0xfe
 8004a66:	d901      	bls.n	8004a6c <create_name+0x64>
			return FR_INVALID_NAME;
 8004a68:	2306      	movs	r3, #6
 8004a6a:	e186      	b.n	8004d7a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 ff5e 	bl	8006938 <ff_convert>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <create_name+0x82>
 8004a86:	2306      	movs	r3, #6
 8004a88:	e177      	b.n	8004d7a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8e:	d809      	bhi.n	8004aa4 <create_name+0x9c>
 8004a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a92:	4619      	mov	r1, r3
 8004a94:	488e      	ldr	r0, [pc, #568]	; (8004cd0 <create_name+0x2c8>)
 8004a96:	f7fe faa5 	bl	8002fe4 <chk_chr>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004aa0:	2306      	movs	r3, #6
 8004aa2:	e16a      	b.n	8004d7a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	617a      	str	r2, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ab2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004ab4:	e7c5      	b.n	8004a42 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	441a      	add	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ac2:	2b1f      	cmp	r3, #31
 8004ac4:	d801      	bhi.n	8004aca <create_name+0xc2>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	e000      	b.n	8004acc <create_name+0xc4>
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004ad0:	e011      	b.n	8004af6 <create_name+0xee>
		w = lfn[di - 1];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d002      	beq.n	8004af0 <create_name+0xe8>
 8004aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aec:	2b2e      	cmp	r3, #46	; 0x2e
 8004aee:	d106      	bne.n	8004afe <create_name+0xf6>
		di--;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ea      	bne.n	8004ad2 <create_name+0xca>
 8004afc:	e000      	b.n	8004b00 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004afe:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <create_name+0x102>
 8004b06:	2306      	movs	r3, #6
 8004b08:	e137      	b.n	8004d7a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	220b      	movs	r2, #11
 8004b20:	2120      	movs	r1, #32
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fa1e 	bl	8002f64 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e002      	b.n	8004b34 <create_name+0x12c>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	3301      	adds	r3, #1
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d0f5      	beq.n	8004b2e <create_name+0x126>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4e:	d0ee      	beq.n	8004b2e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <create_name+0x162>
 8004b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b5a:	f043 0303 	orr.w	r3, r3, #3
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004b62:	e002      	b.n	8004b6a <create_name+0x162>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <create_name+0x17c>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b76:	3b01      	subs	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b2e      	cmp	r3, #46	; 0x2e
 8004b82:	d1ef      	bne.n	8004b64 <create_name+0x15c>

	b = i = 0; ni = 8;
 8004b84:	2300      	movs	r3, #0
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b8e:	2308      	movs	r3, #8
 8004b90:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	61ba      	str	r2, [r7, #24]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8091 	beq.w	8004ccc <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d006      	beq.n	8004bbe <create_name+0x1b6>
 8004bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d10a      	bne.n	8004bcc <create_name+0x1c4>
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d006      	beq.n	8004bcc <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8004bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc2:	f043 0303 	orr.w	r3, r3, #3
 8004bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bca:	e07e      	b.n	8004cca <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d203      	bcs.n	8004bdc <create_name+0x1d4>
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d123      	bne.n	8004c24 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b0b      	cmp	r3, #11
 8004be0:	d106      	bne.n	8004bf0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8004be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004be6:	f043 0303 	orr.w	r3, r3, #3
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bee:	e076      	b.n	8004cde <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d005      	beq.n	8004c04 <create_name+0x1fc>
 8004bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bfc:	f043 0303 	orr.w	r3, r3, #3
 8004c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d867      	bhi.n	8004cdc <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	2308      	movs	r3, #8
 8004c12:	623b      	str	r3, [r7, #32]
 8004c14:	230b      	movs	r3, #11
 8004c16:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c22:	e052      	b.n	8004cca <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c26:	2b7f      	cmp	r3, #127	; 0x7f
 8004c28:	d914      	bls.n	8004c54 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fe82 	bl	8006938 <ff_convert>
 8004c34:	4603      	mov	r3, r0
 8004c36:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <create_name+0x240>
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c40:	3b80      	subs	r3, #128	; 0x80
 8004c42:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <create_name+0x2cc>)
 8004c44:	5cd3      	ldrb	r3, [r2, r3]
 8004c46:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c4c:	f043 0302 	orr.w	r3, r3, #2
 8004c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <create_name+0x262>
 8004c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	481e      	ldr	r0, [pc, #120]	; (8004cd8 <create_name+0x2d0>)
 8004c60:	f7fe f9c0 	bl	8002fe4 <chk_chr>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004c6a:	235f      	movs	r3, #95	; 0x5f
 8004c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c72:	f043 0303 	orr.w	r3, r3, #3
 8004c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c7a:	e01b      	b.n	8004cb4 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d909      	bls.n	8004c96 <create_name+0x28e>
 8004c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c84:	2b5a      	cmp	r3, #90	; 0x5a
 8004c86:	d806      	bhi.n	8004c96 <create_name+0x28e>
					b |= 2;
 8004c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c94:	e00e      	b.n	8004cb4 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c98:	2b60      	cmp	r3, #96	; 0x60
 8004c9a:	d90b      	bls.n	8004cb4 <create_name+0x2ac>
 8004c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9e:	2b7a      	cmp	r3, #122	; 0x7a
 8004ca0:	d808      	bhi.n	8004cb4 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8004ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb0:	3b20      	subs	r3, #32
 8004cb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	6239      	str	r1, [r7, #32]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004cca:	e762      	b.n	8004b92 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8004ccc:	bf00      	nop
 8004cce:	e006      	b.n	8004cde <create_name+0x2d6>
 8004cd0:	08006b80 	.word	0x08006b80
 8004cd4:	08006be0 	.word	0x08006be0
 8004cd8:	08006b8c 	.word	0x08006b8c
			if (si > di) break;			/* No extension */
 8004cdc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2be5      	cmp	r3, #229	; 0xe5
 8004cea:	d105      	bne.n	8004cf8 <create_name+0x2f0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d104      	bne.n	8004d08 <create_name+0x300>
 8004cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004d08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	d005      	beq.n	8004d20 <create_name+0x318>
 8004d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d105      	bne.n	8004d2c <create_name+0x324>
		cf |= NS_LFN;
 8004d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d117      	bne.n	8004d68 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004d38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <create_name+0x348>
 8004d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d105      	bne.n	8004d68 <create_name+0x360>
 8004d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d60:	f043 0308 	orr.w	r3, r3, #8
 8004d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	330b      	adds	r3, #11
 8004d72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004d78:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3728      	adds	r7, #40	; 0x28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b2f      	cmp	r3, #47	; 0x2f
 8004d94:	d003      	beq.n	8004d9e <follow_path+0x1a>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b5c      	cmp	r3, #92	; 0x5c
 8004d9c:	d102      	bne.n	8004da4 <follow_path+0x20>
		path++;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004daa:	461a      	mov	r2, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b1f      	cmp	r3, #31
 8004db6:	d80c      	bhi.n	8004dd2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004db8:	2100      	movs	r1, #0
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fe ffe9 	bl	8003d92 <dir_sdi>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6153      	str	r3, [r2, #20]
 8004dd0:	e049      	b.n	8004e66 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff fe16 	bl	8004a08 <create_name>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d13a      	bne.n	8004e5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fc1e 	bl	8004628 <dir_find>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	7adb      	ldrb	r3, [r3, #11]
 8004dfa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d12b      	bne.n	8004e60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d126      	bne.n	8004e60 <follow_path+0xdc>
 8004e12:	2305      	movs	r3, #5
 8004e14:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004e16:	e023      	b.n	8004e60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d120      	bne.n	8004e64 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	330b      	adds	r3, #11
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8004e3a:	2305      	movs	r3, #5
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	e012      	b.n	8004e66 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fa07 	bl	800425e <ld_clust>
 8004e50:	4602      	mov	r2, r0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004e5a:	e7ba      	b.n	8004dd2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8004e5c:	bf00      	nop
 8004e5e:	e002      	b.n	8004e66 <follow_path+0xe2>
				break;
 8004e60:	bf00      	nop
 8004e62:	e000      	b.n	8004e66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004e64:	bf00      	nop
		}
	}

	return res;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004e78:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d031      	beq.n	8004eea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e002      	b.n	8004e94 <get_ldnumber+0x24>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b1f      	cmp	r3, #31
 8004e9a:	d903      	bls.n	8004ea4 <get_ldnumber+0x34>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b3a      	cmp	r3, #58	; 0x3a
 8004ea2:	d1f4      	bne.n	8004e8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b3a      	cmp	r3, #58	; 0x3a
 8004eaa:	d11c      	bne.n	8004ee6 <get_ldnumber+0x76>
			tp = *path;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	60fa      	str	r2, [r7, #12]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	3b30      	subs	r3, #48	; 0x30
 8004ebc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b09      	cmp	r3, #9
 8004ec2:	d80e      	bhi.n	8004ee2 <get_ldnumber+0x72>
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10a      	bne.n	8004ee2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <get_ldnumber+0x72>
					vol = (int)i;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	e002      	b.n	8004eec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004eea:	693b      	ldr	r3, [r7, #16]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
	...

08004ef8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	2200      	movs	r2, #0
 8004f0a:	711a      	strb	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f12:	461a      	mov	r2, r3
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295
 8004f18:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fe fa8b 	bl	8003438 <move_window>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <check_fs+0x34>
		return 3;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e04a      	b.n	8004fc2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f32:	3301      	adds	r3, #1
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	b21a      	sxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b21b      	sxth	r3, r3
 8004f46:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <check_fs+0xd4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d001      	beq.n	8004f50 <check_fs+0x58>
		return 2;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e038      	b.n	8004fc2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3336      	adds	r3, #54	; 0x36
 8004f54:	3303      	adds	r3, #3
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	061a      	lsls	r2, r3, #24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3336      	adds	r3, #54	; 0x36
 8004f5e:	3302      	adds	r3, #2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	4313      	orrs	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	3236      	adds	r2, #54	; 0x36
 8004f6a:	3201      	adds	r2, #1
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	0212      	lsls	r2, r2, #8
 8004f70:	4313      	orrs	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <check_fs+0xd8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <check_fs+0x90>
		return 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e01c      	b.n	8004fc2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3352      	adds	r3, #82	; 0x52
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	061a      	lsls	r2, r3, #24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3352      	adds	r3, #82	; 0x52
 8004f96:	3302      	adds	r3, #2
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	3252      	adds	r2, #82	; 0x52
 8004fa2:	3201      	adds	r2, #1
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	0212      	lsls	r2, r2, #8
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fb6:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <check_fs+0xd8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <check_fs+0xc8>
		return 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <check_fs+0xca>

	return 1;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	ffffaa55 	.word	0xffffaa55
 8004fd0:	00544146 	.word	0x00544146

08004fd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004fe8:	68b8      	ldr	r0, [r7, #8]
 8004fea:	f7ff ff41 	bl	8004e70 <get_ldnumber>
 8004fee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da01      	bge.n	8004ffa <find_volume+0x26>
 8004ff6:	230b      	movs	r3, #11
 8004ff8:	e311      	b.n	800561e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004ffa:	4a98      	ldr	r2, [pc, #608]	; (800525c <find_volume+0x288>)
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <find_volume+0x3a>
 800500a:	230c      	movs	r3, #12
 800500c:	e307      	b.n	800561e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005012:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01c      	beq.n	800505a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005026:	785b      	ldrb	r3, [r3, #1]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fd fedf 	bl	8002dec <disk_status>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10c      	bne.n	800505a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <find_volume+0x82>
 8005046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005052:	230a      	movs	r3, #10
 8005054:	e2e3      	b.n	800561e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8005056:	2300      	movs	r3, #0
 8005058:	e2e1      	b.n	800561e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	4618      	mov	r0, r3
 800507a:	f7fd fed1 	bl	8002e20 <disk_initialize>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005090:	2303      	movs	r3, #3
 8005092:	e2c4      	b.n	800561e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <find_volume+0xd6>
 800509a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80050a6:	230a      	movs	r3, #10
 80050a8:	e2b9      	b.n	800561e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b0:	7858      	ldrb	r0, [r3, #1]
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	330a      	adds	r3, #10
 80050ba:	461a      	mov	r2, r3
 80050bc:	2102      	movs	r1, #2
 80050be:	f7fd ff15 	bl	8002eec <disk_ioctl>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ce:	895b      	ldrh	r3, [r3, #10]
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d306      	bcc.n	80050e4 <find_volume+0x110>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050dc:	895b      	ldrh	r3, [r3, #10]
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	d901      	bls.n	80050e8 <find_volume+0x114>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e29a      	b.n	800561e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80050ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050f0:	f7ff ff02 	bl	8004ef8 <check_fs>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80050fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d153      	bne.n	80051aa <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005102:	2300      	movs	r3, #0
 8005104:	643b      	str	r3, [r7, #64]	; 0x40
 8005106:	e028      	b.n	800515a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005112:	4413      	add	r3, r2
 8005114:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	3304      	adds	r3, #4
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <find_volume+0x172>
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	330b      	adds	r3, #11
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	061a      	lsls	r2, r3, #24
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	330a      	adds	r3, #10
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	4313      	orrs	r3, r2
 8005132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005134:	3209      	adds	r2, #9
 8005136:	7812      	ldrb	r2, [r2, #0]
 8005138:	0212      	lsls	r2, r2, #8
 800513a:	4313      	orrs	r3, r2
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	3208      	adds	r2, #8
 8005140:	7812      	ldrb	r2, [r2, #0]
 8005142:	431a      	orrs	r2, r3
 8005144:	e000      	b.n	8005148 <find_volume+0x174>
 8005146:	2200      	movs	r2, #0
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3358      	adds	r3, #88	; 0x58
 800514e:	443b      	add	r3, r7
 8005150:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005156:	3301      	adds	r3, #1
 8005158:	643b      	str	r3, [r7, #64]	; 0x40
 800515a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515c:	2b03      	cmp	r3, #3
 800515e:	d9d3      	bls.n	8005108 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005160:	2300      	movs	r3, #0
 8005162:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <find_volume+0x19c>
 800516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516c:	3b01      	subs	r3, #1
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	3358      	adds	r3, #88	; 0x58
 8005176:	443b      	add	r3, r7
 8005178:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800517e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <find_volume+0x1bc>
 8005184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005188:	f7ff feb6 	bl	8004ef8 <check_fs>
 800518c:	4603      	mov	r3, r0
 800518e:	e000      	b.n	8005192 <find_volume+0x1be>
 8005190:	2302      	movs	r3, #2
 8005192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <find_volume+0x1d6>
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	3301      	adds	r3, #1
 80051a2:	643b      	str	r3, [r7, #64]	; 0x40
 80051a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d9e2      	bls.n	8005170 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d101      	bne.n	80051b6 <find_volume+0x1e2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e233      	b.n	800561e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80051b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <find_volume+0x1ee>
 80051be:	230d      	movs	r3, #13
 80051c0:	e22d      	b.n	800561e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	7b1b      	ldrb	r3, [r3, #12]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	b21a      	sxth	r2, r3
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	7adb      	ldrb	r3, [r3, #11]
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051da:	895b      	ldrh	r3, [r3, #10]
 80051dc:	b21b      	sxth	r3, r3
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80051e2:	230d      	movs	r3, #13
 80051e4:	e21b      	b.n	800561e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	7ddb      	ldrb	r3, [r3, #23]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	7d9b      	ldrb	r3, [r3, #22]
 80051f2:	b21b      	sxth	r3, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80051fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d112      	bne.n	8005228 <find_volume+0x254>
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005208:	061a      	lsls	r2, r3, #24
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	4313      	orrs	r3, r2
 8005214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005216:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800521a:	0212      	lsls	r2, r2, #8
 800521c:	4313      	orrs	r3, r2
 800521e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005220:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005224:	4313      	orrs	r3, r2
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	461a      	mov	r2, r3
 8005230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005232:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	7c1a      	ldrb	r2, [r3, #16]
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d009      	beq.n	8005260 <find_volume+0x28c>
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005252:	78db      	ldrb	r3, [r3, #3]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d003      	beq.n	8005260 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8005258:	230d      	movs	r3, #13
 800525a:	e1e0      	b.n	800561e <find_volume+0x64a>
 800525c:	20002594 	.word	0x20002594
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	461a      	mov	r2, r3
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	7b5a      	ldrb	r2, [r3, #13]
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005284:	789b      	ldrb	r3, [r3, #2]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <find_volume+0x2d0>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	789b      	ldrb	r3, [r3, #2]
 8005292:	461a      	mov	r2, r3
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529a:	789b      	ldrb	r3, [r3, #2]
 800529c:	3b01      	subs	r3, #1
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80052a4:	230d      	movs	r3, #13
 80052a6:	e1ba      	b.n	800561e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	7c9b      	ldrb	r3, [r3, #18]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	b21a      	sxth	r2, r3
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	7c5b      	ldrb	r3, [r3, #17]
 80052b4:	b21b      	sxth	r3, r3
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b21b      	sxth	r3, r3
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ca:	891b      	ldrh	r3, [r3, #8]
 80052cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052d2:	8952      	ldrh	r2, [r2, #10]
 80052d4:	0952      	lsrs	r2, r2, #5
 80052d6:	b292      	uxth	r2, r2
 80052d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052dc:	fb01 f202 	mul.w	r2, r1, r2
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80052e8:	230d      	movs	r3, #13
 80052ea:	e198      	b.n	800561e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	7d1b      	ldrb	r3, [r3, #20]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	b21a      	sxth	r2, r3
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	7cdb      	ldrb	r3, [r3, #19]
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005304:	2b00      	cmp	r3, #0
 8005306:	d112      	bne.n	800532e <find_volume+0x35a>
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800530e:	061a      	lsls	r2, r3, #24
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	4313      	orrs	r3, r2
 800531a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005320:	0212      	lsls	r2, r2, #8
 8005322:	4313      	orrs	r3, r2
 8005324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005326:	f892 2020 	ldrb.w	r2, [r2, #32]
 800532a:	4313      	orrs	r3, r2
 800532c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	7bdb      	ldrb	r3, [r3, #15]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	b21a      	sxth	r2, r3
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	7b9b      	ldrb	r3, [r3, #14]
 800533a:	b21b      	sxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b21b      	sxth	r3, r3
 8005340:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <find_volume+0x378>
 8005348:	230d      	movs	r3, #13
 800534a:	e168      	b.n	800561e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800534c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800534e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005350:	4413      	add	r3, r2
 8005352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005354:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005358:	8911      	ldrh	r1, [r2, #8]
 800535a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005360:	8952      	ldrh	r2, [r2, #10]
 8005362:	0952      	lsrs	r2, r2, #5
 8005364:	b292      	uxth	r2, r2
 8005366:	fbb1 f2f2 	udiv	r2, r1, r2
 800536a:	b292      	uxth	r2, r2
 800536c:	4413      	add	r3, r2
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	429a      	cmp	r2, r3
 8005376:	d201      	bcs.n	800537c <find_volume+0x3a8>
 8005378:	230d      	movs	r3, #13
 800537a:	e150      	b.n	800561e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800537c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005388:	7892      	ldrb	r2, [r2, #2]
 800538a:	fbb3 f3f2 	udiv	r3, r3, r2
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <find_volume+0x3c6>
 8005396:	230d      	movs	r3, #13
 8005398:	e141      	b.n	800561e <find_volume+0x64a>
	fmt = FS_FAT12;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d902      	bls.n	80053b0 <find_volume+0x3dc>
 80053aa:	2302      	movs	r3, #2
 80053ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d902      	bls.n	80053c0 <find_volume+0x3ec>
 80053ba:	2303      	movs	r3, #3
 80053bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	3302      	adds	r3, #2
 80053c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053ca:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d2:	461a      	mov	r2, r3
 80053d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80053d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	4413      	add	r3, r2
 80053de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053e4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80053e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	4413      	add	r3, r2
 80053ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053f2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80053f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d124      	bne.n	8005446 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	891b      	ldrh	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <find_volume+0x438>
 8005408:	230d      	movs	r3, #13
 800540a:	e108      	b.n	800561e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005412:	061a      	lsls	r2, r3, #24
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	4313      	orrs	r3, r2
 800541e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005420:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005424:	0212      	lsls	r2, r2, #8
 8005426:	4313      	orrs	r3, r2
 8005428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800542a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800542e:	4313      	orrs	r3, r2
 8005430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005436:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	647b      	str	r3, [r7, #68]	; 0x44
 8005444:	e02b      	b.n	800549e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	891b      	ldrh	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <find_volume+0x482>
 8005452:	230d      	movs	r3, #13
 8005454:	e0e3      	b.n	800561e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	4413      	add	r3, r2
 8005462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005468:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800546a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800546e:	2b02      	cmp	r3, #2
 8005470:	d105      	bne.n	800547e <find_volume+0x4aa>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	e00e      	b.n	800549c <find_volume+0x4c8>
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	085a      	lsrs	r2, r3, #1
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b2:	440b      	add	r3, r1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054b8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80054bc:	8949      	ldrh	r1, [r1, #10]
 80054be:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d201      	bcs.n	80054ca <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80054c6:	230d      	movs	r3, #13
 80054c8:	e0a9      	b.n	800561e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	6113      	str	r3, [r2, #16]
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054e6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80054f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d17a      	bne.n	80055f0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	b21a      	sxth	r2, r3
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800550a:	b21b      	sxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	b21b      	sxth	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d16d      	bne.n	80055f0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	3301      	adds	r3, #1
 8005518:	4619      	mov	r1, r3
 800551a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800551c:	f7fd ff8c 	bl	8003438 <move_window>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d164      	bne.n	80055f0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	2200      	movs	r2, #0
 800552e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	b21a      	sxth	r2, r3
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005540:	b21b      	sxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b21b      	sxth	r3, r3
 8005546:	4a38      	ldr	r2, [pc, #224]	; (8005628 <find_volume+0x654>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d151      	bne.n	80055f0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	061a      	lsls	r2, r3, #24
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	789b      	ldrb	r3, [r3, #2]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	4313      	orrs	r3, r2
 800555a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555c:	7852      	ldrb	r2, [r2, #1]
 800555e:	0212      	lsls	r2, r2, #8
 8005560:	4313      	orrs	r3, r2
 8005562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005564:	7812      	ldrb	r2, [r2, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	4a30      	ldr	r2, [pc, #192]	; (800562c <find_volume+0x658>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d140      	bne.n	80055f0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005574:	061a      	lsls	r2, r3, #24
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	4313      	orrs	r3, r2
 8005580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005582:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005586:	0212      	lsls	r2, r2, #8
 8005588:	4313      	orrs	r3, r2
 800558a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005590:	4313      	orrs	r3, r2
 8005592:	4a27      	ldr	r2, [pc, #156]	; (8005630 <find_volume+0x65c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d12b      	bne.n	80055f0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800559e:	061a      	lsls	r2, r3, #24
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	4313      	orrs	r3, r2
 80055aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80055b0:	0212      	lsls	r2, r2, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80055ba:	4313      	orrs	r3, r2
 80055bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055c2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80055ca:	061a      	lsls	r2, r3, #24
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	4313      	orrs	r3, r2
 80055d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80055dc:	0212      	lsls	r2, r2, #8
 80055de:	4313      	orrs	r3, r2
 80055e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80055e6:	4313      	orrs	r3, r2
 80055e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055ee:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	461a      	mov	r2, r3
 80055f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055fc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <find_volume+0x660>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <find_volume+0x660>)
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <find_volume+0x660>)
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005614:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005618:	f7fd fe92 	bl	8003340 <clear_lock>
#endif

	return FR_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3758      	adds	r7, #88	; 0x58
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	ffffaa55 	.word	0xffffaa55
 800562c:	41615252 	.word	0x41615252
 8005630:	61417272 	.word	0x61417272
 8005634:	20002598 	.word	0x20002598

08005638 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d02a      	beq.n	80056a0 <validate+0x68>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d024      	beq.n	80056a0 <validate+0x68>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <validate+0x68>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	88da      	ldrh	r2, [r3, #6]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567c:	889b      	ldrh	r3, [r3, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	d10e      	bne.n	80056a0 <validate+0x68>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd fbab 	bl	8002dec <disk_status>
 8005696:	4603      	mov	r3, r0
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80056a0:	2309      	movs	r3, #9
 80056a2:	e000      	b.n	80056a6 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80056c2:	f107 0310 	add.w	r3, r7, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fbd2 	bl	8004e70 <get_ldnumber>
 80056cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da01      	bge.n	80056d8 <f_mount+0x28>
 80056d4:	230b      	movs	r3, #11
 80056d6:	e02f      	b.n	8005738 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <f_mount+0x90>)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80056e8:	69b8      	ldr	r0, [r7, #24]
 80056ea:	f7fd fe29 	bl	8003340 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	490d      	ldr	r1, [pc, #52]	; (8005740 <f_mount+0x90>)
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <f_mount+0x6e>
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <f_mount+0x72>
 800571e:	2300      	movs	r3, #0
 8005720:	e00a      	b.n	8005738 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005722:	f107 0108 	add.w	r1, r7, #8
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	2200      	movs	r2, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fc51 	bl	8004fd4 <find_volume>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20002594 	.word	0x20002594

08005744 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005752:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800575a:	f843 1c50 	str.w	r1, [r3, #-80]
 800575e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005762:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800576a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <f_open+0x32>
 8005772:	2309      	movs	r3, #9
 8005774:	e2f7      	b.n	8005d66 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8005776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800577a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005782:	461a      	mov	r2, r3
 8005784:	2300      	movs	r3, #0
 8005786:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800578c:	461a      	mov	r2, r3
 800578e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005792:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800579e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057a2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	f107 0118 	add.w	r1, r7, #24
 80057b0:	3910      	subs	r1, #16
 80057b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057b6:	3b18      	subs	r3, #24
 80057b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fc09 	bl	8004fd4 <find_volume>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80057c8:	f102 0217 	add.w	r2, r2, #23
 80057cc:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80057ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80057d2:	f103 0317 	add.w	r3, r3, #23
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 82bf 	bne.w	8005d5c <f_open+0x618>
		INIT_BUF(dj);
 80057de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057e2:	461a      	mov	r2, r3
 80057e4:	f107 0318 	add.w	r3, r7, #24
 80057e8:	3b04      	subs	r3, #4
 80057ea:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80057ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057f2:	461a      	mov	r2, r3
 80057f4:	4bd4      	ldr	r3, [pc, #848]	; (8005b48 <f_open+0x404>)
 80057f6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80057fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057fe:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005806:	3b18      	subs	r3, #24
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff faba 	bl	8004d84 <follow_path>
 8005810:	4603      	mov	r3, r0
 8005812:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005816:	f102 0217 	add.w	r2, r2, #23
 800581a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800581c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005820:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005824:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005828:	f102 0210 	add.w	r2, r2, #16
 800582c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800582e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005832:	f103 0317 	add.w	r3, r3, #23
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d126      	bne.n	800588a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800583c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005840:	f103 0310 	add.w	r3, r3, #16
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <f_open+0x114>
				res = FR_INVALID_NAME;
 800584a:	2306      	movs	r3, #6
 800584c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005850:	f102 0217 	add.w	r2, r2, #23
 8005854:	7013      	strb	r3, [r2, #0]
 8005856:	e018      	b.n	800588a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005858:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800585c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005874:	3b18      	subs	r3, #24
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd fbcd 	bl	8003018 <chk_lock>
 800587e:	4603      	mov	r3, r0
 8005880:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005884:	f102 0217 	add.w	r2, r2, #23
 8005888:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800588a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800588e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005892:	f003 031c 	and.w	r3, r3, #28
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 813c 	beq.w	8005b14 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800589c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80058a0:	f103 0317 	add.w	r3, r3, #23
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02e      	beq.n	8005908 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80058aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80058ae:	f103 0317 	add.w	r3, r3, #23
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d112      	bne.n	80058de <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80058b8:	f7fd fc1e 	bl	80030f8 <enq_lock>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <f_open+0x18e>
 80058c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058c6:	3b18      	subs	r3, #24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe ff79 	bl	80047c0 <dir_register>
 80058ce:	4603      	mov	r3, r0
 80058d0:	e000      	b.n	80058d4 <f_open+0x190>
 80058d2:	2312      	movs	r3, #18
 80058d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80058d8:	f102 0217 	add.w	r2, r2, #23
 80058dc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80058de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058e2:	461a      	mov	r2, r3
 80058e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058e8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80058f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058f8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80058fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005900:	f102 0210 	add.w	r2, r2, #16
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01f      	b.n	8005948 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005908:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800590c:	f103 0310 	add.w	r3, r3, #16
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330b      	adds	r3, #11
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f003 0311 	and.w	r3, r3, #17
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <f_open+0x1e8>
					res = FR_DENIED;
 800591e:	2307      	movs	r3, #7
 8005920:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005924:	f102 0217 	add.w	r2, r2, #23
 8005928:	7013      	strb	r3, [r2, #0]
 800592a:	e00d      	b.n	8005948 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800592c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005930:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <f_open+0x204>
						res = FR_EXIST;
 800593c:	2308      	movs	r3, #8
 800593e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005942:	f102 0217 	add.w	r2, r2, #23
 8005946:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800594c:	f103 0317 	add.w	r3, r3, #23
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 8113 	bne.w	8005b7e <f_open+0x43a>
 8005958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800595c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 810a 	beq.w	8005b7e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800596a:	f7fd f9dd 	bl	8002d28 <get_fattime>
 800596e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005972:	f103 030c 	add.w	r3, r3, #12
 8005976:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005978:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800597c:	f103 0310 	add.w	r3, r3, #16
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330e      	adds	r3, #14
 8005984:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005988:	f102 020c 	add.w	r2, r2, #12
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005996:	f103 030c 	add.w	r3, r3, #12
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059a6:	f103 0310 	add.w	r3, r3, #16
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330f      	adds	r3, #15
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059b6:	f103 030c 	add.w	r3, r3, #12
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0c1a      	lsrs	r2, r3, #16
 80059be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059c2:	f103 0310 	add.w	r3, r3, #16
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3310      	adds	r3, #16
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059d2:	f103 030c 	add.w	r3, r3, #12
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	0e1a      	lsrs	r2, r3, #24
 80059da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059de:	f103 0310 	add.w	r3, r3, #16
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3311      	adds	r3, #17
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80059ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059ee:	f103 0310 	add.w	r3, r3, #16
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330b      	adds	r3, #11
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80059fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80059fe:	f103 0310 	add.w	r3, r3, #16
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	331c      	adds	r3, #28
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a0e:	f103 0310 	add.w	r3, r3, #16
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	331d      	adds	r3, #29
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a1e:	f103 0310 	add.w	r3, r3, #16
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	331e      	adds	r3, #30
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a2e:	f103 0310 	add.w	r3, r3, #16
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	331f      	adds	r3, #31
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a3e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005a42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005a46:	f102 0210 	add.w	r2, r2, #16
 8005a4a:	6811      	ldr	r1, [r2, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fc06 	bl	800425e <ld_clust>
 8005a52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a56:	f103 0308 	add.w	r3, r3, #8
 8005a5a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a62:	f103 0310 	add.w	r3, r3, #16
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	f7fe fc27 	bl	80042ba <st_clust>
				dj.fs->wflag = 1;
 8005a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a70:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	2201      	movs	r2, #1
 8005a7a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005a7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a80:	f103 0308 	add.w	r3, r3, #8
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d079      	beq.n	8005b7e <f_open+0x43a>
					dw = dj.fs->winsect;
 8005a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a8e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005a9c:	f102 020c 	add.w	r2, r2, #12
 8005aa0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aa6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005aaa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005aae:	f102 0208 	add.w	r2, r2, #8
 8005ab2:	6811      	ldr	r1, [r2, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe f823 	bl	8003b00 <remove_chain>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ac0:	f102 0217 	add.w	r2, r2, #23
 8005ac4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005aca:	f103 0317 	add.w	r3, r3, #23
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d154      	bne.n	8005b7e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ad8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8005adc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ae0:	f103 0308 	add.w	r3, r3, #8
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aec:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8005aee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005af2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005af6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005afa:	f102 020c 	add.w	r2, r2, #12
 8005afe:	6811      	ldr	r1, [r2, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd fc99 	bl	8003438 <move_window>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b0c:	f102 0217 	add.w	r2, r2, #23
 8005b10:	7013      	strb	r3, [r2, #0]
 8005b12:	e034      	b.n	8005b7e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005b14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b18:	f103 0317 	add.w	r3, r3, #23
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d12d      	bne.n	8005b7e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005b22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b26:	f103 0310 	add.w	r3, r3, #16
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330b      	adds	r3, #11
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <f_open+0x408>
					res = FR_NO_FILE;
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b3e:	f102 0217 	add.w	r2, r2, #23
 8005b42:	7013      	strb	r3, [r2, #0]
 8005b44:	e01b      	b.n	8005b7e <f_open+0x43a>
 8005b46:	bf00      	nop
 8005b48:	200025b4 	.word	0x200025b4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b50:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <f_open+0x43a>
 8005b5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b60:	f103 0310 	add.w	r3, r3, #16
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330b      	adds	r3, #11
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <f_open+0x43a>
						res = FR_DENIED;
 8005b72:	2307      	movs	r3, #7
 8005b74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b78:	f102 0217 	add.w	r2, r2, #23
 8005b7c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8005b7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b82:	f103 0317 	add.w	r3, r3, #23
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d157      	bne.n	8005c3c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b90:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <f_open+0x46e>
				mode |= FA__WRITTEN;
 8005b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005baa:	f043 0320 	orr.w	r3, r3, #32
 8005bae:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bb6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005bc4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005bc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bcc:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8005bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bd2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005be0:	f103 0310 	add.w	r3, r3, #16
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005be8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c04:	3b18      	subs	r3, #24
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fa99 	bl	8003140 <inc_lock>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8005c1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c22:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <f_open+0x4f8>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005c36:	f102 0217 	add.w	r2, r2, #23
 8005c3a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005c3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c40:	f103 0317 	add.w	r3, r3, #23
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 8088 	bne.w	8005d5c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8005c4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c50:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c5e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005c62:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8005c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c68:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c70:	2200      	movs	r2, #0
 8005c72:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005c74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c78:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005c7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005c80:	f102 0210 	add.w	r2, r2, #16
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fae9 	bl	800425e <ld_clust>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c92:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005c9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ca0:	f103 0310 	add.w	r3, r3, #16
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	331f      	adds	r3, #31
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	061a      	lsls	r2, r3, #24
 8005cac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cb0:	f103 0310 	add.w	r3, r3, #16
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	331e      	adds	r3, #30
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cc2:	f102 0210 	add.w	r2, r2, #16
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	321d      	adds	r2, #29
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	0212      	lsls	r2, r2, #8
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cd4:	f102 0210 	add.w	r2, r2, #16
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	321c      	adds	r2, #28
 8005cdc:	7812      	ldrb	r2, [r2, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ce4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cec:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8005cee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cf2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8005d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d04:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d16:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d28:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005d2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005d30:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005d34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d38:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8005d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	88da      	ldrh	r2, [r3, #6]
 8005d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d52:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005d5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d60:	f103 0317 	add.w	r3, r3, #23
 8005d64:	781b      	ldrb	r3, [r3, #0]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fc53 	bl	8005638 <validate>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <f_write+0x2c>
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	e21e      	b.n	80061de <f_write+0x46a>
	if (fp->err)							/* Check error */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	79db      	ldrb	r3, [r3, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	79db      	ldrb	r3, [r3, #7]
 8005db4:	e213      	b.n	80061de <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	799b      	ldrb	r3, [r3, #6]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005dc6:	2307      	movs	r3, #7
 8005dc8:	e209      	b.n	80061de <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	f080 81d9 	bcs.w	8006196 <f_write+0x422>
 8005de4:	2300      	movs	r3, #0
 8005de6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005de8:	e1d5      	b.n	8006196 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dfe:	8952      	ldrh	r2, [r2, #10]
 8005e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e04:	fb01 f202 	mul.w	r2, r1, r2
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 8169 	bne.w	80060e2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e24:	8952      	ldrh	r2, [r2, #10]
 8005e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	789b      	ldrb	r3, [r3, #2]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	4013      	ands	r3, r2
 8005e40:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005e42:	7dbb      	ldrb	r3, [r7, #22]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d15f      	bne.n	8005f08 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d111      	bne.n	8005e78 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d126      	bne.n	8005eb2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fd fea7 	bl	8003bc2 <create_chain>
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24
 8005e76:	e01c      	b.n	8005eb2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7fd ff3f 	bl	8003d12 <clmt_clust>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24
 8005e96:	e00c      	b.n	8005eb2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fd fe89 	bl	8003bc2 <create_chain>
 8005eb0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8173 	beq.w	80061a0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d106      	bne.n	8005ece <f_write+0x15a>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	71da      	strb	r2, [r3, #7]
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e187      	b.n	80061de <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d106      	bne.n	8005ee4 <f_write+0x170>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005edc:	2201      	movs	r2, #1
 8005ede:	71da      	strb	r2, [r3, #7]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e17c      	b.n	80061de <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	461a      	mov	r2, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <f_write+0x194>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	461a      	mov	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	799b      	ldrb	r3, [r3, #6]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d023      	beq.n	8005f60 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f24:	7858      	ldrb	r0, [r3, #1]
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	2301      	movs	r3, #1
 8005f32:	f7fc ffbb 	bl	8002eac <disk_write>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	2201      	movs	r2, #1
 8005f44:	71da      	strb	r2, [r3, #7]
 8005f46:	2301      	movs	r3, #1
 8005f48:	e149      	b.n	80061de <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	799b      	ldrb	r3, [r3, #6]
 8005f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fd fb51 	bl	800361a <clust2sect>
 8005f78:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <f_write+0x21a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f86:	2202      	movs	r2, #2
 8005f88:	71da      	strb	r2, [r3, #7]
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e127      	b.n	80061de <f_write+0x46a>
			sect += csect;
 8005f8e:	7dbb      	ldrb	r3, [r7, #22]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa2:	895b      	ldrh	r3, [r3, #10]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fac:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d069      	beq.n	8006088 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005fb4:	7dba      	ldrb	r2, [r7, #22]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fc6:	7892      	ldrb	r2, [r2, #2]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d90a      	bls.n	8005fe2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd8:	789b      	ldrb	r3, [r3, #2]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	7dbb      	ldrb	r3, [r7, #22]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	7858      	ldrb	r0, [r3, #1]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	f7fc ff59 	bl	8002eac <disk_write>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d006      	beq.n	800600e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006006:	2201      	movs	r2, #1
 8006008:	71da      	strb	r2, [r3, #7]
 800600a:	2301      	movs	r3, #1
 800600c:	e0e7      	b.n	80061de <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	429a      	cmp	r2, r3
 800601e:	d926      	bls.n	800606e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800603a:	8952      	ldrh	r2, [r2, #10]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	18d1      	adds	r1, r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006050:	895b      	ldrh	r3, [r3, #10]
 8006052:	461a      	mov	r2, r3
 8006054:	f7fc ff68 	bl	8002f28 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605e:	799b      	ldrb	r3, [r3, #6]
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	895b      	ldrh	r3, [r3, #10]
 800607c:	461a      	mov	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	623b      	str	r3, [r7, #32]
				continue;
 8006086:	e06e      	b.n	8006166 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d01f      	beq.n	80060d6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d215      	bcs.n	80060d6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	7858      	ldrb	r0, [r3, #1]
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	2301      	movs	r3, #1
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	f7fc fed5 	bl	8002e6c <disk_read>
 80060c2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ce:	2201      	movs	r2, #1
 80060d0:	71da      	strb	r2, [r3, #7]
 80060d2:	2301      	movs	r3, #1
 80060d4:	e083      	b.n	80061de <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	461a      	mov	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ee:	895b      	ldrh	r3, [r3, #10]
 80060f0:	4618      	mov	r0, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006106:	8952      	ldrh	r2, [r2, #10]
 8006108:	fbb3 f1f2 	udiv	r1, r3, r2
 800610c:	fb01 f202 	mul.w	r2, r1, r2
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	1ac3      	subs	r3, r0, r3
 8006114:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d901      	bls.n	8006122 <f_write+0x3ae>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006136:	8952      	ldrh	r2, [r2, #10]
 8006138:	fbb3 f1f2 	udiv	r1, r3, r2
 800613c:	fb01 f202 	mul.w	r2, r1, r2
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fc feec 	bl	8002f28 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006156:	799b      	ldrb	r3, [r3, #6]
 8006158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006164:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	4413      	add	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	4413      	add	r3, r2
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006180:	6093      	str	r3, [r2, #8]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	441a      	add	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f ae26 	bne.w	8005dea <f_write+0x76>
 800619e:	e000      	b.n	80061a2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80061a0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d907      	bls.n	80061c6 <f_write+0x452>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061c4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061cc:	799b      	ldrb	r3, [r3, #6]
 80061ce:	f043 0320 	orr.w	r3, r3, #32
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061da:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fa22 	bl	8005638 <validate>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 80bc 	bne.w	8006378 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	799b      	ldrb	r3, [r3, #6]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80b3 	beq.w	8006378 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006218:	799b      	ldrb	r3, [r3, #6]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01e      	beq.n	8006260 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622e:	7858      	ldrb	r0, [r3, #1]
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	2301      	movs	r3, #1
 800623c:	f7fc fe36 	bl	8002eac <disk_write>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006246:	2301      	movs	r3, #1
 8006248:	e097      	b.n	800637a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006250:	799b      	ldrb	r3, [r3, #6]
 8006252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006256:	b2da      	uxtb	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fd f8e0 	bl	8003438 <move_window>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d17a      	bne.n	8006378 <f_sync+0x192>
				dir = fp->dir_ptr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	330b      	adds	r3, #11
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	330b      	adds	r3, #11
 8006296:	f042 0220 	orr.w	r2, r2, #32
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	331c      	adds	r3, #28
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	331d      	adds	r3, #29
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	0c1a      	lsrs	r2, r3, #16
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	331e      	adds	r3, #30
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	0e1a      	lsrs	r2, r3, #24
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	331f      	adds	r3, #31
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	4619      	mov	r1, r3
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f7fd ffe1 	bl	80042ba <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80062f8:	f7fc fd16 	bl	8002d28 <get_fattime>
 80062fc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3316      	adds	r3, #22
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	b29b      	uxth	r3, r3
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	b29a      	uxth	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	3317      	adds	r3, #23
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	0c1a      	lsrs	r2, r3, #16
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3318      	adds	r3, #24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	0e1a      	lsrs	r2, r3, #24
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3319      	adds	r3, #25
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	3312      	adds	r3, #18
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3313      	adds	r3, #19
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	799b      	ldrb	r3, [r3, #6]
 8006348:	f023 0320 	bic.w	r3, r3, #32
 800634c:	b2da      	uxtb	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	2201      	movs	r2, #1
 8006364:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd f894 	bl	800349c <sync_fs>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006378:	7dfb      	ldrb	r3, [r7, #23]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff ff2b 	bl	80061e6 <f_sync>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d119      	bne.n	80063ce <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff f94c 	bl	8005638 <validate>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d111      	bne.n	80063ce <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fc ff80 	bl	80032b8 <dec_lock>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d105      	bne.n	80063ce <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c8:	461a      	mov	r2, r3
 80063ca:	2300      	movs	r3, #0
 80063cc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b0a      	cmp	r3, #10
 80063e8:	d103      	bne.n	80063f2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80063ea:	210d      	movs	r1, #13
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fff3 	bl	80063d8 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	db25      	blt.n	800644a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b3c      	cmp	r3, #60	; 0x3c
 8006410:	dd12      	ble.n	8006438 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 010c 	add.w	r1, r3, #12
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	f7ff fca7 	bl	8005d74 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d101      	bne.n	8006432 <putc_bfd+0x5a>
 800642e:	2300      	movs	r3, #0
 8006430:	e001      	b.n	8006436 <putc_bfd+0x5e>
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	e000      	b.n	800644c <putc_bfd+0x74>
	if (i < 0) return;
 800644a:	bf00      	nop
}
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8006454:	b40e      	push	{r1, r2, r3}
 8006456:	b590      	push	{r4, r7, lr}
 8006458:	b0a2      	sub	sp, #136	; 0x88
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60bb      	str	r3, [r7, #8]
	pb.nchr = pb.idx = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	613b      	str	r3, [r7, #16]

	va_start(arp, fmt);
 800646a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800646e:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 8006470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == 0) break;			/* End of string */
 8006480:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 81d7 	beq.w	8006838 <f_printf+0x3e4>
		if (c != '%') {				/* Non escape character */
 800648a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800648e:	2b25      	cmp	r3, #37	; 0x25
 8006490:	d008      	beq.n	80064a4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8006492:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff ff9b 	bl	80063d8 <putc_bfd>
			continue;
 80064a2:	e1c8      	b.n	8006836 <f_printf+0x3e2>
		}
		w = f = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80064aa:	2300      	movs	r3, #0
 80064ac:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 80064ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == '0') {				/* Flag: '0' padding */
 80064be:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80064c2:	2b30      	cmp	r3, #48	; 0x30
 80064c4:	d10b      	bne.n	80064de <f_printf+0x8a>
			f = 1; c = *fmt++;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80064cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80064dc:	e022      	b.n	8006524 <f_printf+0xd0>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80064de:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80064e2:	2b2d      	cmp	r3, #45	; 0x2d
 80064e4:	d11e      	bne.n	8006524 <f_printf+0xd0>
				f = 2; c = *fmt++;
 80064e6:	2302      	movs	r3, #2
 80064e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80064ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80064fc:	e012      	b.n	8006524 <f_printf+0xd0>
			w = w * 10 + c - '0';
 80064fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	461a      	mov	r2, r3
 800650a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800650e:	4413      	add	r3, r2
 8006510:	3b30      	subs	r3, #48	; 0x30
 8006512:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 8006514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		while (IsDigit(c)) {		/* Precision */
 8006524:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006528:	2b2f      	cmp	r3, #47	; 0x2f
 800652a:	d903      	bls.n	8006534 <f_printf+0xe0>
 800652c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006530:	2b39      	cmp	r3, #57	; 0x39
 8006532:	d9e4      	bls.n	80064fe <f_printf+0xaa>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8006534:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006538:	2b6c      	cmp	r3, #108	; 0x6c
 800653a:	d003      	beq.n	8006544 <f_printf+0xf0>
 800653c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006540:	2b4c      	cmp	r3, #76	; 0x4c
 8006542:	d10d      	bne.n	8006560 <f_printf+0x10c>
			f |= 4; c = *fmt++;
 8006544:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006548:	f043 0304 	orr.w	r3, r3, #4
 800654c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		}
		if (!c) break;
 8006560:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8169 	beq.w	800683c <f_printf+0x3e8>
		d = c;
 800656a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800656e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		if (IsLower(d)) d -= 0x20;
 8006572:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006576:	2b60      	cmp	r3, #96	; 0x60
 8006578:	d908      	bls.n	800658c <f_printf+0x138>
 800657a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800657e:	2b7a      	cmp	r3, #122	; 0x7a
 8006580:	d804      	bhi.n	800658c <f_printf+0x138>
 8006582:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006586:	3b20      	subs	r3, #32
 8006588:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		switch (d) {				/* Type is... */
 800658c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006590:	3b42      	subs	r3, #66	; 0x42
 8006592:	2b16      	cmp	r3, #22
 8006594:	f200 808f 	bhi.w	80066b6 <f_printf+0x262>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <f_printf+0x14c>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	08006697 	.word	0x08006697
 80065a4:	0800667f 	.word	0x0800667f
 80065a8:	080066a7 	.word	0x080066a7
 80065ac:	080066b7 	.word	0x080066b7
 80065b0:	080066b7 	.word	0x080066b7
 80065b4:	080066b7 	.word	0x080066b7
 80065b8:	080066b7 	.word	0x080066b7
 80065bc:	080066b7 	.word	0x080066b7
 80065c0:	080066b7 	.word	0x080066b7
 80065c4:	080066b7 	.word	0x080066b7
 80065c8:	080066b7 	.word	0x080066b7
 80065cc:	080066b7 	.word	0x080066b7
 80065d0:	080066b7 	.word	0x080066b7
 80065d4:	0800669f 	.word	0x0800669f
 80065d8:	080066b7 	.word	0x080066b7
 80065dc:	080066b7 	.word	0x080066b7
 80065e0:	080066b7 	.word	0x080066b7
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	080066b7 	.word	0x080066b7
 80065ec:	080066a7 	.word	0x080066a7
 80065f0:	080066b7 	.word	0x080066b7
 80065f4:	080066b7 	.word	0x080066b7
 80065f8:	080066af 	.word	0x080066af
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80065fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	66ba      	str	r2, [r7, #104]	; 0x68
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 8006606:	2300      	movs	r3, #0
 8006608:	67fb      	str	r3, [r7, #124]	; 0x7c
 800660a:	e002      	b.n	8006612 <f_printf+0x1be>
 800660c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800660e:	3301      	adds	r3, #1
 8006610:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006612:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006616:	4413      	add	r3, r2
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f6      	bne.n	800660c <f_printf+0x1b8>
			if (!(f & 2)) {
 800661e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d117      	bne.n	800665a <f_printf+0x206>
				while (j++ < w) putc_bfd(&pb, ' ');
 800662a:	e005      	b.n	8006638 <f_printf+0x1e4>
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	2120      	movs	r1, #32
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fed0 	bl	80063d8 <putc_bfd>
 8006638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800663e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006640:	429a      	cmp	r2, r3
 8006642:	d8f3      	bhi.n	800662c <f_printf+0x1d8>
			}
			while (*p) putc_bfd(&pb, *p++);
 8006644:	e009      	b.n	800665a <f_printf+0x206>
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff febf 	bl	80063d8 <putc_bfd>
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f1      	bne.n	8006646 <f_printf+0x1f2>
			while (j++ < w) putc_bfd(&pb, ' ');
 8006662:	e005      	b.n	8006670 <f_printf+0x21c>
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	2120      	movs	r1, #32
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff feb4 	bl	80063d8 <putc_bfd>
 8006670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006676:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006678:	429a      	cmp	r2, r3
 800667a:	d8f3      	bhi.n	8006664 <f_printf+0x210>
			continue;
 800667c:	e0db      	b.n	8006836 <f_printf+0x3e2>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800667e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	66ba      	str	r2, [r7, #104]	; 0x68
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fea2 	bl	80063d8 <putc_bfd>
 8006694:	e0cf      	b.n	8006836 <f_printf+0x3e2>
		case 'B' :					/* Binary */
			r = 2; break;
 8006696:	2302      	movs	r3, #2
 8006698:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800669c:	e014      	b.n	80066c8 <f_printf+0x274>
		case 'O' :					/* Octal */
			r = 8; break;
 800669e:	2308      	movs	r3, #8
 80066a0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80066a4:	e010      	b.n	80066c8 <f_printf+0x274>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80066a6:	230a      	movs	r3, #10
 80066a8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80066ac:	e00c      	b.n	80066c8 <f_printf+0x274>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80066ae:	2310      	movs	r3, #16
 80066b0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80066b4:	e008      	b.n	80066c8 <f_printf+0x274>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80066b6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80066ba:	f107 0308 	add.w	r3, r7, #8
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fe89 	bl	80063d8 <putc_bfd>
 80066c6:	e0b6      	b.n	8006836 <f_printf+0x3e2>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80066c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <f_printf+0x28a>
 80066d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	66ba      	str	r2, [r7, #104]	; 0x68
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	e00c      	b.n	80066f8 <f_printf+0x2a4>
 80066de:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80066e2:	2b44      	cmp	r3, #68	; 0x44
 80066e4:	d104      	bne.n	80066f0 <f_printf+0x29c>
 80066e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	e003      	b.n	80066f8 <f_printf+0x2a4>
 80066f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	66ba      	str	r2, [r7, #104]	; 0x68
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 80066fa:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80066fe:	2b44      	cmp	r3, #68	; 0x44
 8006700:	d10b      	bne.n	800671a <f_printf+0x2c6>
 8006702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006704:	2b00      	cmp	r3, #0
 8006706:	da08      	bge.n	800671a <f_printf+0x2c6>
			v = 0 - v;
 8006708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670a:	425b      	negs	r3, r3
 800670c:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 800670e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006712:	f043 0308 	orr.w	r3, r3, #8
 8006716:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		i = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		do {
			d = (TCHAR)(v % r); v /= r;
 8006720:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8006724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006726:	fbb3 f1f2 	udiv	r1, r3, r2
 800672a:	fb01 f202 	mul.w	r2, r1, r2
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8006734:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8006740:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006744:	2b09      	cmp	r3, #9
 8006746:	d90b      	bls.n	8006760 <f_printf+0x30c>
 8006748:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800674c:	2b78      	cmp	r3, #120	; 0x78
 800674e:	d101      	bne.n	8006754 <f_printf+0x300>
 8006750:	2227      	movs	r2, #39	; 0x27
 8006752:	e000      	b.n	8006756 <f_printf+0x302>
 8006754:	2207      	movs	r2, #7
 8006756:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800675a:	4413      	add	r3, r2
 800675c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			s[i++] = d + '0';
 8006760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800676a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800676e:	3230      	adds	r2, #48	; 0x30
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	3388      	adds	r3, #136	; 0x88
 8006774:	443b      	add	r3, r7
 8006776:	f803 2c34 	strb.w	r2, [r3, #-52]
		} while (v && i < sizeof s / sizeof s[0]);
 800677a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <f_printf+0x334>
 8006780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d9cb      	bls.n	8006720 <f_printf+0x2cc>
		if (f & 8) s[i++] = '-';
 8006788:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d009      	beq.n	80067a8 <f_printf+0x354>
 8006794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800679e:	3388      	adds	r3, #136	; 0x88
 80067a0:	443b      	add	r3, r7
 80067a2:	222d      	movs	r2, #45	; 0x2d
 80067a4:	f803 2c34 	strb.w	r2, [r3, #-52]
		j = i; d = (f & 1) ? '0' : ' ';
 80067a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <f_printf+0x36a>
 80067ba:	2330      	movs	r3, #48	; 0x30
 80067bc:	e000      	b.n	80067c0 <f_printf+0x36c>
 80067be:	2320      	movs	r3, #32
 80067c0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80067c4:	e007      	b.n	80067d6 <f_printf+0x382>
 80067c6:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fe01 	bl	80063d8 <putc_bfd>
 80067d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <f_printf+0x39a>
 80067e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d8eb      	bhi.n	80067c6 <f_printf+0x372>
		do putc_bfd(&pb, s[--i]); while (i);
 80067ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80067fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006800:	4413      	add	r3, r2
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	f107 0308 	add.w	r3, r7, #8
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fde4 	bl	80063d8 <putc_bfd>
 8006810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ea      	bne.n	80067ee <f_printf+0x39a>
		while (j++ < w) putc_bfd(&pb, d);
 8006818:	e007      	b.n	800682a <f_printf+0x3d6>
 800681a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fdd7 	bl	80063d8 <putc_bfd>
 800682a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006832:	429a      	cmp	r2, r3
 8006834:	d8f1      	bhi.n	800681a <f_printf+0x3c6>
		c = *fmt++;
 8006836:	e61b      	b.n	8006470 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <f_printf+0x3ea>
		if (!c) break;
 800683c:	bf00      	nop
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	db15      	blt.n	8006870 <f_printf+0x41c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006844:	68b8      	ldr	r0, [r7, #8]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	461c      	mov	r4, r3
 800684a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	f103 010c 	add.w	r1, r3, #12
 8006856:	4613      	mov	r3, r2
 8006858:	4622      	mov	r2, r4
 800685a:	f7ff fa8b 	bl	8005d74 <f_write>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <f_printf+0x41c>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <f_printf+0x41c>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e001      	b.n	8006874 <f_printf+0x420>
	return EOF;
 8006870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006874:	4618      	mov	r0, r3
 8006876:	3788      	adds	r7, #136	; 0x88
 8006878:	46bd      	mov	sp, r7
 800687a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800687e:	b003      	add	sp, #12
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800689a:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 800689c:	7a5b      	ldrb	r3, [r3, #9]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d831      	bhi.n	8006908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068a6:	7a5b      	ldrb	r3, [r3, #9]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80068b2:	4b18      	ldr	r3, [pc, #96]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068b4:	7a5b      	ldrb	r3, [r3, #9]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80068c2:	4b14      	ldr	r3, [pc, #80]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068c4:	7a5b      	ldrb	r3, [r3, #9]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068cc:	4413      	add	r3, r2
 80068ce:	79fa      	ldrb	r2, [r7, #7]
 80068d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	b2d1      	uxtb	r1, r2
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <FATFS_LinkDriverEx+0x90>)
 80068de:	7251      	strb	r1, [r2, #9]
 80068e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80068e2:	7dbb      	ldrb	r3, [r7, #22]
 80068e4:	3330      	adds	r3, #48	; 0x30
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	3301      	adds	r3, #1
 80068f0:	223a      	movs	r2, #58	; 0x3a
 80068f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3302      	adds	r3, #2
 80068f8:	222f      	movs	r2, #47	; 0x2f
 80068fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	3303      	adds	r3, #3
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
}
 800690a:	4618      	mov	r0, r3
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	200027b4 	.word	0x200027b4

08006918 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006922:	2200      	movs	r2, #0
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff ffac 	bl	8006884 <FATFS_LinkDriverEx>
 800692c:	4603      	mov	r3, r0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b7f      	cmp	r3, #127	; 0x7f
 8006948:	d802      	bhi.n	8006950 <ff_convert+0x18>
		c = chr;
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	81fb      	strh	r3, [r7, #14]
 800694e:	e025      	b.n	800699c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2bff      	cmp	r3, #255	; 0xff
 800695a:	d805      	bhi.n	8006968 <ff_convert+0x30>
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	3b80      	subs	r3, #128	; 0x80
 8006960:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <ff_convert+0x70>)
 8006962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006966:	e000      	b.n	800696a <ff_convert+0x32>
 8006968:	2300      	movs	r3, #0
 800696a:	81fb      	strh	r3, [r7, #14]
 800696c:	e016      	b.n	800699c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800696e:	2300      	movs	r3, #0
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	e009      	b.n	8006988 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <ff_convert+0x70>)
 8006978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	429a      	cmp	r2, r3
 8006980:	d006      	beq.n	8006990 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	81fb      	strh	r3, [r7, #14]
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	2b7f      	cmp	r3, #127	; 0x7f
 800698c:	d9f2      	bls.n	8006974 <ff_convert+0x3c>
 800698e:	e000      	b.n	8006992 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006990:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006992:	89fb      	ldrh	r3, [r7, #14]
 8006994:	3380      	adds	r3, #128	; 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800699c:	89fb      	ldrh	r3, [r7, #14]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	08006c70 	.word	0x08006c70

080069ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e002      	b.n	80069c2 <ff_wtoupper+0x16>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <ff_wtoupper+0x54>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <ff_wtoupper+0x30>
 80069ce:	4a0c      	ldr	r2, [pc, #48]	; (8006a00 <ff_wtoupper+0x54>)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d1ef      	bne.n	80069bc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <ff_wtoupper+0x54>)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <ff_wtoupper+0x46>
 80069e8:	4a06      	ldr	r2, [pc, #24]	; (8006a04 <ff_wtoupper+0x58>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f0:	e000      	b.n	80069f4 <ff_wtoupper+0x48>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	08006d70 	.word	0x08006d70
 8006a04:	08006f50 	.word	0x08006f50

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	4d0c      	ldr	r5, [pc, #48]	; (8006a40 <__libc_init_array+0x38>)
 8006a0e:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	f000 f822 	bl	8006a60 <_init>
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	4d0a      	ldr	r5, [pc, #40]	; (8006a48 <__libc_init_array+0x40>)
 8006a20:	4c0a      	ldr	r4, [pc, #40]	; (8006a4c <__libc_init_array+0x44>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08007130 	.word	0x08007130
 8006a44:	08007130 	.word	0x08007130
 8006a48:	08007130 	.word	0x08007130
 8006a4c:	08007134 	.word	0x08007134

08006a50 <memset>:
 8006a50:	4603      	mov	r3, r0
 8006a52:	4402      	add	r2, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d100      	bne.n	8006a5a <memset+0xa>
 8006a58:	4770      	bx	lr
 8006a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5e:	e7f9      	b.n	8006a54 <memset+0x4>

08006a60 <_init>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr

08006a6c <_fini>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr
