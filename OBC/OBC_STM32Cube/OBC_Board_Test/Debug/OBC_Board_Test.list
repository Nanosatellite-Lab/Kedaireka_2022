
OBC_Board_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002068  08002068  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002068  08002068  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002068  08002068  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800206c  0800206c  0001206c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  0800208c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800208c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007990  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ee  00000000  00000000  000279d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00028dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  00029670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169c5  00000000  00000000  00029ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009da1  00000000  00000000  0004088d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083406  00000000  00000000  0004a62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cda34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002394  00000000  00000000  000cda84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd8 	.word	0x08001fd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08001fd8 	.word	0x08001fd8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <send_uart>:
/* USER CODE BEGIN 0 */
uint8_t sendBufferLoRa[10] = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
uint8_t sendBufferEps[10] = {9, 8 ,7,6,5,4,3,2,1,0};
//uint8_t lenSendBuffer = sizeof(sendBuffer);

void send_uart(char *string){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*)string, len, 2000);
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	b29a      	uxth	r2, r3
 8000172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <send_uart+0x2c>)
 800017a:	f001 fd96 	bl	8001caa <HAL_UART_Transmit>
}
 800017e:	bf00      	nop
 8000180:	3710      	adds	r7, #16
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	2000008c 	.word	0x2000008c

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000192:	f000 fa0f 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000196:	f000 f82b 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019a:	f000 f8c7 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 800019e:	f000 f86d 	bl	800027c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f899 	bl	80002d8 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	send_uart("Hello World Test\r\n");
	  send_uart("Sending Data via I2C...\r\n");
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <main+0x4c>)
 80001a8:	f7ff ffd8 	bl	800015c <send_uart>

	  if(HAL_I2C_Master_Transmit(&hi2c1, loraAddress, sendBufferLoRa, 10, 30000) == HAL_OK){
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x50>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	b299      	uxth	r1, r3
 80001b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	230a      	movs	r3, #10
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <main+0x54>)
 80001bc:	4809      	ldr	r0, [pc, #36]	; (80001e4 <main+0x58>)
 80001be:	f000 fe07 	bl	8000dd0 <HAL_I2C_Master_Transmit>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d103      	bne.n	80001d0 <main+0x44>
		  send_uart("Data sent successfully!!\r\n");
 80001c8:	4807      	ldr	r0, [pc, #28]	; (80001e8 <main+0x5c>)
 80001ca:	f7ff ffc7 	bl	800015c <send_uart>
 80001ce:	e7ea      	b.n	80001a6 <main+0x1a>
	  }else{
		  send_uart("Data sent Failed!!\r\n");
 80001d0:	4806      	ldr	r0, [pc, #24]	; (80001ec <main+0x60>)
 80001d2:	f7ff ffc3 	bl	800015c <send_uart>
	  send_uart("Sending Data via I2C...\r\n");
 80001d6:	e7e6      	b.n	80001a6 <main+0x1a>
 80001d8:	08001ff0 	.word	0x08001ff0
 80001dc:	20000000 	.word	0x20000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000038 	.word	0x20000038
 80001e8:	0800200c 	.word	0x0800200c
 80001ec:	08002028 	.word	0x08002028

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fee2 	bl	8001fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f001 f8cf 	bl	80013dc <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f8a0 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fb3c 	bl	80018e0 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f88b 	bl	8000388 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_I2C1_Init+0x50>)
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_I2C1_Init+0x54>)
 8000284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_I2C1_Init+0x50>)
 8000288:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_I2C1_Init+0x58>)
 800028a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 87;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_I2C1_Init+0x50>)
 8000294:	2257      	movs	r2, #87	; 0x57
 8000296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_I2C1_Init+0x50>)
 800029a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_I2C1_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_I2C1_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_I2C1_Init+0x50>)
 80002ba:	f000 fc45 	bl	8000b48 <HAL_I2C_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f860 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000038 	.word	0x20000038
 80002d0:	40005400 	.word	0x40005400
 80002d4:	000186a0 	.word	0x000186a0

080002d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	; (8000328 <MX_USART1_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_USART1_UART_Init+0x4c>)
 8000310:	f001 fc7e 	bl	8001c10 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f835 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000008c 	.word	0x2000008c
 8000328:	40013800 	.word	0x40013800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <MX_GPIO_Init+0x58>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <MX_GPIO_Init+0x58>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <MX_GPIO_Init+0x58>)
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0308 	and.w	r3, r3, #8
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	e7fe      	b.n	8000390 <Error_Handler+0x8>
	...

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <HAL_MspInit+0x5c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x5c>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <HAL_MspInit+0x60>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <HAL_MspInit+0x60>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000

080003f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <HAL_I2C_MspInit+0x70>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d123      	bne.n	8000460 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <HAL_I2C_MspInit+0x74>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a13      	ldr	r2, [pc, #76]	; (800046c <HAL_I2C_MspInit+0x74>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <HAL_I2C_MspInit+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000430:	23c0      	movs	r3, #192	; 0xc0
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000434:	2312      	movs	r3, #18
 8000436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000438:	2303      	movs	r3, #3
 800043a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <HAL_I2C_MspInit+0x78>)
 8000444:	f000 f9fc 	bl	8000840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_I2C_MspInit+0x74>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_I2C_MspInit+0x74>)
 800044e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000452:	61d3      	str	r3, [r2, #28]
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <HAL_I2C_MspInit+0x74>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40005400 	.word	0x40005400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010c00 	.word	0x40010c00

08000474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <HAL_UART_MspInit+0x8c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d131      	bne.n	80004f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <HAL_UART_MspInit+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <HAL_UART_MspInit+0x90>)
 800049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_UART_MspInit+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_UART_MspInit+0x90>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ce:	2303      	movs	r3, #3
 80004d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <HAL_UART_MspInit+0x94>)
 80004da:	f000 f9b1 	bl	8000840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <HAL_UART_MspInit+0x94>)
 80004f4:	f000 f9a4 	bl	8000840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 f875 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}

0800055a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
	...

08000568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800058e:	f7ff ffe4 	bl	800055a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000592:	f001 fcf5 	bl	8001f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff fdf9 	bl	800018c <main>
  bx lr
 800059a:	4770      	bx	lr
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80005a4:	08002070 	.word	0x08002070
  ldr r2, =_sbss
 80005a8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80005ac:	200000d4 	.word	0x200000d4

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_Init+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_Init+0x28>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f907 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 f808 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f7ff fee0 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x54>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f911 	bl	8000826 <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00e      	b.n	800062c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d80a      	bhi.n	800062a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f8e7 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_InitTick+0x5c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000010 	.word	0x20000010
 8000638:	20000018 	.word	0x20000018
 800063c:	20000014 	.word	0x20000014

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x20>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000018 	.word	0x20000018
 8000660:	200000d0 	.word	0x200000d0

08000664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	200000d0 	.word	0x200000d0

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff90 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff49 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff5e 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff90 	bl	8000730 <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5f 	bl	80006dc <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffb0 	bl	8000794 <SysTick_Config>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000840:	b480      	push	{r7}
 8000842:	b08b      	sub	sp, #44	; 0x2c
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e169      	b.n	8000b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000854:	2201      	movs	r2, #1
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	429a      	cmp	r2, r3
 800086e:	f040 8158 	bne.w	8000b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4a9a      	ldr	r2, [pc, #616]	; (8000ae0 <HAL_GPIO_Init+0x2a0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d05e      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 800087c:	4a98      	ldr	r2, [pc, #608]	; (8000ae0 <HAL_GPIO_Init+0x2a0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d875      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 8000882:	4a98      	ldr	r2, [pc, #608]	; (8000ae4 <HAL_GPIO_Init+0x2a4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d058      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 8000888:	4a96      	ldr	r2, [pc, #600]	; (8000ae4 <HAL_GPIO_Init+0x2a4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d86f      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 800088e:	4a96      	ldr	r2, [pc, #600]	; (8000ae8 <HAL_GPIO_Init+0x2a8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d052      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 8000894:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <HAL_GPIO_Init+0x2a8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d869      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 800089a:	4a94      	ldr	r2, [pc, #592]	; (8000aec <HAL_GPIO_Init+0x2ac>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d04c      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 80008a0:	4a92      	ldr	r2, [pc, #584]	; (8000aec <HAL_GPIO_Init+0x2ac>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d863      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008a6:	4a92      	ldr	r2, [pc, #584]	; (8000af0 <HAL_GPIO_Init+0x2b0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d046      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 80008ac:	4a90      	ldr	r2, [pc, #576]	; (8000af0 <HAL_GPIO_Init+0x2b0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d85d      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d82a      	bhi.n	800090c <HAL_GPIO_Init+0xcc>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d859      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <HAL_GPIO_Init+0x80>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	0800093b 	.word	0x0800093b
 80008c4:	08000915 	.word	0x08000915
 80008c8:	08000927 	.word	0x08000927
 80008cc:	08000969 	.word	0x08000969
 80008d0:	0800096f 	.word	0x0800096f
 80008d4:	0800096f 	.word	0x0800096f
 80008d8:	0800096f 	.word	0x0800096f
 80008dc:	0800096f 	.word	0x0800096f
 80008e0:	0800096f 	.word	0x0800096f
 80008e4:	0800096f 	.word	0x0800096f
 80008e8:	0800096f 	.word	0x0800096f
 80008ec:	0800096f 	.word	0x0800096f
 80008f0:	0800096f 	.word	0x0800096f
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	0800096f 	.word	0x0800096f
 80008fc:	0800096f 	.word	0x0800096f
 8000900:	0800096f 	.word	0x0800096f
 8000904:	0800091d 	.word	0x0800091d
 8000908:	08000931 	.word	0x08000931
 800090c:	4a79      	ldr	r2, [pc, #484]	; (8000af4 <HAL_GPIO_Init+0x2b4>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d013      	beq.n	800093a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000912:	e02c      	b.n	800096e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	623b      	str	r3, [r7, #32]
          break;
 800091a:	e029      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	3304      	adds	r3, #4
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e024      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	3308      	adds	r3, #8
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e01f      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	330c      	adds	r3, #12
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e01a      	b.n	8000970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000942:	2304      	movs	r3, #4
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e013      	b.n	8000970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d105      	bne.n	800095c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000950:	2308      	movs	r3, #8
 8000952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	611a      	str	r2, [r3, #16]
          break;
 800095a:	e009      	b.n	8000970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	615a      	str	r2, [r3, #20]
          break;
 8000966:	e003      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x130>
          break;
 800096e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d801      	bhi.n	800097a <HAL_GPIO_Init+0x13a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	e001      	b.n	800097e <HAL_GPIO_Init+0x13e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3304      	adds	r3, #4
 800097e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2bff      	cmp	r3, #255	; 0xff
 8000984:	d802      	bhi.n	800098c <HAL_GPIO_Init+0x14c>
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x152>
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	3b08      	subs	r3, #8
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	210f      	movs	r1, #15
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	6a39      	ldr	r1, [r7, #32]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	431a      	orrs	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 80b1 	beq.w	8000b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c0:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a4c      	ldr	r2, [pc, #304]	; (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <HAL_GPIO_Init+0x2bc>)
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	220f      	movs	r2, #15
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a40      	ldr	r2, [pc, #256]	; (8000b00 <HAL_GPIO_Init+0x2c0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d013      	beq.n	8000a2c <HAL_GPIO_Init+0x1ec>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3f      	ldr	r2, [pc, #252]	; (8000b04 <HAL_GPIO_Init+0x2c4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d00d      	beq.n	8000a28 <HAL_GPIO_Init+0x1e8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a3e      	ldr	r2, [pc, #248]	; (8000b08 <HAL_GPIO_Init+0x2c8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d007      	beq.n	8000a24 <HAL_GPIO_Init+0x1e4>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <HAL_GPIO_Init+0x1e0>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a20:	2304      	movs	r3, #4
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a3e:	492f      	ldr	r1, [pc, #188]	; (8000afc <HAL_GPIO_Init+0x2bc>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	492c      	ldr	r1, [pc, #176]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	600b      	str	r3, [r1, #0]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4928      	ldr	r1, [pc, #160]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	4922      	ldr	r1, [pc, #136]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	491e      	ldr	r1, [pc, #120]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d006      	beq.n	8000ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	4918      	ldr	r1, [pc, #96]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4914      	ldr	r1, [pc, #80]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	490e      	ldr	r1, [pc, #56]	; (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60cb      	str	r3, [r1, #12]
 8000adc:	e021      	b.n	8000b22 <HAL_GPIO_Init+0x2e2>
 8000ade:	bf00      	nop
 8000ae0:	10320000 	.word	0x10320000
 8000ae4:	10310000 	.word	0x10310000
 8000ae8:	10220000 	.word	0x10220000
 8000aec:	10210000 	.word	0x10210000
 8000af0:	10120000 	.word	0x10120000
 8000af4:	10110000 	.word	0x10110000
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	40011000 	.word	0x40011000
 8000b0c:	40011400 	.word	0x40011400
 8000b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_GPIO_Init+0x304>)
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4909      	ldr	r1, [pc, #36]	; (8000b44 <HAL_GPIO_Init+0x304>)
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	3301      	adds	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f47f ae8e 	bne.w	8000854 <HAL_GPIO_Init+0x14>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	372c      	adds	r7, #44	; 0x2c
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e12b      	b.n	8000db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d106      	bne.n	8000b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fc42 	bl	80003f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2224      	movs	r2, #36	; 0x24
 8000b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0201 	bic.w	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bac:	f000 ffea 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a81      	ldr	r2, [pc, #516]	; (8000dbc <HAL_I2C_Init+0x274>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d807      	bhi.n	8000bcc <HAL_I2C_Init+0x84>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4a80      	ldr	r2, [pc, #512]	; (8000dc0 <HAL_I2C_Init+0x278>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	bf94      	ite	ls
 8000bc4:	2301      	movls	r3, #1
 8000bc6:	2300      	movhi	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	e006      	b.n	8000bda <HAL_I2C_Init+0x92>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4a7d      	ldr	r2, [pc, #500]	; (8000dc4 <HAL_I2C_Init+0x27c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	bf94      	ite	ls
 8000bd4:	2301      	movls	r3, #1
 8000bd6:	2300      	movhi	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0e7      	b.n	8000db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4a78      	ldr	r2, [pc, #480]	; (8000dc8 <HAL_I2C_Init+0x280>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a6a      	ldr	r2, [pc, #424]	; (8000dbc <HAL_I2C_Init+0x274>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d802      	bhi.n	8000c1c <HAL_I2C_Init+0xd4>
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	e009      	b.n	8000c30 <HAL_I2C_Init+0xe8>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	4a69      	ldr	r2, [pc, #420]	; (8000dcc <HAL_I2C_Init+0x284>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	3301      	adds	r3, #1
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	495c      	ldr	r1, [pc, #368]	; (8000dbc <HAL_I2C_Init+0x274>)
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d819      	bhi.n	8000c84 <HAL_I2C_Init+0x13c>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	1e59      	subs	r1, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5e:	1c59      	adds	r1, r3, #1
 8000c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c64:	400b      	ands	r3, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00a      	beq.n	8000c80 <HAL_I2C_Init+0x138>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	1e59      	subs	r1, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c7e:	e051      	b.n	8000d24 <HAL_I2C_Init+0x1dc>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e04f      	b.n	8000d24 <HAL_I2C_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d111      	bne.n	8000cb0 <HAL_I2C_Init+0x168>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	1e58      	subs	r0, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6859      	ldr	r1, [r3, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	440b      	add	r3, r1
 8000c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	e012      	b.n	8000cd6 <HAL_I2C_Init+0x18e>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1e58      	subs	r0, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	0099      	lsls	r1, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_I2C_Init+0x196>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e022      	b.n	8000d24 <HAL_I2C_Init+0x1dc>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10e      	bne.n	8000d04 <HAL_I2C_Init+0x1bc>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1e58      	subs	r0, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6859      	ldr	r1, [r3, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d02:	e00f      	b.n	8000d24 <HAL_I2C_Init+0x1dc>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1e58      	subs	r0, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	0099      	lsls	r1, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	6809      	ldr	r1, [r1, #0]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69da      	ldr	r2, [r3, #28]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6911      	ldr	r1, [r2, #16]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68d2      	ldr	r2, [r2, #12]
 8000d5e:	4311      	orrs	r1, r2
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	000186a0 	.word	0x000186a0
 8000dc0:	001e847f 	.word	0x001e847f
 8000dc4:	003d08ff 	.word	0x003d08ff
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	10624dd3 	.word	0x10624dd3

08000dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	460b      	mov	r3, r1
 8000dde:	817b      	strh	r3, [r7, #10]
 8000de0:	4613      	mov	r3, r2
 8000de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff fc3e 	bl	8000664 <HAL_GetTick>
 8000de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b20      	cmp	r3, #32
 8000df4:	f040 80e0 	bne.w	8000fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2319      	movs	r3, #25
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4970      	ldr	r1, [pc, #448]	; (8000fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f000 f964 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e0d3      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_I2C_Master_Transmit+0x50>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0cc      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d007      	beq.n	8000e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0201 	orr.w	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2221      	movs	r2, #33	; 0x21
 8000e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2210      	movs	r2, #16
 8000e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	893a      	ldrh	r2, [r7, #8]
 8000e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e88:	8979      	ldrh	r1, [r7, #10]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 f89c 	bl	8000fcc <I2C_MasterRequestWrite>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e08d      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000eb4:	e066      	b.n	8000f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	6a39      	ldr	r1, [r7, #32]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 f9de 	bl	800127c <I2C_WaitOnTXEFlagUntilTimeout>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d107      	bne.n	8000ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e06b      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3b01      	subs	r3, #1
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d11b      	bne.n	8000f58 <HAL_I2C_Master_Transmit+0x188>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d017      	beq.n	8000f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	6a39      	ldr	r1, [r7, #32]
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f000 f9ce 	bl	80012fe <I2C_WaitOnBTFFlagUntilTimeout>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d107      	bne.n	8000f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e01a      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d194      	bne.n	8000eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e000      	b.n	8000fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000fb8:	2302      	movs	r3, #2
  }
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	00100002 	.word	0x00100002
 8000fc8:	ffff0000 	.word	0xffff0000

08000fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d006      	beq.n	8000ff6 <I2C_MasterRequestWrite+0x2a>
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <I2C_MasterRequestWrite+0x2a>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ff4:	d108      	bne.n	8001008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e00b      	b.n	8001020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	2b12      	cmp	r3, #18
 800100e:	d107      	bne.n	8001020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f84f 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00d      	beq.n	8001054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001046:	d103      	bne.n	8001050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e035      	b.n	80010c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800105c:	d108      	bne.n	8001070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800105e:	897b      	ldrh	r3, [r7, #10]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	e01b      	b.n	80010a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001070:	897b      	ldrh	r3, [r7, #10]
 8001072:	11db      	asrs	r3, r3, #7
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 0306 	and.w	r3, r3, #6
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f063 030f 	orn	r3, r3, #15
 8001080:	b2da      	uxtb	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <I2C_MasterRequestWrite+0xfc>)
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f875 	bl	800117e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e010      	b.n	80010c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800109e:	897b      	ldrh	r3, [r7, #10]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <I2C_MasterRequestWrite+0x100>)
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f865 	bl	800117e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	00010008 	.word	0x00010008
 80010cc:	00010002 	.word	0x00010002

080010d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010e0:	e025      	b.n	800112e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d021      	beq.n	800112e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010ea:	f7ff fabb 	bl	8000664 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d302      	bcc.n	8001100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2220      	movs	r2, #32
 800110a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f043 0220 	orr.w	r2, r3, #32
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e023      	b.n	8001176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	0c1b      	lsrs	r3, r3, #16
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d10d      	bne.n	8001154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4013      	ands	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	e00c      	b.n	800116e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4013      	ands	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	429a      	cmp	r2, r3
 8001172:	d0b6      	beq.n	80010e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800118c:	e051      	b.n	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119c:	d123      	bne.n	80011e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80011b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2220      	movs	r2, #32
 80011c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f043 0204 	orr.w	r2, r3, #4
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e046      	b.n	8001274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d021      	beq.n	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ee:	f7ff fa39 	bl	8000664 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d302      	bcc.n	8001204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d116      	bne.n	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f043 0220 	orr.w	r2, r3, #32
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e020      	b.n	8001274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	0c1b      	lsrs	r3, r3, #16
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10c      	bne.n	8001256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4013      	ands	r3, r2
 8001248:	b29b      	uxth	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	e00b      	b.n	800126e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	43da      	mvns	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4013      	ands	r3, r2
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d18d      	bne.n	800118e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001288:	e02d      	b.n	80012e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f878 	bl	8001380 <I2C_IsAcknowledgeFailed>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e02d      	b.n	80012f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d021      	beq.n	80012e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a2:	f7ff f9df 	bl	8000664 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d302      	bcc.n	80012b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d116      	bne.n	80012e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e007      	b.n	80012f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f0:	2b80      	cmp	r3, #128	; 0x80
 80012f2:	d1ca      	bne.n	800128a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800130a:	e02d      	b.n	8001368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f837 	bl	8001380 <I2C_IsAcknowledgeFailed>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e02d      	b.n	8001378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001322:	d021      	beq.n	8001368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001324:	f7ff f99e 	bl	8000664 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	d302      	bcc.n	800133a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2220      	movs	r2, #32
 8001344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f043 0220 	orr.w	r2, r3, #32
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e007      	b.n	8001378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b04      	cmp	r3, #4
 8001374:	d1ca      	bne.n	800130c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d11b      	bne.n	80013d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f043 0204 	orr.w	r2, r3, #4
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e272      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8087 	beq.w	800150a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b04      	cmp	r3, #4
 8001406:	d00c      	beq.n	8001422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001408:	4b8f      	ldr	r3, [pc, #572]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d112      	bne.n	800143a <HAL_RCC_OscConfig+0x5e>
 8001414:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d10b      	bne.n	800143a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d06c      	beq.n	8001508 <HAL_RCC_OscConfig+0x12c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d168      	bne.n	8001508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e24c      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x76>
 8001444:	4b80      	ldr	r3, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a7f      	ldr	r2, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e02e      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7a      	ldr	r2, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a77      	ldr	r2, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e01d      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0xbc>
 800147e:	4b72      	ldr	r3, [pc, #456]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a71      	ldr	r2, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b6f      	ldr	r3, [pc, #444]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6e      	ldr	r2, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a67      	ldr	r2, [pc, #412]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff f8d4 	bl	8000664 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff f8d0 	bl	8000664 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e200      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe4>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff f8c0 	bl	8000664 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff f8bc 	bl	8000664 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1ec      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x10c>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d063      	beq.n	80015de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d11c      	bne.n	8001568 <HAL_RCC_OscConfig+0x18c>
 800152e:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d116      	bne.n	8001568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x176>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1c0      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4939      	ldr	r1, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	e03a      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x270>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff f875 	bl	8000664 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff f871 	bl	8000664 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1a1      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4927      	ldr	r1, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
 80015b0:	e015      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_RCC_OscConfig+0x270>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff f854 	bl	8000664 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff f850 	bl	8000664 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e180      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d019      	beq.n	8001626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_RCC_OscConfig+0x274>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff f834 	bl	8000664 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff f830 	bl	8000664 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e160      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800161e:	2001      	movs	r0, #1
 8001620:	f000 fad8 	bl	8001bd4 <RCC_Delay>
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_RCC_OscConfig+0x274>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff f81a 	bl	8000664 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001632:	e00f      	b.n	8001654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff f816 	bl	8000664 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d908      	bls.n	8001654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e146      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	42420000 	.word	0x42420000
 8001650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e9      	bne.n	8001634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a6 	beq.w	80017ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a87      	ldr	r2, [pc, #540]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <HAL_RCC_OscConfig+0x4c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x4c8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7e      	ldr	r2, [pc, #504]	; (80018a4 <HAL_RCC_OscConfig+0x4c8>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7fe ffd7 	bl	8000664 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7fe ffd3 	bl	8000664 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e103      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x4c8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x312>
 80016e0:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e02d      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x334>
 80016f6:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a69      	ldr	r2, [pc, #420]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a66      	ldr	r2, [pc, #408]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x356>
 8001718:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a60      	ldr	r2, [pc, #384]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a5d      	ldr	r2, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 8001732:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7fe ff87 	bl	8000664 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7fe ff83 	bl	8000664 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0b1      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x37e>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7fe ff71 	bl	8000664 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7fe ff6d 	bl	8000664 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e09b      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d061      	beq.n	8001894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d146      	bne.n	8001866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7fe ff41 	bl	8000664 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7fe ff3d 	bl	8000664 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e06d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4921      	ldr	r1, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a19      	ldr	r1, [r3, #32]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	430b      	orrs	r3, r1
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7fe ff11 	bl	8000664 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7fe ff0d 	bl	8000664 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e03d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x46a>
 8001864:	e035      	b.n	80018d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x4cc>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7fe fefa 	bl	8000664 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7fe fef6 	bl	8000664 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e026      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x498>
 8001892:	e01e      	b.n	80018d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e019      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x500>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0d0      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d910      	bls.n	8001924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4965      	ldr	r1, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800195e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d040      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e073      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e06b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4936      	ldr	r1, [pc, #216]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7fe fe48 	bl	8000664 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7fe fe44 	bl	8000664 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e053      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d210      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 0207 	bic.w	r2, r3, #7
 8001a16:	4922      	ldr	r1, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1cc>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fda6 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08002050 	.word	0x08002050
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	20000014 	.word	0x20000014

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b490      	push	{r4, r7}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xac>)
 8001abc:	1d3c      	adds	r4, r7, #4
 8001abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ac4:	f240 2301 	movw	r3, #513	; 0x201
 8001ac8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x46>
 8001af2:	e02b      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001af6:	623b      	str	r3, [r7, #32]
      break;
 8001af8:	e02b      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3328      	adds	r3, #40	; 0x28
 8001b04:	443b      	add	r3, r7
 8001b06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d012      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0c5b      	lsrs	r3, r3, #17
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	3328      	adds	r3, #40	; 0x28
 8001b22:	443b      	add	r3, r7
 8001b24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	e004      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	623b      	str	r3, [r7, #32]
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b4e:	623b      	str	r3, [r7, #32]
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6a3b      	ldr	r3, [r7, #32]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc90      	pop	{r4, r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	08002040 	.word	0x08002040
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	003d0900 	.word	0x003d0900

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000010 	.word	0x20000010

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff2 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08002060 	.word	0x08002060

08001bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0adb      	lsrs	r3, r3, #11
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08002060 	.word	0x08002060

08001bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <RCC_Delay+0x34>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <RCC_Delay+0x38>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf0:	bf00      	nop
  }
  while (Delay --);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <RCC_Delay+0x1c>
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e03f      	b.n	8001ca2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fc1c 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	; 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f905 	bl	8001e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b08a      	sub	sp, #40	; 0x28
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d17c      	bne.n	8001dc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_UART_Transmit+0x2c>
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e075      	b.n	8001dc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_UART_Transmit+0x3e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e06e      	b.n	8001dc6 <HAL_UART_Transmit+0x11c>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2221      	movs	r2, #33	; 0x21
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfe:	f7fe fcb1 	bl	8000664 <HAL_GetTick>
 8001d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	88fa      	ldrh	r2, [r7, #6]
 8001d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d18:	d108      	bne.n	8001d2c <HAL_UART_Transmit+0x82>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	e003      	b.n	8001d34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d3c:	e02a      	b.n	8001d94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f840 	bl	8001dce <UART_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e036      	b.n	8001dc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10b      	bne.n	8001d76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	3302      	adds	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	e007      	b.n	8001d86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1cf      	bne.n	8001d3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2200      	movs	r2, #0
 8001da6:	2140      	movs	r1, #64	; 0x40
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f810 	bl	8001dce <UART_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e006      	b.n	8001dc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dde:	e02c      	b.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d028      	beq.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8001dee:	f7fe fc39 	bl	8000664 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d21d      	bcs.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e00f      	b.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4013      	ands	r3, r2
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d0c3      	beq.n	8001de0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e9e:	f023 030c 	bic.w	r3, r3, #12
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <UART_SetConfig+0x114>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ecc:	f7ff fe6e 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	e002      	b.n	8001eda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ed4:	f7ff fe56 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	441a      	add	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <UART_SetConfig+0x118>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	0119      	lsls	r1, r3, #4
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <UART_SetConfig+0x118>)
 8001f12:	fba3 0302 	umull	r0, r3, r3, r2
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2064      	movs	r0, #100	; 0x64
 8001f1a:	fb00 f303 	mul.w	r3, r0, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	3332      	adds	r3, #50	; 0x32
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <UART_SetConfig+0x118>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	4419      	add	r1, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009a      	lsls	r2, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <UART_SetConfig+0x118>)
 8001f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2064      	movs	r0, #100	; 0x64
 8001f52:	fb00 f303 	mul.w	r3, r0, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	3332      	adds	r3, #50	; 0x32
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <UART_SetConfig+0x118>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	440a      	add	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	51eb851f 	.word	0x51eb851f

08001f80 <__libc_init_array>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	2600      	movs	r6, #0
 8001f84:	4d0c      	ldr	r5, [pc, #48]	; (8001fb8 <__libc_init_array+0x38>)
 8001f86:	4c0d      	ldr	r4, [pc, #52]	; (8001fbc <__libc_init_array+0x3c>)
 8001f88:	1b64      	subs	r4, r4, r5
 8001f8a:	10a4      	asrs	r4, r4, #2
 8001f8c:	42a6      	cmp	r6, r4
 8001f8e:	d109      	bne.n	8001fa4 <__libc_init_array+0x24>
 8001f90:	f000 f822 	bl	8001fd8 <_init>
 8001f94:	2600      	movs	r6, #0
 8001f96:	4d0a      	ldr	r5, [pc, #40]	; (8001fc0 <__libc_init_array+0x40>)
 8001f98:	4c0a      	ldr	r4, [pc, #40]	; (8001fc4 <__libc_init_array+0x44>)
 8001f9a:	1b64      	subs	r4, r4, r5
 8001f9c:	10a4      	asrs	r4, r4, #2
 8001f9e:	42a6      	cmp	r6, r4
 8001fa0:	d105      	bne.n	8001fae <__libc_init_array+0x2e>
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
 8001fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fa8:	4798      	blx	r3
 8001faa:	3601      	adds	r6, #1
 8001fac:	e7ee      	b.n	8001f8c <__libc_init_array+0xc>
 8001fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb2:	4798      	blx	r3
 8001fb4:	3601      	adds	r6, #1
 8001fb6:	e7f2      	b.n	8001f9e <__libc_init_array+0x1e>
 8001fb8:	08002068 	.word	0x08002068
 8001fbc:	08002068 	.word	0x08002068
 8001fc0:	08002068 	.word	0x08002068
 8001fc4:	0800206c 	.word	0x0800206c

08001fc8 <memset>:
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4402      	add	r2, r0
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <memset+0xa>
 8001fd0:	4770      	bx	lr
 8001fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fd6:	e7f9      	b.n	8001fcc <memset+0x4>

08001fd8 <_init>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	bf00      	nop
 8001fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	469e      	mov	lr, r3
 8001fe2:	4770      	bx	lr

08001fe4 <_fini>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	bf00      	nop
 8001fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fea:	bc08      	pop	{r3}
 8001fec:	469e      	mov	lr, r3
 8001fee:	4770      	bx	lr
