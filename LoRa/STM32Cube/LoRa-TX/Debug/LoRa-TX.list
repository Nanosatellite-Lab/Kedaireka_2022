
LoRa-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000241c  20000040  08008058  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000245c  08008058  0002245c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd24  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028be  00000000  00000000  0002fd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00032650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018953  00000000  00000000  00034600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014252  00000000  00000000  0004cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878dc  00000000  00000000  000611a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  000e8ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000040 	.word	0x20000040
 800012c:	00000000 	.word	0x00000000
 8000130:	08007898 	.word	0x08007898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000044 	.word	0x20000044
 800014c:	08007898 	.word	0x08007898

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <SELECT+0x1c>)
 8000474:	f001 ff56 	bl	8002324 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000478:	2001      	movs	r0, #1
 800047a:	f001 fc3b 	bl	8001cf4 <HAL_Delay>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010c00 	.word	0x40010c00

08000488 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	4804      	ldr	r0, [pc, #16]	; (80004a4 <DESELECT+0x1c>)
 8000494:	f001 ff46 	bl	8002324 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 fc2b 	bl	8001cf4 <HAL_Delay>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b2:	bf00      	nop
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <SPI_TxByte+0x30>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d1f8      	bne.n	80004b4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c2:	1df9      	adds	r1, r7, #7
 80004c4:	2364      	movs	r3, #100	; 0x64
 80004c6:	2201      	movs	r2, #1
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <SPI_TxByte+0x30>)
 80004ca:	f002 fd25 	bl	8002f18 <HAL_SPI_Transmit>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000110 	.word	0x20000110

080004dc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004e8:	bf00      	nop
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <SPI_TxBuffer+0x30>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d1f8      	bne.n	80004ea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004f8:	887a      	ldrh	r2, [r7, #2]
 80004fa:	2364      	movs	r3, #100	; 0x64
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <SPI_TxBuffer+0x30>)
 8000500:	f002 fd0a 	bl	8002f18 <HAL_SPI_Transmit>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000110 	.word	0x20000110

08000510 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000516:	23ff      	movs	r3, #255	; 0xff
 8000518:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051a:	bf00      	nop
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <SPI_RxByte+0x34>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b02      	cmp	r3, #2
 8000528:	d1f8      	bne.n	800051c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052a:	1dba      	adds	r2, r7, #6
 800052c:	1df9      	adds	r1, r7, #7
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <SPI_RxByte+0x34>)
 8000536:	f002 ff3c 	bl	80033b2 <HAL_SPI_TransmitReceive>

	return data;
 800053a:	79bb      	ldrb	r3, [r7, #6]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000110 	.word	0x20000110

08000548 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000550:	f7ff ffde 	bl	8000510 <SPI_RxByte>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	701a      	strb	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <SD_ReadyWait+0x30>)
 800056c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000570:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000572:	f7ff ffcd 	bl	8000510 <SPI_RxByte>
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2bff      	cmp	r3, #255	; 0xff
 800057e:	d003      	beq.n	8000588 <SD_ReadyWait+0x24>
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <SD_ReadyWait+0x30>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1f4      	bne.n	8000572 <SD_ReadyWait+0xe>

	return res;
 8000588:	79fb      	ldrb	r3, [r7, #7]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000005e 	.word	0x2000005e

08000598 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800059e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a4:	f7ff ff70 	bl	8000488 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e005      	b.n	80005ba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005ae:	20ff      	movs	r0, #255	; 0xff
 80005b0:	f7ff ff7a 	bl	80004a8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b09      	cmp	r3, #9
 80005be:	ddf6      	ble.n	80005ae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c0:	f7ff ff52 	bl	8000468 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005d8:	2395      	movs	r3, #149	; 0x95
 80005da:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005dc:	463b      	mov	r3, r7
 80005de:	2106      	movs	r1, #6
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff7b 	bl	80004dc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005e6:	e002      	b.n	80005ee <SD_PowerOn+0x56>
	{
		cnt--;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ee:	f7ff ff8f 	bl	8000510 <SPI_RxByte>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d002      	beq.n	80005fe <SD_PowerOn+0x66>
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f4      	bne.n	80005e8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80005fe:	f7ff ff43 	bl	8000488 <DESELECT>
	SPI_TxByte(0XFF);
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	f7ff ff50 	bl	80004a8 <SPI_TxByte>

	PowerFlag = 1;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <SD_PowerOn+0x80>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000061 	.word	0x20000061

0800061c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <SD_PowerOff+0x14>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000061 	.word	0x20000061

08000634 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <SD_CheckPower+0x10>)
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000061 	.word	0x20000061

08000648 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SD_RxDataBlock+0x58>)
 8000654:	22c8      	movs	r2, #200	; 0xc8
 8000656:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000658:	f7ff ff5a 	bl	8000510 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2bff      	cmp	r3, #255	; 0xff
 8000664:	d103      	bne.n	800066e <SD_RxDataBlock+0x26>
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SD_RxDataBlock+0x58>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1f4      	bne.n	8000658 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2bfe      	cmp	r3, #254	; 0xfe
 8000672:	d001      	beq.n	8000678 <SD_RxDataBlock+0x30>
 8000674:	2300      	movs	r3, #0
 8000676:	e00f      	b.n	8000698 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff62 	bl	8000548 <SPI_RxBytePtr>
	} while(len--);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	603a      	str	r2, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f4      	bne.n	8000678 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800068e:	f7ff ff3f 	bl	8000510 <SPI_RxByte>
	SPI_RxByte();
 8000692:	f7ff ff3d 	bl	8000510 <SPI_RxByte>

	return TRUE;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000005c 	.word	0x2000005c

080006a4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b4:	f7ff ff56 	bl	8000564 <SD_ReadyWait>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2bff      	cmp	r3, #255	; 0xff
 80006bc:	d001      	beq.n	80006c2 <SD_TxDataBlock+0x1e>
 80006be:	2300      	movs	r3, #0
 80006c0:	e02f      	b.n	8000722 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff feef 	bl	80004a8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2bfd      	cmp	r3, #253	; 0xfd
 80006ce:	d020      	beq.n	8000712 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff01 	bl	80004dc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006da:	f7ff ff19 	bl	8000510 <SPI_RxByte>
		SPI_RxByte();
 80006de:	f7ff ff17 	bl	8000510 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e2:	e00b      	b.n	80006fc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e4:	f7ff ff14 	bl	8000510 <SPI_RxByte>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d006      	beq.n	8000704 <SD_TxDataBlock+0x60>
			i++;
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	3301      	adds	r3, #1
 80006fa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	2b40      	cmp	r3, #64	; 0x40
 8000700:	d9f0      	bls.n	80006e4 <SD_TxDataBlock+0x40>
 8000702:	e000      	b.n	8000706 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000704:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000706:	bf00      	nop
 8000708:	f7ff ff02 	bl	8000510 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0fa      	beq.n	8000708 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	2b05      	cmp	r3, #5
 800071a:	d101      	bne.n	8000720 <SD_TxDataBlock+0x7c>
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	6039      	str	r1, [r7, #0]
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000736:	f7ff ff15 	bl	8000564 <SD_ReadyWait>
 800073a:	4603      	mov	r3, r0
 800073c:	2bff      	cmp	r3, #255	; 0xff
 800073e:	d001      	beq.n	8000744 <SD_SendCmd+0x1a>
 8000740:	23ff      	movs	r3, #255	; 0xff
 8000742:	e042      	b.n	80007ca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff feae 	bl	80004a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	0e1b      	lsrs	r3, r3, #24
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fea8 	bl	80004a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fea2 	bl	80004a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe9c 	bl	80004a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fe97 	bl	80004a8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b40      	cmp	r3, #64	; 0x40
 800077e:	d102      	bne.n	8000786 <SD_SendCmd+0x5c>
 8000780:	2395      	movs	r3, #149	; 0x95
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e007      	b.n	8000796 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b48      	cmp	r3, #72	; 0x48
 800078a:	d102      	bne.n	8000792 <SD_SendCmd+0x68>
 800078c:	2387      	movs	r3, #135	; 0x87
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e001      	b.n	8000796 <SD_SendCmd+0x6c>
	else crc = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fe85 	bl	80004a8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b4c      	cmp	r3, #76	; 0x4c
 80007a2:	d101      	bne.n	80007a8 <SD_SendCmd+0x7e>
 80007a4:	f7ff feb4 	bl	8000510 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007a8:	230a      	movs	r3, #10
 80007aa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007ac:	f7ff feb0 	bl	8000510 <SPI_RxByte>
 80007b0:	4603      	mov	r3, r0
 80007b2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	da05      	bge.n	80007c8 <SD_SendCmd+0x9e>
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	3b01      	subs	r3, #1
 80007c0:	73bb      	strb	r3, [r7, #14]
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f1      	bne.n	80007ac <SD_SendCmd+0x82>

	return res;
 80007c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SD_disk_initialize+0x14>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e0d1      	b.n	800098c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007e8:	4b6a      	ldr	r3, [pc, #424]	; (8000994 <SD_disk_initialize+0x1c0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <SD_disk_initialize+0x2a>
 80007f6:	4b67      	ldr	r3, [pc, #412]	; (8000994 <SD_disk_initialize+0x1c0>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	e0c6      	b.n	800098c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80007fe:	f7ff fecb 	bl	8000598 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000802:	f7ff fe31 	bl	8000468 <SELECT>

	/* check disk type */
	type = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080a:	2100      	movs	r1, #0
 800080c:	2040      	movs	r0, #64	; 0x40
 800080e:	f7ff ff8c 	bl	800072a <SD_SendCmd>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	f040 80a1 	bne.w	800095c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081a:	4b5f      	ldr	r3, [pc, #380]	; (8000998 <SD_disk_initialize+0x1c4>)
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000822:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000826:	2048      	movs	r0, #72	; 0x48
 8000828:	f7ff ff7f 	bl	800072a <SD_SendCmd>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d155      	bne.n	80008de <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e00c      	b.n	8000852 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000838:	7bfc      	ldrb	r4, [r7, #15]
 800083a:	f7ff fe69 	bl	8000510 <SPI_RxByte>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	f104 0310 	add.w	r3, r4, #16
 8000846:	443b      	add	r3, r7
 8000848:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3301      	adds	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d9ef      	bls.n	8000838 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000858:	7abb      	ldrb	r3, [r7, #10]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d17e      	bne.n	800095c <SD_disk_initialize+0x188>
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	2baa      	cmp	r3, #170	; 0xaa
 8000862:	d17b      	bne.n	800095c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000864:	2100      	movs	r1, #0
 8000866:	2077      	movs	r0, #119	; 0x77
 8000868:	f7ff ff5f 	bl	800072a <SD_SendCmd>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d807      	bhi.n	8000882 <SD_disk_initialize+0xae>
 8000872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000876:	2069      	movs	r0, #105	; 0x69
 8000878:	f7ff ff57 	bl	800072a <SD_SendCmd>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d004      	beq.n	800088c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <SD_disk_initialize+0x1c4>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ec      	bne.n	8000864 <SD_disk_initialize+0x90>
 800088a:	e000      	b.n	800088e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800088c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <SD_disk_initialize+0x1c4>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d062      	beq.n	800095c <SD_disk_initialize+0x188>
 8000896:	2100      	movs	r1, #0
 8000898:	207a      	movs	r0, #122	; 0x7a
 800089a:	f7ff ff46 	bl	800072a <SD_SendCmd>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d15b      	bne.n	800095c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e00c      	b.n	80008c4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008aa:	7bfc      	ldrb	r4, [r7, #15]
 80008ac:	f7ff fe30 	bl	8000510 <SPI_RxByte>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	f104 0310 	add.w	r3, r4, #16
 80008b8:	443b      	add	r3, r7
 80008ba:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	3301      	adds	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d9ef      	bls.n	80008aa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ca:	7a3b      	ldrb	r3, [r7, #8]
 80008cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SD_disk_initialize+0x104>
 80008d4:	230c      	movs	r3, #12
 80008d6:	e000      	b.n	80008da <SD_disk_initialize+0x106>
 80008d8:	2304      	movs	r3, #4
 80008da:	73bb      	strb	r3, [r7, #14]
 80008dc:	e03e      	b.n	800095c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008de:	2100      	movs	r1, #0
 80008e0:	2077      	movs	r0, #119	; 0x77
 80008e2:	f7ff ff22 	bl	800072a <SD_SendCmd>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d808      	bhi.n	80008fe <SD_disk_initialize+0x12a>
 80008ec:	2100      	movs	r1, #0
 80008ee:	2069      	movs	r0, #105	; 0x69
 80008f0:	f7ff ff1b 	bl	800072a <SD_SendCmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d801      	bhi.n	80008fe <SD_disk_initialize+0x12a>
 80008fa:	2302      	movs	r3, #2
 80008fc:	e000      	b.n	8000900 <SD_disk_initialize+0x12c>
 80008fe:	2301      	movs	r3, #1
 8000900:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d10e      	bne.n	8000926 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000908:	2100      	movs	r1, #0
 800090a:	2077      	movs	r0, #119	; 0x77
 800090c:	f7ff ff0d 	bl	800072a <SD_SendCmd>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d80e      	bhi.n	8000934 <SD_disk_initialize+0x160>
 8000916:	2100      	movs	r1, #0
 8000918:	2069      	movs	r0, #105	; 0x69
 800091a:	f7ff ff06 	bl	800072a <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d107      	bne.n	8000934 <SD_disk_initialize+0x160>
 8000924:	e00c      	b.n	8000940 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000926:	2100      	movs	r1, #0
 8000928:	2041      	movs	r0, #65	; 0x41
 800092a:	f7ff fefe 	bl	800072a <SD_SendCmd>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d004      	beq.n	800093e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <SD_disk_initialize+0x1c4>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1e2      	bne.n	8000902 <SD_disk_initialize+0x12e>
 800093c:	e000      	b.n	8000940 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800093e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <SD_disk_initialize+0x1c4>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <SD_disk_initialize+0x184>
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	2050      	movs	r0, #80	; 0x50
 800094e:	f7ff feec 	bl	800072a <SD_SendCmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SD_disk_initialize+0x188>
 8000958:	2300      	movs	r3, #0
 800095a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800095c:	4a0f      	ldr	r2, [pc, #60]	; (800099c <SD_disk_initialize+0x1c8>)
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000962:	f7ff fd91 	bl	8000488 <DESELECT>
	SPI_RxByte();
 8000966:	f7ff fdd3 	bl	8000510 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SD_disk_initialize+0x1c0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SD_disk_initialize+0x1c0>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e001      	b.n	8000986 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000982:	f7ff fe4b 	bl	800061c <SD_PowerOff>
	}

	return Stat;
 8000986:	4b03      	ldr	r3, [pc, #12]	; (8000994 <SD_disk_initialize+0x1c0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	2000005c 	.word	0x2000005c
 800099c:	20000060 	.word	0x20000060

080009a0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SD_disk_status+0x14>
 80009b0:	2301      	movs	r3, #1
 80009b2:	e002      	b.n	80009ba <SD_disk_status+0x1a>
	return Stat;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <SD_disk_status+0x24>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000000 	.word	0x20000000

080009c8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4603      	mov	r3, r0
 80009d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <SD_disk_read+0x1c>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <SD_disk_read+0x20>
 80009e4:	2304      	movs	r3, #4
 80009e6:	e051      	b.n	8000a8c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <SD_disk_read+0xcc>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SD_disk_read+0x32>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e048      	b.n	8000a8c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <SD_disk_read+0xd0>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d102      	bne.n	8000a0c <SD_disk_read+0x44>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	025b      	lsls	r3, r3, #9
 8000a0a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a0c:	f7ff fd2c 	bl	8000468 <SELECT>

	if (count == 1)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d111      	bne.n	8000a3a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	2051      	movs	r0, #81	; 0x51
 8000a1a:	f7ff fe86 	bl	800072a <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d129      	bne.n	8000a78 <SD_disk_read+0xb0>
 8000a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f7ff fe0d 	bl	8000648 <SD_RxDataBlock>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d021      	beq.n	8000a78 <SD_disk_read+0xb0>
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	e01e      	b.n	8000a78 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2052      	movs	r0, #82	; 0x52
 8000a3e:	f7ff fe74 	bl	800072a <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d117      	bne.n	8000a78 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f7ff fdfb 	bl	8000648 <SD_RxDataBlock>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00a      	beq.n	8000a6e <SD_disk_read+0xa6>
				buff += 512;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ed      	bne.n	8000a48 <SD_disk_read+0x80>
 8000a6c:	e000      	b.n	8000a70 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a6e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	204c      	movs	r0, #76	; 0x4c
 8000a74:	f7ff fe59 	bl	800072a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a78:	f7ff fd06 	bl	8000488 <DESELECT>
	SPI_RxByte();
 8000a7c:	f7ff fd48 	bl	8000510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf14      	ite	ne
 8000a86:	2301      	movne	r3, #1
 8000a88:	2300      	moveq	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000060 	.word	0x20000060

08000a9c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <SD_disk_write+0x1c>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <SD_disk_write+0x20>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e06b      	b.n	8000b94 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000abc:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <SD_disk_write+0x100>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SD_disk_write+0x32>
 8000aca:	2303      	movs	r3, #3
 8000acc:	e062      	b.n	8000b94 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <SD_disk_write+0x100>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SD_disk_write+0x44>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e059      	b.n	8000b94 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <SD_disk_write+0x104>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <SD_disk_write+0x56>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	025b      	lsls	r3, r3, #9
 8000af0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af2:	f7ff fcb9 	bl	8000468 <SELECT>

	if (count == 1)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d110      	bne.n	8000b1e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	2058      	movs	r0, #88	; 0x58
 8000b00:	f7ff fe13 	bl	800072a <SD_SendCmd>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d13a      	bne.n	8000b80 <SD_disk_write+0xe4>
 8000b0a:	21fe      	movs	r1, #254	; 0xfe
 8000b0c:	68b8      	ldr	r0, [r7, #8]
 8000b0e:	f7ff fdc9 	bl	80006a4 <SD_TxDataBlock>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d033      	beq.n	8000b80 <SD_disk_write+0xe4>
			count = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	e030      	b.n	8000b80 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <SD_disk_write+0x104>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2077      	movs	r0, #119	; 0x77
 8000b2e:	f7ff fdfc 	bl	800072a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	2057      	movs	r0, #87	; 0x57
 8000b36:	f7ff fdf8 	bl	800072a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2059      	movs	r0, #89	; 0x59
 8000b3e:	f7ff fdf4 	bl	800072a <SD_SendCmd>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11b      	bne.n	8000b80 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b48:	21fc      	movs	r1, #252	; 0xfc
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f7ff fdaa 	bl	80006a4 <SD_TxDataBlock>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00a      	beq.n	8000b6c <SD_disk_write+0xd0>
				buff += 512;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1ee      	bne.n	8000b48 <SD_disk_write+0xac>
 8000b6a:	e000      	b.n	8000b6e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b6c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b6e:	21fd      	movs	r1, #253	; 0xfd
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fd97 	bl	80006a4 <SD_TxDataBlock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b80:	f7ff fc82 	bl	8000488 <DESELECT>
	SPI_RxByte();
 8000b84:	f7ff fcc4 	bl	8000510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000060 	.word	0x20000060

08000ba4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SD_disk_ioctl+0x1e>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e115      	b.n	8000dee <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d124      	bne.n	8000c18 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d012      	beq.n	8000bfc <SD_disk_ioctl+0x58>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	dc1a      	bgt.n	8000c10 <SD_disk_ioctl+0x6c>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <SD_disk_ioctl+0x40>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d006      	beq.n	8000bf0 <SD_disk_ioctl+0x4c>
 8000be2:	e015      	b.n	8000c10 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be4:	f7ff fd1a 	bl	800061c <SD_PowerOff>
			res = RES_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bee:	e0fc      	b.n	8000dea <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf0:	f7ff fcd2 	bl	8000598 <SD_PowerOn>
			res = RES_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfa:	e0f6      	b.n	8000dea <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	1c5c      	adds	r4, r3, #1
 8000c00:	f7ff fd18 	bl	8000634 <SD_CheckPower>
 8000c04:	4603      	mov	r3, r0
 8000c06:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c0e:	e0ec      	b.n	8000dea <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c10:	2304      	movs	r3, #4
 8000c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c16:	e0e8      	b.n	8000dea <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c18:	4b77      	ldr	r3, [pc, #476]	; (8000df8 <SD_disk_ioctl+0x254>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SD_disk_ioctl+0x86>
 8000c26:	2303      	movs	r3, #3
 8000c28:	e0e1      	b.n	8000dee <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2a:	f7ff fc1d 	bl	8000468 <SELECT>

		switch (ctrl)
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b0d      	cmp	r3, #13
 8000c32:	f200 80cb 	bhi.w	8000dcc <SD_disk_ioctl+0x228>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <SD_disk_ioctl+0x98>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000d37 	.word	0x08000d37
 8000c40:	08000c75 	.word	0x08000c75
 8000c44:	08000d27 	.word	0x08000d27
 8000c48:	08000dcd 	.word	0x08000dcd
 8000c4c:	08000dcd 	.word	0x08000dcd
 8000c50:	08000dcd 	.word	0x08000dcd
 8000c54:	08000dcd 	.word	0x08000dcd
 8000c58:	08000dcd 	.word	0x08000dcd
 8000c5c:	08000dcd 	.word	0x08000dcd
 8000c60:	08000dcd 	.word	0x08000dcd
 8000c64:	08000dcd 	.word	0x08000dcd
 8000c68:	08000d49 	.word	0x08000d49
 8000c6c:	08000d6d 	.word	0x08000d6d
 8000c70:	08000d91 	.word	0x08000d91
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c74:	2100      	movs	r1, #0
 8000c76:	2049      	movs	r0, #73	; 0x49
 8000c78:	f7ff fd57 	bl	800072a <SD_SendCmd>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 80a8 	bne.w	8000dd4 <SD_disk_ioctl+0x230>
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2110      	movs	r1, #16
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fcdc 	bl	8000648 <SD_RxDataBlock>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 809e 	beq.w	8000dd4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c98:	7b3b      	ldrb	r3, [r7, #12]
 8000c9a:	099b      	lsrs	r3, r3, #6
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d10e      	bne.n	8000cc0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	7d3b      	ldrb	r3, [r7, #20]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cb6:	8bfb      	ldrh	r3, [r7, #30]
 8000cb8:	029a      	lsls	r2, r3, #10
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e02e      	b.n	8000d1e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc0:	7c7b      	ldrb	r3, [r7, #17]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	7dbb      	ldrb	r3, [r7, #22]
 8000cca:	09db      	lsrs	r3, r3, #7
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	7d7b      	ldrb	r3, [r7, #21]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 0306 	and.w	r3, r3, #6
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4413      	add	r3, r2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ce8:	7d3b      	ldrb	r3, [r7, #20]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	7cfb      	ldrb	r3, [r7, #19]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	7cbb      	ldrb	r3, [r7, #18]
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d10:	8bfa      	ldrh	r2, [r7, #30]
 8000d12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d16:	3b09      	subs	r3, #9
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d24:	e056      	b.n	8000dd4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d34:	e055      	b.n	8000de2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d36:	f7ff fc15 	bl	8000564 <SD_ReadyWait>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2bff      	cmp	r3, #255	; 0xff
 8000d3e:	d14b      	bne.n	8000dd8 <SD_disk_ioctl+0x234>
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d46:	e047      	b.n	8000dd8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2049      	movs	r0, #73	; 0x49
 8000d4c:	f7ff fced 	bl	800072a <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d142      	bne.n	8000ddc <SD_disk_ioctl+0x238>
 8000d56:	2110      	movs	r1, #16
 8000d58:	6a38      	ldr	r0, [r7, #32]
 8000d5a:	f7ff fc75 	bl	8000648 <SD_RxDataBlock>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d03b      	beq.n	8000ddc <SD_disk_ioctl+0x238>
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6a:	e037      	b.n	8000ddc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	204a      	movs	r0, #74	; 0x4a
 8000d70:	f7ff fcdb 	bl	800072a <SD_SendCmd>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d132      	bne.n	8000de0 <SD_disk_ioctl+0x23c>
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	6a38      	ldr	r0, [r7, #32]
 8000d7e:	f7ff fc63 	bl	8000648 <SD_RxDataBlock>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02b      	beq.n	8000de0 <SD_disk_ioctl+0x23c>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d8e:	e027      	b.n	8000de0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d90:	2100      	movs	r1, #0
 8000d92:	207a      	movs	r0, #122	; 0x7a
 8000d94:	f7ff fcc9 	bl	800072a <SD_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da4:	e00b      	b.n	8000dbe <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000da6:	6a3c      	ldr	r4, [r7, #32]
 8000da8:	1c63      	adds	r3, r4, #1
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	f7ff fbb0 	bl	8000510 <SPI_RxByte>
 8000db0:	4603      	mov	r3, r0
 8000db2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db8:	3301      	adds	r3, #1
 8000dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d9ef      	bls.n	8000da6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd2:	e006      	b.n	8000de2 <SD_disk_ioctl+0x23e>
			break;
 8000dd4:	bf00      	nop
 8000dd6:	e004      	b.n	8000de2 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e002      	b.n	8000de2 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e000      	b.n	8000de2 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
		}

		DESELECT();
 8000de2:	f7ff fb51 	bl	8000488 <DESELECT>
		SPI_RxByte();
 8000de6:	f7ff fb93 	bl	8000510 <SPI_RxByte>
	}

	return res;
 8000dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	372c      	adds	r7, #44	; 0x2c
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6858      	ldr	r0, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8adb      	ldrh	r3, [r3, #22]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	f001 fa7f 	bl	8002324 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	1cf9      	adds	r1, r7, #3
 8000e30:	2201      	movs	r2, #1
 8000e32:	f002 f871 	bl	8002f18 <HAL_SPI_Transmit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f107 010f 	add.w	r1, r7, #15
 8000e46:	2201      	movs	r2, #1
 8000e48:	f002 f9a2 	bl	8003190 <HAL_SPI_Receive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6858      	ldr	r0, [r3, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	8adb      	ldrh	r3, [r3, #22]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f001 fa62 	bl	8002324 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	460b      	mov	r3, r1
 8000e74:	70fb      	strb	r3, [r7, #3]
 8000e76:	4613      	mov	r3, r2
 8000e78:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e80:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000e82:	78bb      	ldrb	r3, [r7, #2]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6858      	ldr	r0, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	8adb      	ldrh	r3, [r3, #22]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f001 fa40 	bl	8002324 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f107 010a 	add.w	r1, r7, #10
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	f002 f831 	bl	8002f18 <HAL_SPI_Transmit>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6858      	ldr	r0, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	8adb      	ldrh	r3, [r3, #22]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f001 fa2d 	bl	8002324 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b088      	sub	sp, #32
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	4611      	mov	r1, r2
 8000ede:	461a      	mov	r2, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6858      	ldr	r0, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	8adb      	ldrh	r3, [r3, #22]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f001 fa14 	bl	8002324 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f107 0117 	add.w	r1, r7, #23
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f002 f805 	bl	8002f18 <HAL_SPI_Transmit>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d108      	bne.n	8000f2a <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fbe8 	bl	80036f8 <HAL_SPI_Transmit_DMA>
 8000f28:	e012      	b.n	8000f50 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	f001 ffee 	bl	8002f18 <HAL_SPI_Transmit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6858      	ldr	r0, [r3, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8adb      	ldrh	r3, [r3, #22]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f001 f9ea 	bl	8002324 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff7b 	bl	8000e6a <write_register>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f8c:	d801      	bhi.n	8000f92 <set_OCP+0x16>
    imax = 45;
 8000f8e:	232d      	movs	r3, #45	; 0x2d
 8000f90:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2bf0      	cmp	r3, #240	; 0xf0
 8000f96:	d901      	bls.n	8000f9c <set_OCP+0x20>
    imax = 240;
 8000f98:	23f0      	movs	r3, #240	; 0xf0
 8000f9a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b81      	cmp	r3, #129	; 0x81
 8000fa0:	d809      	bhi.n	8000fb6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	3b2d      	subs	r3, #45	; 0x2d
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <set_OCP+0x68>)
 8000fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fac:	1052      	asrs	r2, r2, #1
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e008      	b.n	8000fc8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	331e      	adds	r3, #30
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <set_OCP+0x68>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1092      	asrs	r2, r2, #2
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	210b      	movs	r1, #11
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff48 	bl	8000e6a <write_register>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	66666667 	.word	0x66666667

08000fe8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000ff0:	211d      	movs	r1, #29
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff02 	bl	8000dfc <read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2200      	movs	r2, #0
 8001002:	461c      	mov	r4, r3
 8001004:	4615      	mov	r5, r2
 8001006:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800100a:	211e      	movs	r1, #30
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fef5 	bl	8000dfc <read_register>
 8001012:	4603      	mov	r3, r0
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001018:	2304      	movs	r3, #4
 800101a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d908      	bls.n	8001034 <set_low_data_rate_optimization+0x4c>
 8001022:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001026:	1fd1      	subs	r1, r2, #7
 8001028:	430b      	orrs	r3, r1
 800102a:	d103      	bne.n	8001034 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001034:	7ffb      	ldrb	r3, [r7, #31]
 8001036:	461a      	mov	r2, r3
 8001038:	2126      	movs	r1, #38	; 0x26
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff15 	bl	8000e6a <write_register>
}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}

08001048 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff7f 	bl	8000f56 <set_mode>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001068:	2101      	movs	r1, #1
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff73 	bl	8000f56 <set_mode>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001080:	211d      	movs	r1, #29
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff feba 	bl	8000dfc <read_register>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	461a      	mov	r2, r3
 8001098:	211d      	movs	r1, #29
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fee5 	bl	8000e6a <write_register>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10e      	bne.n	80010da <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d901      	bls.n	80010c6 <lora_set_tx_power+0x1e>
      level = 15;
 80010c2:	230f      	movs	r3, #15
 80010c4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	2109      	movs	r1, #9
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fec9 	bl	8000e6a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80010d8:	e02e      	b.n	8001138 <lora_set_tx_power+0x90>
    if (level > 20) {
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b14      	cmp	r3, #20
 80010de:	d901      	bls.n	80010e4 <lora_set_tx_power+0x3c>
      level = 20;
 80010e0:	2314      	movs	r3, #20
 80010e2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d801      	bhi.n	80010ee <lora_set_tx_power+0x46>
      level = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b11      	cmp	r3, #17
 80010f2:	d90c      	bls.n	800110e <lora_set_tx_power+0x66>
      level -= 3;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	3b03      	subs	r3, #3
 80010f8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80010fa:	2287      	movs	r2, #135	; 0x87
 80010fc:	214d      	movs	r1, #77	; 0x4d
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff feb3 	bl	8000e6a <write_register>
      set_OCP(lora, 140);
 8001104:	218c      	movs	r1, #140	; 0x8c
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff38 	bl	8000f7c <set_OCP>
 800110c:	e008      	b.n	8001120 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800110e:	2284      	movs	r2, #132	; 0x84
 8001110:	214d      	movs	r1, #77	; 0x4d
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fea9 	bl	8000e6a <write_register>
      set_OCP(lora, 97);
 8001118:	2161      	movs	r1, #97	; 0x61
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff2e 	bl	8000f7c <set_OCP>
    level -= 2;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	3b02      	subs	r3, #2
 8001124:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2109      	movs	r1, #9
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fe99 	bl	8000e6a <write_register>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 800114c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	f04f 0100 	mov.w	r1, #0
 8001158:	04d9      	lsls	r1, r3, #19
 800115a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800115e:	04d0      	lsls	r0, r2, #19
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <lora_set_frequency+0x88>)
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	f7fe fffb 	bl	8000160 <__aeabi_uldivmod>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	0c02      	lsrs	r2, r0, #16
 8001180:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001184:	0c0b      	lsrs	r3, r1, #16
 8001186:	b2d3      	uxtb	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	2106      	movs	r1, #6
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fe6c 	bl	8000e6a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	0a02      	lsrs	r2, r0, #8
 80011a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011a4:	0a0b      	lsrs	r3, r1, #8
 80011a6:	b2d3      	uxtb	r3, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	2107      	movs	r1, #7
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fe5c 	bl	8000e6a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80011b2:	7c3b      	ldrb	r3, [r7, #16]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2108      	movs	r1, #8
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff fe56 	bl	8000e6a <write_register>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	01e84800 	.word	0x01e84800

080011cc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d802      	bhi.n	80011e4 <lora_set_spreading_factor+0x18>
    sf = 6;
 80011de:	2306      	movs	r3, #6
 80011e0:	70fb      	strb	r3, [r7, #3]
 80011e2:	e004      	b.n	80011ee <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d901      	bls.n	80011ee <lora_set_spreading_factor+0x22>
    sf = 12;
 80011ea:	230c      	movs	r3, #12
 80011ec:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d10a      	bne.n	800120a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80011f4:	22c5      	movs	r2, #197	; 0xc5
 80011f6:	2131      	movs	r1, #49	; 0x31
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe36 	bl	8000e6a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80011fe:	220c      	movs	r2, #12
 8001200:	2137      	movs	r1, #55	; 0x37
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe31 	bl	8000e6a <write_register>
 8001208:	e009      	b.n	800121e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800120a:	22c3      	movs	r2, #195	; 0xc3
 800120c:	2131      	movs	r1, #49	; 0x31
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fe2b 	bl	8000e6a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001214:	220a      	movs	r2, #10
 8001216:	2137      	movs	r1, #55	; 0x37
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe26 	bl	8000e6a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800121e:	211e      	movs	r1, #30
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fdeb 	bl	8000dfc <read_register>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	b25a      	sxtb	r2, r3
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	461a      	mov	r2, r3
 8001244:	211e      	movs	r1, #30
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe0f 	bl	8000e6a <write_register>

  set_low_data_rate_optimization(lora);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fecb 	bl	8000fe8 <set_low_data_rate_optimization>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	b29b      	uxth	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	2120      	movs	r1, #32
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fdf9 	bl	8000e6a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	2121      	movs	r1, #33	; 0x21
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fdef 	bl	8000e6a <write_register>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 800129c:	2142      	movs	r1, #66	; 0x42
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fdac 	bl	8000dfc <read_register>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80012b6:	2101      	movs	r1, #1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fd9f 	bl	8000dfc <read_register>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d101      	bne.n	80012d0 <lora_is_transmitting+0x22>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e000      	b.n	80012d2 <lora_is_transmitting+0x24>
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	4611      	mov	r1, r2
 80012e6:	461a      	mov	r2, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff ffdc 	bl	80012ae <lora_is_transmitting>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80012fc:	2305      	movs	r3, #5
 80012fe:	e02a      	b.n	8001356 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001300:	2101      	movs	r1, #1
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fe27 	bl	8000f56 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f83a 	bl	8001382 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7d1b      	ldrb	r3, [r3, #20]
 8001312:	461a      	mov	r2, r3
 8001314:	210d      	movs	r1, #13
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fda7 	bl	8000e6a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	7d1b      	ldrb	r3, [r3, #20]
 8001320:	461a      	mov	r2, r3
 8001322:	210e      	movs	r1, #14
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff fda0 	bl	8000e6a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	461a      	mov	r2, r3
 800132e:	2122      	movs	r1, #34	; 0x22
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff fd9a 	bl	8000e6a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff fdc8 	bl	8000ed2 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <lora_send_packet_base+0x72>
    return LORA_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	e004      	b.n	8001356 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 800134c:	2103      	movs	r1, #3
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff fe01 	bl	8000f56 <set_mode>
  return LORA_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	4613      	mov	r3, r2
 800136a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	2302      	movs	r3, #2
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ffb1 	bl	80012da <lora_send_packet_base>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800138a:	2208      	movs	r2, #8
 800138c:	2112      	movs	r1, #18
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fd6b 	bl	8000e6a <write_register>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff ff59 	bl	8001294 <lora_version>
 80013e2:	4603      	mov	r3, r0
 80013e4:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d001      	beq.n	80013f0 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80013ec:	2304      	movs	r3, #4
 80013ee:	e031      	b.n	8001454 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fe29 	bl	8001048 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff fe26 	bl	8001048 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80013fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe9d 	bl	8001140 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001406:	2107      	movs	r1, #7
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fedf 	bl	80011cc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800140e:	210a      	movs	r1, #10
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff ff22 	bl	800125a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fe2e 	bl	8001078 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 800141c:	210c      	movs	r1, #12
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff fcec 	bl	8000dfc <read_register>
 8001424:	4603      	mov	r3, r0
 8001426:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	f043 0303 	orr.w	r3, r3, #3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	210c      	movs	r1, #12
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fd18 	bl	8000e6a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 800143a:	2204      	movs	r2, #4
 800143c:	2126      	movs	r1, #38	; 0x26
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fd13 	bl	8000e6a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001444:	2111      	movs	r1, #17
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fe2e 	bl	80010a8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff fe07 	bl	8001060 <lora_mode_standby>

  return LORA_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <send_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char *string){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7fe fe73 	bl	8000150 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*)string, len, 2000);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	b29a      	uxth	r2, r3
 8001472:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <send_uart+0x2c>)
 800147a:	f002 fbd4 	bl	8003c26 <HAL_UART_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000168 	.word	0x20000168
 800148c:	00000000 	.word	0x00000000

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f000 fbcb 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f8bd 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f000 f9bf 	bl	8001820 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a2:	f000 f8f9 	bl	8001698 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014a6:	f000 f925 	bl	80016f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80014aa:	f000 f959 	bl	8001760 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80014ae:	f000 f98d 	bl	80017cc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80014b2:	f002 fd23 	bl	8003efc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  send_uart("Mounting File System and Opening File !!!\r\n");
 80014b6:	4842      	ldr	r0, [pc, #264]	; (80015c0 <main+0x130>)
 80014b8:	f7ff ffd0 	bl	800145c <send_uart>
  while((f_mount(&fs, "", 0)) != FR_OK){
 80014bc:	e002      	b.n	80014c4 <main+0x34>
	  send_uart("Mounting File System Failed...try to reset the mcu !!!\r\n");
 80014be:	4841      	ldr	r0, [pc, #260]	; (80015c4 <main+0x134>)
 80014c0:	f7ff ffcc 	bl	800145c <send_uart>
  while((f_mount(&fs, "", 0)) != FR_OK){
 80014c4:	2200      	movs	r2, #0
 80014c6:	4940      	ldr	r1, [pc, #256]	; (80015c8 <main+0x138>)
 80014c8:	4840      	ldr	r0, [pc, #256]	; (80015cc <main+0x13c>)
 80014ca:	f005 f9ed 	bl	80068a8 <f_mount>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f4      	bne.n	80014be <main+0x2e>
  }
  while((f_open(&fil, "LORA-TX_LOG.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ)) != FR_OK){
 80014d4:	e002      	b.n	80014dc <main+0x4c>
	  send_uart("Opening File Failed...try to reset the mcu !!!\r\n");
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <main+0x140>)
 80014d8:	f7ff ffc0 	bl	800145c <send_uart>
  while((f_open(&fil, "LORA-TX_LOG.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ)) != FR_OK){
 80014dc:	2213      	movs	r2, #19
 80014de:	493d      	ldr	r1, [pc, #244]	; (80015d4 <main+0x144>)
 80014e0:	483d      	ldr	r0, [pc, #244]	; (80015d8 <main+0x148>)
 80014e2:	f005 fa2b 	bl	800693c <f_open>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f4      	bne.n	80014d6 <main+0x46>
  }

  while((lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, 923*1000000)) != LORA_OK){
 80014ec:	e002      	b.n	80014f4 <main+0x64>
	  send_uart("Initialize LoRa Failed...try to reset the mcu !!!\r\n");
 80014ee:	483b      	ldr	r0, [pc, #236]	; (80015dc <main+0x14c>)
 80014f0:	f7ff ffb4 	bl	800145c <send_uart>
  while((lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, 923*1000000)) != LORA_OK){
 80014f4:	a330      	add	r3, pc, #192	; (adr r3, 80015b8 <main+0x128>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	e9cd 2300 	strd	r2, r3, [sp]
 80014fe:	2310      	movs	r3, #16
 8001500:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <main+0x150>)
 8001502:	4938      	ldr	r1, [pc, #224]	; (80015e4 <main+0x154>)
 8001504:	4838      	ldr	r0, [pc, #224]	; (80015e8 <main+0x158>)
 8001506:	f7ff ff49 	bl	800139c <lora_init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <main+0x5e>
  }
  send_uart("Initialize LoRa Success\r\n");
 8001510:	4836      	ldr	r0, [pc, #216]	; (80015ec <main+0x15c>)
 8001512:	f7ff ffa3 	bl	800145c <send_uart>
  send_uart("++++++++++++++++++++++\r\n");
 8001516:	4836      	ldr	r0, [pc, #216]	; (80015f0 <main+0x160>)
 8001518:	f7ff ffa0 	bl	800145c <send_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  while (i<100)
 8001520:	e032      	b.n	8001588 <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  resLORA = lora_send_packet(&lora, (uint8_t *)message, sizeof(message));
 8001522:	2219      	movs	r2, #25
 8001524:	4933      	ldr	r1, [pc, #204]	; (80015f4 <main+0x164>)
 8001526:	4830      	ldr	r0, [pc, #192]	; (80015e8 <main+0x158>)
 8001528:	f7ff ff19 	bl	800135e <lora_send_packet>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <main+0x168>)
 8001532:	701a      	strb	r2, [r3, #0]
	  if(resLORA != LORA_OK){
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <main+0x168>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <main+0xb4>
		  send_uart("Failed to sent package !!!\r\n");
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <main+0x16c>)
 800153e:	f7ff ff8d 	bl	800145c <send_uart>
 8001542:	e01e      	b.n	8001582 <main+0xf2>
	  }else{
		  f_puts("Message sent : ", &fil);
 8001544:	4924      	ldr	r1, [pc, #144]	; (80015d8 <main+0x148>)
 8001546:	482e      	ldr	r0, [pc, #184]	; (8001600 <main+0x170>)
 8001548:	f006 f87f 	bl	800764a <f_puts>
		  f_puts(message, &fil);
 800154c:	4922      	ldr	r1, [pc, #136]	; (80015d8 <main+0x148>)
 800154e:	4829      	ldr	r0, [pc, #164]	; (80015f4 <main+0x164>)
 8001550:	f006 f87b 	bl	800764a <f_puts>
		  f_puts(" --> ", &fil);
 8001554:	4920      	ldr	r1, [pc, #128]	; (80015d8 <main+0x148>)
 8001556:	482b      	ldr	r0, [pc, #172]	; (8001604 <main+0x174>)
 8001558:	f006 f877 	bl	800764a <f_puts>
		  f_puts(resLORA, &fil);
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <main+0x168>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	491d      	ldr	r1, [pc, #116]	; (80015d8 <main+0x148>)
 8001562:	4618      	mov	r0, r3
 8001564:	f006 f871 	bl	800764a <f_puts>
		  f_puts("\r\n", &fil);
 8001568:	491b      	ldr	r1, [pc, #108]	; (80015d8 <main+0x148>)
 800156a:	4827      	ldr	r0, [pc, #156]	; (8001608 <main+0x178>)
 800156c:	f006 f86d 	bl	800764a <f_puts>

		  send_uart("Data Sent : ");
 8001570:	4826      	ldr	r0, [pc, #152]	; (800160c <main+0x17c>)
 8001572:	f7ff ff73 	bl	800145c <send_uart>
		  send_uart(message);
 8001576:	481f      	ldr	r0, [pc, #124]	; (80015f4 <main+0x164>)
 8001578:	f7ff ff70 	bl	800145c <send_uart>
		  send_uart("\r\n");
 800157c:	4822      	ldr	r0, [pc, #136]	; (8001608 <main+0x178>)
 800157e:	f7ff ff6d 	bl	800145c <send_uart>
	  }
	  i++;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3301      	adds	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  while (i<100)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b63      	cmp	r3, #99	; 0x63
 800158c:	ddc9      	ble.n	8001522 <main+0x92>
  }

  f_close(&fil);
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <main+0x148>)
 8001590:	f005 fff3 	bl	800757a <f_close>
  send_uart("Closing File...Please Wait\r\n");
 8001594:	481e      	ldr	r0, [pc, #120]	; (8001610 <main+0x180>)
 8001596:	f7ff ff61 	bl	800145c <send_uart>
  HAL_Delay(5000);
 800159a:	f241 3088 	movw	r0, #5000	; 0x1388
 800159e:	f000 fba9 	bl	8001cf4 <HAL_Delay>
  send_uart("ALL DONE !!!\r\n");
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <main+0x184>)
 80015a4:	f7ff ff5a 	bl	800145c <send_uart>
 80015a8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	3703dcc0 	.word	0x3703dcc0
 80015bc:	00000000 	.word	0x00000000
 80015c0:	080078b0 	.word	0x080078b0
 80015c4:	080078dc 	.word	0x080078dc
 80015c8:	08007918 	.word	0x08007918
 80015cc:	200001ac 	.word	0x200001ac
 80015d0:	0800791c 	.word	0x0800791c
 80015d4:	08007950 	.word	0x08007950
 80015d8:	200011dc 	.word	0x200011dc
 80015dc:	08007960 	.word	0x08007960
 80015e0:	40010800 	.word	0x40010800
 80015e4:	200000b8 	.word	0x200000b8
 80015e8:	2000220c 	.word	0x2000220c
 80015ec:	08007994 	.word	0x08007994
 80015f0:	080079b0 	.word	0x080079b0
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20002208 	.word	0x20002208
 80015fc:	080079cc 	.word	0x080079cc
 8001600:	080079ec 	.word	0x080079ec
 8001604:	080079fc 	.word	0x080079fc
 8001608:	08007a04 	.word	0x08007a04
 800160c:	08007a08 	.word	0x08007a08
 8001610:	08007a18 	.word	0x08007a18
 8001614:	08007a38 	.word	0x08007a38

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b090      	sub	sp, #64	; 0x40
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f006 f92e 	bl	8007888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163e:	2301      	movs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001642:	2310      	movs	r3, #16
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800164e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f000 ffbf 	bl	80025dc <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001664:	f000 f930 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2101      	movs	r1, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fa2d 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800168c:	f000 f91c 	bl	80018c8 <Error_Handler>
  }
}
 8001690:	bf00      	nop
 8001692:	3740      	adds	r7, #64	; 0x40
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f000 fe3d 	bl	8002354 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 f8f2 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000064 	.word	0x20000064
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_SPI1_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <MX_SPI1_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_SPI1_Init+0x64>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_SPI1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_SPI1_Init+0x64>)
 8001720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SPI1_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <MX_SPI1_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SPI1_Init+0x64>)
 8001740:	220a      	movs	r2, #10
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_SPI1_Init+0x64>)
 8001746:	f001 fb63 	bl	8002e10 <HAL_SPI_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001750:	f000 f8ba 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200000b8 	.word	0x200000b8
 800175c:	40013000 	.word	0x40013000

08001760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_SPI2_Init+0x64>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MX_SPI2_Init+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI2_Init+0x64>)
 800176c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI2_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_SPI2_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI2_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI2_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI2_Init+0x64>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI2_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_SPI2_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI2_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_SPI2_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI2_Init+0x64>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_SPI2_Init+0x64>)
 80017b2:	f001 fb2d 	bl	8002e10 <HAL_SPI_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017bc:	f000 f884 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000110 	.word	0x20000110
 80017c8:	40003800 	.word	0x40003800

080017cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_USART1_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USART1_UART_Init+0x4c>)
 8001804:	f002 f9c2 	bl	8003b8c <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f000 f85b 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000168 	.word	0x20000168
 800181c:	40013800 	.word	0x40013800

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_GPIO_Init+0x9c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <MX_GPIO_Init+0x9c>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_GPIO_Init+0x9c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_GPIO_Init+0x9c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <MX_GPIO_Init+0x9c>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_GPIO_Init+0x9c>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_GPIO_Init+0xa0>)
 800186a:	f000 fd5b 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <MX_GPIO_Init+0xa4>)
 8001876:	f000 fd55 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 800187a:	2310      	movs	r3, #16
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2302      	movs	r3, #2
 8001888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <MX_GPIO_Init+0xa0>)
 8001892:	f000 fbc3 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2302      	movs	r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	4619      	mov	r1, r3
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_GPIO_Init+0xa4>)
 80018b0:	f000 fbb4 	bl	800201c <HAL_GPIO_Init>

}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_I2C_MspInit+0x70>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d123      	bne.n	80019a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_I2C_MspInit+0x74>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HAL_I2C_MspInit+0x78>)
 8001984:	f000 fb4a 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800198e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001992:	61d3      	str	r3, [r2, #28]
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_I2C_MspInit+0x74>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_SPI_MspInit+0xf8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d130      	bne.n	8001a36 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a04:	23a0      	movs	r3, #160	; 0xa0
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4619      	mov	r1, r3
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <HAL_SPI_MspInit+0x100>)
 8001a18:	f000 fb00 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4821      	ldr	r0, [pc, #132]	; (8001ab4 <HAL_SPI_MspInit+0x100>)
 8001a30:	f000 faf4 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a34:	e036      	b.n	8001aa4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_SPI_MspInit+0x104>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d131      	bne.n	8001aa4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	61d3      	str	r3, [r2, #28]
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_SPI_MspInit+0xfc>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a70:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <HAL_SPI_MspInit+0x108>)
 8001a86:	f000 fac9 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <HAL_SPI_MspInit+0x108>)
 8001aa0:	f000 fabc 	bl	800201c <HAL_GPIO_Init>
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013000 	.word	0x40013000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40003800 	.word	0x40003800
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d131      	bne.n	8001b44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4619      	mov	r1, r3
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_UART_MspInit+0x94>)
 8001b26:	f000 fa79 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_UART_MspInit+0x94>)
 8001b40:	f000 fa6c 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010800 	.word	0x40010800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <SysTick_Handler+0x34>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <SysTick_Handler+0x18>
		Timer1--;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <SysTick_Handler+0x34>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <SysTick_Handler+0x34>)
 8001bb2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <SysTick_Handler+0x38>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <SysTick_Handler+0x2c>
		Timer2--;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SysTick_Handler+0x38>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <SysTick_Handler+0x38>)
 8001bc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f878 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000005c 	.word	0x2000005c
 8001bd4:	2000005e 	.word	0x2000005e

08001bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c0a:	f7ff ffe5 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f005 fe17 	bl	8007840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c12:	f7ff fc3d 	bl	8001490 <main>
  bx lr
 8001c16:	4770      	bx	lr
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001c20:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 8001c24:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001c28:	2000245c 	.word	0x2000245c

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x28>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x28>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f92b 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fe42 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f935 	bl	8001eea <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f90b 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000020 	.word	0x20000020
 8001cb4:	20000028 	.word	0x20000028
 8001cb8:	20000024 	.word	0x20000024

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x20>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000028 	.word	0x20000028
 8001cdc:	20002224 	.word	0x20002224

08001ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_GetTick+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20002224 	.word	0x20002224

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffe0 	bl	8001ce0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000028 	.word	0x20000028

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff49 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff5e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffb0 	bl	8001e58 <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Start_IT+0x20>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e04a      	b.n	8001fb8 <HAL_DMA_Start_IT+0xb6>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d13a      	bne.n	8001faa <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f831 	bl	8001fc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 020e 	orr.w	r2, r2, #14
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e00f      	b.n	8001f98 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020a 	orr.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e005      	b.n	8001fb6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d108      	bne.n	8002000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ffe:	e007      	b.n	8002010 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	; 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	; (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	; 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e12b      	b.n	80025be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fadc 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b8:	f000 fce4 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a81      	ldr	r2, [pc, #516]	; (80025c8 <HAL_I2C_Init+0x274>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d807      	bhi.n	80023d8 <HAL_I2C_Init+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_I2C_Init+0x278>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e006      	b.n	80023e6 <HAL_I2C_Init+0x92>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a7d      	ldr	r2, [pc, #500]	; (80025d0 <HAL_I2C_Init+0x27c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e7      	b.n	80025be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a78      	ldr	r2, [pc, #480]	; (80025d4 <HAL_I2C_Init+0x280>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_I2C_Init+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d802      	bhi.n	8002428 <HAL_I2C_Init+0xd4>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	e009      	b.n	800243c <HAL_I2C_Init+0xe8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_I2C_Init+0x284>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800244e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	495c      	ldr	r1, [pc, #368]	; (80025c8 <HAL_I2C_Init+0x274>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d819      	bhi.n	8002490 <HAL_I2C_Init+0x13c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e59      	subs	r1, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fbb1 f3f3 	udiv	r3, r1, r3
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002470:	400b      	ands	r3, r1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_I2C_Init+0x138>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e59      	subs	r1, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fbb1 f3f3 	udiv	r3, r1, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248a:	e051      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e04f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_I2C_Init+0x168>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e012      	b.n	80024e2 <HAL_I2C_Init+0x18e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x196>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e022      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_I2C_Init+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e58      	subs	r0, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	440b      	add	r3, r1
 8002500:	fbb0 f3f3 	udiv	r3, r0, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	0099      	lsls	r1, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	fbb0 f3f3 	udiv	r3, r0, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800255e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6911      	ldr	r1, [r2, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000186a0 	.word	0x000186a0
 80025cc:	001e847f 	.word	0x001e847f
 80025d0:	003d08ff 	.word	0x003d08ff
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e272      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fc:	4b92      	ldr	r3, [pc, #584]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00c      	beq.n	8002622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002608:	4b8f      	ldr	r3, [pc, #572]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d112      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
 8002614:	4b8c      	ldr	r3, [pc, #560]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002620:	d10b      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002622:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d06c      	beq.n	8002708 <HAL_RCC_OscConfig+0x12c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d168      	bne.n	8002708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e24c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x76>
 8002644:	4b80      	ldr	r3, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7f      	ldr	r2, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b7b      	ldr	r3, [pc, #492]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7a      	ldr	r2, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b78      	ldr	r3, [pc, #480]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xbc>
 800267e:	4b72      	ldr	r3, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002698:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a67      	ldr	r2, [pc, #412]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fb12 	bl	8001ce0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fb0e 	bl	8001ce0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e200      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe4>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fafe 	bl	8001ce0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fafa 	bl	8001ce0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1ec      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x10c>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4939      	ldr	r1, [pc, #228]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff fab3 	bl	8001ce0 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff faaf 	bl	8001ce0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4927      	ldr	r1, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fa92 	bl	8001ce0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff fa8e 	bl	8001ce0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e180      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03a      	beq.n	8002860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fa72 	bl	8001ce0 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fa6e 	bl	8001ce0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e160      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fad8 	bl	8002dd4 <RCC_Delay>
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7ff fa58 	bl	8001ce0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002832:	e00f      	b.n	8002854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7ff fa54 	bl	8001ce0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d908      	bls.n	8002854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e146      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	42420000 	.word	0x42420000
 8002850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e9      	bne.n	8002834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a6 	beq.w	80029ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a87      	ldr	r2, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	; (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7ff fa15 	bl	8001ce0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7ff fa11 	bl	8001ce0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	; 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e103      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x312>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	e02d      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x334>
 80028f6:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x356>
 8002918:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a5d      	ldr	r2, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002932:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a57      	ldr	r2, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7ff f9c5 	bl	8001ce0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7ff f9c1 	bl	8001ce0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0b1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x37e>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7ff f9af 	bl	8001ce0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff f9ab 	bl	8001ce0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8087 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d061      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d146      	bne.n	8002a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7ff f97f 	bl	8001ce0 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7ff f97b 	bl	8001ce0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e06d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4921      	ldr	r1, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	430b      	orrs	r3, r1
 8002a32:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff f94f 	bl	8001ce0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff f94b 	bl	8001ce0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e03d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46a>
 8002a64:	e035      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f938 	bl	8001ce0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f934 	bl	8001ce0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e026      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x498>
 8002a92:	e01e      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e019      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_OscConfig+0x500>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d0      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4965      	ldr	r1, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d040      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4936      	ldr	r1, [pc, #216]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff f886 	bl	8001ce0 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7ff f882 	bl	8001ce0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e053      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d210      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1cc>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ffe4 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08007aa0 	.word	0x08007aa0
 8002cac:	20000020 	.word	0x20000020
 8002cb0:	20000024 	.word	0x20000024

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b490      	push	{r4, r7}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cbc:	1d3c      	adds	r4, r7, #4
 8002cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc4:	f240 2301 	movw	r3, #513	; 0x201
 8002cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x46>
 8002cf2:	e02b      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	e02b      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3328      	adds	r3, #40	; 0x28
 8002d04:	443b      	add	r3, r7
 8002d06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0c5b      	lsrs	r3, r3, #17
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	3328      	adds	r3, #40	; 0x28
 8002d22:	443b      	add	r3, r7
 8002d24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3728      	adds	r7, #40	; 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc90      	pop	{r4, r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	08007a48 	.word	0x08007a48
 8002d64:	40021000 	.word	0x40021000
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	003d0900 	.word	0x003d0900

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000020 	.word	0x20000020

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff2 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08007ab0 	.word	0x08007ab0

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db0:	f7ff ffde 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08007ab0 	.word	0x08007ab0

08002dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <RCC_Delay+0x34>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <RCC_Delay+0x38>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0a5b      	lsrs	r3, r3, #9
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df0:	bf00      	nop
  }
  while (Delay --);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	60fa      	str	r2, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f9      	bne.n	8002df0 <RCC_Delay+0x1c>
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000020 	.word	0x20000020
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e076      	b.n	8002f10 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e32:	d009      	beq.n	8002e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
 8002e3a:	e005      	b.n	8002e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fda6 	bl	80019b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	ea42 0103 	orr.w	r1, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	0c1a      	lsrs	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f002 0204 	and.w	r2, r2, #4
 8002eee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_SPI_Transmit+0x22>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e126      	b.n	8003188 <HAL_SPI_Transmit+0x270>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f42:	f7fe fecd 	bl	8001ce0 <HAL_GetTick>
 8002f46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f5c:	e10b      	b.n	8003176 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Transmit+0x52>
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f6e:	e102      	b.n	8003176 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2203      	movs	r2, #3
 8002f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d007      	beq.n	8002ff6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d14b      	bne.n	8003098 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_Transmit+0xf6>
 8003008:	8afb      	ldrh	r3, [r7, #22]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d13e      	bne.n	800308c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003032:	e02b      	b.n	800308c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d112      	bne.n	8003068 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	1c9a      	adds	r2, r3, #2
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	; 0x36
 8003066:	e011      	b.n	800308c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003068:	f7fe fe3a 	bl	8001ce0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d803      	bhi.n	8003080 <HAL_SPI_Transmit+0x168>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d102      	bne.n	8003086 <HAL_SPI_Transmit+0x16e>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	77fb      	strb	r3, [r7, #31]
          goto error;
 800308a:	e074      	b.n	8003176 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ce      	bne.n	8003034 <HAL_SPI_Transmit+0x11c>
 8003096:	e04c      	b.n	8003132 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_Transmit+0x18e>
 80030a0:	8afb      	ldrh	r3, [r7, #22]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d140      	bne.n	8003128 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030cc:	e02c      	b.n	8003128 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d113      	bne.n	8003104 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	86da      	strh	r2, [r3, #54]	; 0x36
 8003102:	e011      	b.n	8003128 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003104:	f7fe fdec 	bl	8001ce0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_Transmit+0x204>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_Transmit+0x20a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003126:	e026      	b.n	8003176 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1cd      	bne.n	80030ce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fd0a 	bl	8003b50 <SPI_EndRxTxTransaction>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e000      	b.n	8003176 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003186:	7ffb      	ldrb	r3, [r7, #31]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ac:	d112      	bne.n	80031d4 <HAL_SPI_Receive+0x44>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2204      	movs	r2, #4
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8f1 	bl	80033b2 <HAL_SPI_TransmitReceive>
 80031d0:	4603      	mov	r3, r0
 80031d2:	e0ea      	b.n	80033aa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_SPI_Receive+0x52>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0e3      	b.n	80033aa <HAL_SPI_Receive+0x21a>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ea:	f7fe fd79 	bl	8001ce0 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003200:	e0ca      	b.n	8003398 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Receive+0x7e>
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003212:	e0c1      	b.n	8003398 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2204      	movs	r2, #4
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325a:	d10f      	bne.n	800327c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d007      	beq.n	800329a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d162      	bne.n	8003368 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032a2:	e02e      	b.n	8003302 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f103 020c 	add.w	r2, r3, #12
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032dc:	e011      	b.n	8003302 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032de:	f7fe fcff 	bl	8001ce0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d803      	bhi.n	80032f6 <HAL_SPI_Receive+0x166>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_Receive+0x16c>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003300:	e04a      	b.n	8003398 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1cb      	bne.n	80032a4 <HAL_SPI_Receive+0x114>
 800330c:	e031      	b.n	8003372 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d113      	bne.n	8003344 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	b292      	uxth	r2, r2
 8003328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003342:	e011      	b.n	8003368 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003344:	f7fe fccc 	bl	8001ce0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d803      	bhi.n	800335c <HAL_SPI_Receive+0x1cc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d102      	bne.n	8003362 <HAL_SPI_Receive+0x1d2>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003366:	e017      	b.n	8003398 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cd      	bne.n	800330e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fb98 	bl	8003aac <SPI_EndRxTransaction>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
 8003394:	e000      	b.n	8003398 <HAL_SPI_Receive+0x208>
  }

error :
 8003396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08c      	sub	sp, #48	; 0x30
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033c0:	2301      	movs	r3, #1
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x26>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e18a      	b.n	80036ee <HAL_SPI_TransmitReceive+0x33c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e0:	f7fe fc7e 	bl	8001ce0 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d00f      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x70>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003408:	d107      	bne.n	800341a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_SPI_TransmitReceive+0x68>
 8003412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003420:	e15b      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x82>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x82>
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800343a:	e14e      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b04      	cmp	r3, #4
 8003446:	d003      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2205      	movs	r2, #5
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d007      	beq.n	80034a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ac:	d178      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x10a>
 80034b6:	8b7b      	ldrh	r3, [r7, #26]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d166      	bne.n	800358a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c9a      	adds	r2, r3, #2
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e0:	e053      	b.n	800358a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d11b      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x176>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x176>
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d113      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d119      	bne.n	800356a <HAL_SPI_TransmitReceive+0x1b8>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d014      	beq.n	800356a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	b292      	uxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003566:	2301      	movs	r3, #1
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800356a:	f7fe fbb9 	bl	8001ce0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003576:	429a      	cmp	r2, r3
 8003578:	d807      	bhi.n	800358a <HAL_SPI_TransmitReceive+0x1d8>
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d003      	beq.n	800358a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003588:	e0a7      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1a6      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x130>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1a1      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x130>
 800359e:	e07c      	b.n	800369a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_TransmitReceive+0x1fc>
 80035a8:	8b7b      	ldrh	r3, [r7, #26]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d16b      	bne.n	8003686 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d4:	e057      	b.n	8003686 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d11c      	bne.n	800361e <HAL_SPI_TransmitReceive+0x26c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <HAL_SPI_TransmitReceive+0x26c>
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d114      	bne.n	800361e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	7812      	ldrb	r2, [r2, #0]
 8003600:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d119      	bne.n	8003660 <HAL_SPI_TransmitReceive+0x2ae>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d014      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365c:	2301      	movs	r3, #1
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003660:	f7fe fb3e 	bl	8001ce0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366c:	429a      	cmp	r2, r3
 800366e:	d803      	bhi.n	8003678 <HAL_SPI_TransmitReceive+0x2c6>
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d102      	bne.n	800367e <HAL_SPI_TransmitReceive+0x2cc>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003684:	e029      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1a2      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x224>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d19d      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa56 	bl	8003b50 <SPI_EndRxTxTransaction>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036b6:	e010      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	e000      	b.n	80036da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80036d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3730      	adds	r7, #48	; 0x30
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_SPI_Transmit_DMA+0x20>
 8003714:	2302      	movs	r3, #2
 8003716:	e09b      	b.n	8003850 <HAL_SPI_Transmit_DMA+0x158>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800372c:	2302      	movs	r3, #2
 800372e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003730:	e089      	b.n	8003846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_Transmit_DMA+0x46>
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003742:	e080      	b.n	8003846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378a:	d10f      	bne.n	80037ac <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_SPI_Transmit_DMA+0x160>)
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	4a28      	ldr	r2, [pc, #160]	; (800385c <HAL_SPI_Transmit_DMA+0x164>)
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	4a27      	ldr	r2, [pc, #156]	; (8003860 <HAL_SPI_Transmit_DMA+0x168>)
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	2200      	movs	r2, #0
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4619      	mov	r1, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80037e4:	f7fe fb8d 	bl	8001f02 <HAL_DMA_Start_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003806:	e01e      	b.n	8003846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d007      	beq.n	8003826 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0202 	orr.w	r2, r2, #2
 8003844:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	08003941 	.word	0x08003941
 800385c:	0800389b 	.word	0x0800389b
 8003860:	0800395d 	.word	0x0800395d

08003864 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a8:	f7fe fa1a 	bl	8001ce0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d03b      	beq.n	8003934 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0220 	bic.w	r2, r2, #32
 80038ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0202 	bic.w	r2, r2, #2
 80038da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	2164      	movs	r1, #100	; 0x64
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f000 f935 	bl	8003b50 <SPI_EndRxTxTransaction>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f7ff ffab 	bl	8003888 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003932:	e002      	b.n	800393a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003934:	6978      	ldr	r0, [r7, #20]
 8003936:	f7ff ff95 	bl	8003864 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff ff91 	bl	8003876 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0203 	bic.w	r2, r2, #3
 8003978:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff7a 	bl	8003888 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039ac:	f7fe f998 	bl	8001ce0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039bc:	f7fe f990 	bl	8001ce0 <HAL_GetTick>
 80039c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	0d1b      	lsrs	r3, r3, #20
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	e054      	b.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d050      	beq.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039dc:	f7fe f980 	bl	8001ce0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d902      	bls.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d13d      	bne.n	8003a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0a:	d111      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d004      	beq.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d107      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d10f      	bne.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e017      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d19b      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000020 	.word	0x20000020

08003aac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac0:	d111      	bne.n	8003ae6 <SPI_EndRxTransaction+0x3a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aca:	d004      	beq.n	8003ad6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d107      	bne.n	8003ae6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aee:	d117      	bne.n	8003b20 <SPI_EndRxTransaction+0x74>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af8:	d112      	bne.n	8003b20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2101      	movs	r1, #1
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff ff49 	bl	800399c <SPI_WaitFlagStateUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01a      	beq.n	8003b46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e013      	b.n	8003b48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2200      	movs	r2, #0
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff36 	bl	800399c <SPI_WaitFlagStateUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e000      	b.n	8003b48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff ff18 	bl	800399c <SPI_WaitFlagStateUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e000      	b.n	8003b84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e03f      	b.n	8003c1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd ff84 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f905 	bl	8003de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b08a      	sub	sp, #40	; 0x28
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d17c      	bne.n	8003d40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_UART_Transmit+0x2c>
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e075      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Transmit+0x3e>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e06e      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2221      	movs	r2, #33	; 0x21
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fe f831 	bl	8001ce0 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c94:	d108      	bne.n	8003ca8 <HAL_UART_Transmit+0x82>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e003      	b.n	8003cb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cb8:	e02a      	b.n	8003d10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f840 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e036      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3302      	adds	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e007      	b.n	8003d02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1cf      	bne.n	8003cba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f810 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	e02c      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d028      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	f7fd ffb9 	bl	8001ce0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d21d      	bcs.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e00f      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d0c3      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e1a:	f023 030c 	bic.w	r3, r3, #12
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <UART_SetConfig+0x114>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe ffb0 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	e002      	b.n	8003e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe ff98 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8003e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009a      	lsls	r2, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <UART_SetConfig+0x118>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	0119      	lsls	r1, r3, #4
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <UART_SetConfig+0x118>)
 8003e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <UART_SetConfig+0x118>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eac:	4419      	add	r1, r3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009a      	lsls	r2, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <UART_SetConfig+0x118>)
 8003ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2064      	movs	r0, #100	; 0x64
 8003ece:	fb00 f303 	mul.w	r3, r0, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	3332      	adds	r3, #50	; 0x32
 8003ed8:	4a07      	ldr	r2, [pc, #28]	; (8003ef8 <UART_SetConfig+0x118>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	440a      	add	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <MX_FATFS_Init+0x18>)
 8003f02:	4805      	ldr	r0, [pc, #20]	; (8003f18 <MX_FATFS_Init+0x1c>)
 8003f04:	f003 fc24 	bl	8007750 <FATFS_LinkDriver>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <MX_FATFS_Init+0x20>)
 8003f0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000222c 	.word	0x2000222c
 8003f18:	2000002c 	.word	0x2000002c
 8003f1c:	20002228 	.word	0x20002228

08003f20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc fc4a 	bl	80007d4 <SD_disk_initialize>
 8003f40:	4603      	mov	r3, r0
 8003f42:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fd21 	bl	80009a0 <SD_disk_status>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003f7a:	7bf8      	ldrb	r0, [r7, #15]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	f7fc fd21 	bl	80009c8 <SD_disk_read>
 8003f86:	4603      	mov	r3, r0
 8003f88:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003fa2:	7bf8      	ldrb	r0, [r7, #15]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	f7fc fd77 	bl	8000a9c <SD_disk_write>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	603a      	str	r2, [r7, #0]
 8003fc4:	71fb      	strb	r3, [r7, #7]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	79b9      	ldrb	r1, [r7, #6]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fde7 	bl	8000ba4 <SD_disk_ioctl>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <disk_status+0x30>)
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	79fa      	ldrb	r2, [r7, #7]
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <disk_status+0x30>)
 8003ffe:	440a      	add	r2, r1
 8004000:	7a12      	ldrb	r2, [r2, #8]
 8004002:	4610      	mov	r0, r2
 8004004:	4798      	blx	r3
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
  return stat;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20002450 	.word	0x20002450

08004018 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <disk_initialize+0x48>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d111      	bne.n	8004054 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <disk_initialize+0x48>)
 8004034:	2101      	movs	r1, #1
 8004036:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <disk_initialize+0x48>)
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	79fa      	ldrb	r2, [r7, #7]
 8004046:	4906      	ldr	r1, [pc, #24]	; (8004060 <disk_initialize+0x48>)
 8004048:	440a      	add	r2, r1
 800404a:	7a12      	ldrb	r2, [r2, #8]
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20002450 	.word	0x20002450

08004064 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <disk_read+0x3c>)
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	689c      	ldr	r4, [r3, #8]
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <disk_read+0x3c>)
 8004084:	4413      	add	r3, r2
 8004086:	7a18      	ldrb	r0, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	47a0      	blx	r4
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]
  return res;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	bf00      	nop
 80040a0:	20002450 	.word	0x20002450

080040a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <disk_write+0x3c>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68dc      	ldr	r4, [r3, #12]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <disk_write+0x3c>)
 80040c4:	4413      	add	r3, r2
 80040c6:	7a18      	ldrb	r0, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	47a0      	blx	r4
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	bf00      	nop
 80040e0:	20002450 	.word	0x20002450

080040e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	603a      	str	r2, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
 80040f0:	460b      	mov	r3, r1
 80040f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <disk_ioctl+0x38>)
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	79fa      	ldrb	r2, [r7, #7]
 8004102:	4906      	ldr	r1, [pc, #24]	; (800411c <disk_ioctl+0x38>)
 8004104:	440a      	add	r2, r1
 8004106:	7a10      	ldrb	r0, [r2, #8]
 8004108:	79b9      	ldrb	r1, [r7, #6]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4798      	blx	r3
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]
  return res;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20002450 	.word	0x20002450

08004120 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004134:	e007      	b.n	8004146 <mem_cpy+0x26>
		*d++ = *s++;
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	1c53      	adds	r3, r2, #1
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	6179      	str	r1, [r7, #20]
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f2      	bne.n	8004136 <mem_cpy+0x16>
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800416c:	e005      	b.n	800417a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	617a      	str	r2, [r7, #20]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f4      	bne.n	800416e <mem_set+0x12>
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80041a8:	bf00      	nop
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <mem_cmp+0x40>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	61ba      	str	r2, [r7, #24]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	1acb      	subs	r3, r1, r3
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ec      	beq.n	80041aa <mem_cmp+0x1a>
	return r;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80041e6:	e002      	b.n	80041ee <chk_chr+0x12>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <chk_chr+0x26>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4293      	cmp	r3, r2
 8004200:	d1f2      	bne.n	80041e8 <chk_chr+0xc>
	return *str;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	781b      	ldrb	r3, [r3, #0]
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e03b      	b.n	800429c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004224:	4931      	ldr	r1, [pc, #196]	; (80042ec <chk_lock+0xdc>)
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02c      	beq.n	8004292 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004238:	492c      	ldr	r1, [pc, #176]	; (80042ec <chk_lock+0xdc>)
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d120      	bne.n	8004296 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004254:	4925      	ldr	r1, [pc, #148]	; (80042ec <chk_lock+0xdc>)
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3304      	adds	r3, #4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800426e:	429a      	cmp	r2, r3
 8004270:	d111      	bne.n	8004296 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004272:	491e      	ldr	r1, [pc, #120]	; (80042ec <chk_lock+0xdc>)
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3308      	adds	r3, #8
 8004282:	881a      	ldrh	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800428c:	429a      	cmp	r2, r3
 800428e:	d102      	bne.n	8004296 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004290:	e007      	b.n	80042a2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d9c0      	bls.n	8004224 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d109      	bne.n	80042bc <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <chk_lock+0xa4>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d101      	bne.n	80042b8 <chk_lock+0xa8>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e013      	b.n	80042e0 <chk_lock+0xd0>
 80042b8:	2312      	movs	r3, #18
 80042ba:	e011      	b.n	80042e0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <chk_lock+0xca>
 80042c2:	490a      	ldr	r1, [pc, #40]	; (80042ec <chk_lock+0xdc>)
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	330a      	adds	r3, #10
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d101      	bne.n	80042de <chk_lock+0xce>
 80042da:	2310      	movs	r3, #16
 80042dc:	e000      	b.n	80042e0 <chk_lock+0xd0>
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20002238 	.word	0x20002238

080042f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	e002      	b.n	8004302 <enq_lock+0x12>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d809      	bhi.n	800431c <enq_lock+0x2c>
 8004308:	490a      	ldr	r1, [pc, #40]	; (8004334 <enq_lock+0x44>)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ef      	bne.n	80042fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20002238 	.word	0x20002238

08004338 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e02e      	b.n	80043a6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004348:	4958      	ldr	r1, [pc, #352]	; (80044ac <inc_lock+0x174>)
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d11d      	bne.n	80043a0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004364:	4951      	ldr	r1, [pc, #324]	; (80044ac <inc_lock+0x174>)
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3304      	adds	r3, #4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800437e:	429a      	cmp	r2, r3
 8004380:	d10e      	bne.n	80043a0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004382:	494a      	ldr	r1, [pc, #296]	; (80044ac <inc_lock+0x174>)
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3308      	adds	r3, #8
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800439c:	429a      	cmp	r2, r3
 800439e:	d006      	beq.n	80043ae <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d9cd      	bls.n	8004348 <inc_lock+0x10>
 80043ac:	e000      	b.n	80043b0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80043ae:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d148      	bne.n	8004448 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <inc_lock+0x8a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d809      	bhi.n	80043dc <inc_lock+0xa4>
 80043c8:	4938      	ldr	r1, [pc, #224]	; (80044ac <inc_lock+0x174>)
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ef      	bne.n	80043bc <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d101      	bne.n	80043e6 <inc_lock+0xae>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e05d      	b.n	80044a2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	482f      	ldr	r0, [pc, #188]	; (80044ac <inc_lock+0x174>)
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4403      	add	r3, r0
 80043fc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004404:	6899      	ldr	r1, [r3, #8]
 8004406:	4829      	ldr	r0, [pc, #164]	; (80044ac <inc_lock+0x174>)
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4403      	add	r3, r0
 8004414:	3304      	adds	r3, #4
 8004416:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	88d8      	ldrh	r0, [r3, #6]
 8004420:	4922      	ldr	r1, [pc, #136]	; (80044ac <inc_lock+0x174>)
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3308      	adds	r3, #8
 8004430:	4602      	mov	r2, r0
 8004432:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004434:	491d      	ldr	r1, [pc, #116]	; (80044ac <inc_lock+0x174>)
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	330a      	adds	r3, #10
 8004444:	2200      	movs	r2, #0
 8004446:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <inc_lock+0x130>
 800444e:	4917      	ldr	r1, [pc, #92]	; (80044ac <inc_lock+0x174>)
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	330a      	adds	r3, #10
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <inc_lock+0x130>
 8004464:	2300      	movs	r3, #0
 8004466:	e01c      	b.n	80044a2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <inc_lock+0x14e>
 800446e:	490f      	ldr	r1, [pc, #60]	; (80044ac <inc_lock+0x174>)
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	330a      	adds	r3, #10
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	b299      	uxth	r1, r3
 8004484:	e001      	b.n	800448a <inc_lock+0x152>
 8004486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448a:	4808      	ldr	r0, [pc, #32]	; (80044ac <inc_lock+0x174>)
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	330a      	adds	r3, #10
 800449a:	460a      	mov	r2, r1
 800449c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	20002238 	.word	0x20002238

080044b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d82e      	bhi.n	8004522 <dec_lock+0x72>
		n = Files[i].ctr;
 80044c4:	491b      	ldr	r1, [pc, #108]	; (8004534 <dec_lock+0x84>)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	330a      	adds	r3, #10
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80044d8:	89fb      	ldrh	r3, [r7, #14]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d101      	bne.n	80044e4 <dec_lock+0x34>
 80044e0:	2300      	movs	r3, #0
 80044e2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <dec_lock+0x40>
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80044f0:	4910      	ldr	r1, [pc, #64]	; (8004534 <dec_lock+0x84>)
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	330a      	adds	r3, #10
 8004500:	89fa      	ldrh	r2, [r7, #14]
 8004502:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004504:	89fb      	ldrh	r3, [r7, #14]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <dec_lock+0x6c>
 800450a:	490a      	ldr	r1, [pc, #40]	; (8004534 <dec_lock+0x84>)
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	737b      	strb	r3, [r7, #13]
 8004520:	e001      	b.n	8004526 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004522:	2302      	movs	r3, #2
 8004524:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004526:	7b7b      	ldrb	r3, [r7, #13]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20002238 	.word	0x20002238

08004538 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e016      	b.n	8004574 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004546:	4910      	ldr	r1, [pc, #64]	; (8004588 <clear_lock+0x50>)
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d108      	bne.n	800456e <clear_lock+0x36>
 800455c:	490a      	ldr	r1, [pc, #40]	; (8004588 <clear_lock+0x50>)
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d9e5      	bls.n	8004546 <clear_lock+0xe>
	}
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20002238 	.word	0x20002238

0800458c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	791b      	ldrb	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d040      	beq.n	8004626 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	7858      	ldrb	r0, [r3, #1]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	2301      	movs	r3, #1
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	f7ff fd72 	bl	80040a4 <disk_write>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <sync_window+0x40>
			res = FR_DISK_ERR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	e02c      	b.n	8004626 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	2200      	movs	r2, #0
 80045d4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d21b      	bcs.n	8004626 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	78db      	ldrb	r3, [r3, #3]
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e012      	b.n	8004620 <sync_window+0x94>
					wsect += fs->fsize;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4413      	add	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	7858      	ldrb	r0, [r3, #1]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	2301      	movs	r3, #1
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	f7ff fd45 	bl	80040a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3b01      	subs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d8e9      	bhi.n	80045fa <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d01e      	beq.n	800468a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff9d 	bl	800458c <sync_window>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	7858      	ldrb	r0, [r3, #1]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	2301      	movs	r3, #1
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	f7ff fcfb 	bl	8004064 <disk_read>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	461a      	mov	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800468a:	7bfb      	ldrb	r3, [r7, #15]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff75 	bl	800458c <sync_window>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 80ad 	bne.w	8004808 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	f040 8098 	bne.w	80047ec <sync_fs+0x158>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c2:	795b      	ldrb	r3, [r3, #5]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 8091 	bne.w	80047ec <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	895b      	ldrh	r3, [r3, #10]
 80046d4:	461a      	mov	r2, r3
 80046d6:	2100      	movs	r1, #0
 80046d8:	f7ff fd40 	bl	800415c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2255      	movs	r2, #85	; 0x55
 80046e0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	22aa      	movs	r2, #170	; 0xaa
 80046e8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2252      	movs	r2, #82	; 0x52
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2252      	movs	r2, #82	; 0x52
 80046f6:	705a      	strb	r2, [r3, #1]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2261      	movs	r2, #97	; 0x61
 80046fc:	709a      	strb	r2, [r3, #2]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2241      	movs	r2, #65	; 0x41
 8004702:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2272      	movs	r2, #114	; 0x72
 8004708:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2272      	movs	r2, #114	; 0x72
 8004710:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2241      	movs	r2, #65	; 0x41
 8004718:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2261      	movs	r2, #97	; 0x61
 8004720:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b29b      	uxth	r3, r3
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	b29b      	uxth	r3, r3
 8004742:	b2da      	uxtb	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	b2da      	uxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	0e1b      	lsrs	r3, r3, #24
 8004766:	b2da      	uxtb	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	b29b      	uxth	r3, r3
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	b29b      	uxth	r3, r3
 800478c:	b2da      	uxtb	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	0e1b      	lsrs	r3, r3, #24
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	7858      	ldrb	r0, [r3, #1]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	2301      	movs	r3, #1
 80047de:	f7ff fc61 	bl	80040a4 <disk_write>
			fs->fsi_flag = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	2200      	movs	r2, #0
 80047ea:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fc73 	bl	80040e4 <disk_ioctl>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	3b02      	subs	r3, #2
 8004820:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	3b02      	subs	r3, #2
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d301      	bcc.n	8004836 <clust2sect+0x24>
 8004832:	2300      	movs	r3, #0
 8004834:	e00c      	b.n	8004850 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	461a      	mov	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	fb03 f202 	mul.w	r2, r3, r2
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	4413      	add	r3, r2
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d906      	bls.n	8004878 <get_fat+0x1e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <get_fat+0x24>
		val = 1;	/* Internal error */
 8004878:	2301      	movs	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e0e4      	b.n	8004a48 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b03      	cmp	r3, #3
 800488e:	f000 8098 	beq.w	80049c2 <get_fat+0x168>
 8004892:	2b03      	cmp	r3, #3
 8004894:	f300 80ce 	bgt.w	8004a34 <get_fat+0x1da>
 8004898:	2b01      	cmp	r3, #1
 800489a:	d002      	beq.n	80048a2 <get_fat+0x48>
 800489c:	2b02      	cmp	r3, #2
 800489e:	d05f      	beq.n	8004960 <get_fat+0x106>
 80048a0:	e0c8      	b.n	8004a34 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	895b      	ldrh	r3, [r3, #10]
 80048c0:	4619      	mov	r1, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80048c8:	4413      	add	r3, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff feaf 	bl	8004630 <move_window>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 80b0 	bne.w	8004a3a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	60fa      	str	r2, [r7, #12]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048e6:	8952      	ldrh	r2, [r2, #10]
 80048e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ec:	fb01 f202 	mul.w	r2, r1, r2
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	5cd3      	ldrb	r3, [r2, r3]
 80048f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	4619      	mov	r1, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004910:	4413      	add	r3, r2
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fe8b 	bl	8004630 <move_window>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 808e 	bne.w	8004a3e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	895b      	ldrh	r3, [r3, #10]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004932:	fb01 f202 	mul.w	r2, r1, r2
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <get_fat+0xfc>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	e002      	b.n	800495c <get_fat+0x102>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	617b      	str	r3, [r7, #20]
			break;
 800495e:	e073      	b.n	8004a48 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	895b      	ldrh	r3, [r3, #10]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	fbb3 f3f1 	udiv	r3, r3, r1
 800497c:	4413      	add	r3, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fe55 	bl	8004630 <move_window>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d15a      	bne.n	8004a42 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004996:	8952      	ldrh	r2, [r2, #10]
 8004998:	fbb3 f1f2 	udiv	r1, r3, r2
 800499c:	fb01 f202 	mul.w	r2, r1, r2
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3301      	adds	r3, #1
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	b21a      	sxth	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b21b      	sxth	r3, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	617b      	str	r3, [r7, #20]
			break;
 80049c0:	e042      	b.n	8004a48 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c8:	6a1a      	ldr	r2, [r3, #32]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	895b      	ldrh	r3, [r3, #10]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4619      	mov	r1, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	fbb3 f3f1 	udiv	r3, r3, r1
 80049de:	4413      	add	r3, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe24 	bl	8004630 <move_window>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12b      	bne.n	8004a46 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049f8:	8952      	ldrh	r2, [r2, #10]
 80049fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80049fe:	fb01 f202 	mul.w	r2, r1, r2
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	061a      	lsls	r2, r3, #24
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3302      	adds	r3, #2
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	3201      	adds	r2, #1
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0212      	lsls	r2, r2, #8
 8004a24:	4313      	orrs	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a30:	617b      	str	r3, [r7, #20]
			break;
 8004a32:	e009      	b.n	8004a48 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8004a34:	2301      	movs	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e006      	b.n	8004a48 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a3a:	bf00      	nop
 8004a3c:	e004      	b.n	8004a48 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a46:	bf00      	nop
		}
	}

	return val;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d906      	bls.n	8004a72 <put_fat+0x20>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <put_fat+0x26>
		res = FR_INT_ERR;
 8004a72:	2302      	movs	r3, #2
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e13a      	b.n	8004cee <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	f000 80d0 	beq.w	8004c26 <put_fat+0x1d4>
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	f300 8127 	bgt.w	8004cda <put_fat+0x288>
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d003      	beq.n	8004a98 <put_fat+0x46>
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	f000 808f 	beq.w	8004bb4 <put_fat+0x162>
 8004a96:	e120      	b.n	8004cda <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aac:	6a1a      	ldr	r2, [r3, #32]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab4:	895b      	ldrh	r3, [r3, #10]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004abe:	4413      	add	r3, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fdb4 	bl	8004630 <move_window>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8106 	bne.w	8004ce0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	617a      	str	r2, [r7, #20]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ae0:	8952      	ldrh	r2, [r2, #10]
 8004ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ae6:	fb01 f202 	mul.w	r2, r1, r2
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <put_fat+0xc6>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e001      	b.n	8004b1c <put_fat+0xca>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	2201      	movs	r2, #1
 8004b28:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	895b      	ldrh	r3, [r3, #10]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b42:	4413      	add	r3, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fd72 	bl	8004630 <move_window>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b50:	7ffb      	ldrb	r3, [r7, #31]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f040 80c6 	bne.w	8004ce4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5e:	895b      	ldrh	r3, [r3, #10]
 8004b60:	461a      	mov	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b68:	fb01 f202 	mul.w	r2, r1, r2
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <put_fat+0x134>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e00e      	b.n	8004ba4 <put_fat+0x152>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f023 030f 	bic.w	r3, r3, #15
 8004b90:	b25a      	sxtb	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	b25b      	sxtb	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bae:	2201      	movs	r2, #1
 8004bb0:	711a      	strb	r2, [r3, #4]
			break;
 8004bb2:	e09c      	b.n	8004cee <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	895b      	ldrh	r3, [r3, #10]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4619      	mov	r1, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fd2b 	bl	8004630 <move_window>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 8081 	bne.w	8004ce8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bf0:	8952      	ldrh	r2, [r2, #10]
 8004bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bf6:	fb01 f202 	mul.w	r2, r1, r2
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3301      	adds	r3, #1
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c20:	2201      	movs	r2, #1
 8004c22:	711a      	strb	r2, [r3, #4]
			break;
 8004c24:	e063      	b.n	8004cee <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c34:	895b      	ldrh	r3, [r3, #10]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c42:	4413      	add	r3, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fcf2 	bl	8004630 <move_window>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c50:	7ffb      	ldrb	r3, [r7, #31]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d14a      	bne.n	8004cec <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c60:	8952      	ldrh	r2, [r2, #10]
 8004c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c66:	fb01 f202 	mul.w	r2, r1, r2
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	3303      	adds	r3, #3
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	061a      	lsls	r2, r3, #24
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	4313      	orrs	r3, r2
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	3201      	adds	r2, #1
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	0212      	lsls	r2, r2, #8
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0c1a      	lsrs	r2, r3, #16
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0e1a      	lsrs	r2, r3, #24
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	3303      	adds	r3, #3
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	711a      	strb	r2, [r3, #4]
			break;
 8004cd8:	e009      	b.n	8004cee <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e006      	b.n	8004cee <put_fat+0x29c>
			if (res != FR_OK) break;
 8004ce0:	bf00      	nop
 8004ce2:	e004      	b.n	8004cee <put_fat+0x29c>
			if (res != FR_OK) break;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <put_fat+0x29c>
			if (res != FR_OK) break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <put_fat+0x29c>
			if (res != FR_OK) break;
 8004cec:	bf00      	nop
		}
	}

	return res;
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d906      	bls.n	8004d16 <remove_chain+0x1e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <remove_chain+0x24>
		res = FR_INT_ERR;
 8004d16:	2302      	movs	r3, #2
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	e049      	b.n	8004db0 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004d20:	e03b      	b.n	8004d9a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fd98 	bl	800485a <get_fat>
 8004d2a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03b      	beq.n	8004daa <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d102      	bne.n	8004d3e <remove_chain+0x46>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e038      	b.n	8004db0 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d102      	bne.n	8004d4c <remove_chain+0x54>
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e031      	b.n	8004db0 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fe7e 	bl	8004a52 <put_fat>
 8004d56:	4603      	mov	r3, r0
 8004d58:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d126      	bne.n	8004dae <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d013      	beq.n	8004d96 <remove_chain+0x9e>
				fs->free_clust++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	3301      	adds	r3, #1
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d7e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d86:	795b      	ldrb	r3, [r3, #5]
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d94:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3bc      	bcc.n	8004d22 <remove_chain+0x2a>
 8004da8:	e002      	b.n	8004db0 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8004dae:	bf00      	nop
		}
	}

	return res;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d111      	bne.n	8004dee <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <create_chain+0x2e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d31d      	bcc.n	8004e24 <create_chain+0x6a>
 8004de8:	2301      	movs	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	e01a      	b.n	8004e24 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fd32 	bl	800485a <get_fat>
 8004df6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d801      	bhi.n	8004e02 <create_chain+0x48>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d101      	bne.n	8004e0e <create_chain+0x54>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	e079      	b.n	8004f02 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d201      	bcs.n	8004e20 <create_chain+0x66>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	e070      	b.n	8004f02 <create_chain+0x148>
		scl = clst;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d307      	bcc.n	8004e4c <create_chain+0x92>
			ncl = 2;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d901      	bls.n	8004e4c <create_chain+0x92>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e05a      	b.n	8004f02 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fd03 	bl	800485a <get_fat>
 8004e54:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d002      	beq.n	8004e6a <create_chain+0xb0>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <create_chain+0xb4>
			return cs;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	e049      	b.n	8004f02 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d1d8      	bne.n	8004e28 <create_chain+0x6e>
 8004e76:	2300      	movs	r3, #0
 8004e78:	e043      	b.n	8004f02 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004e7a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004e7c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004e80:	6979      	ldr	r1, [r7, #20]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fde5 	bl	8004a52 <put_fat>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <create_chain+0xec>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fdd8 	bl	8004a52 <put_fat>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d121      	bne.n	8004ef0 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d01c      	beq.n	8004f00 <create_chain+0x146>
			fs->free_clust--;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ed6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ede:	795b      	ldrb	r3, [r3, #5]
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eec:	715a      	strb	r2, [r3, #5]
 8004eee:	e007      	b.n	8004f00 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d102      	bne.n	8004efc <create_chain+0x142>
 8004ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8004efa:	e000      	b.n	8004efe <create_chain+0x144>
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004f00:	697b      	ldr	r3, [r7, #20]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2c:	895b      	ldrh	r3, [r3, #10]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f42:	7892      	ldrb	r2, [r2, #2]
 8004f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	613a      	str	r2, [r7, #16]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <clmt_clust+0x54>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e010      	b.n	8004f80 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d307      	bcc.n	8004f76 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3304      	adds	r3, #4
 8004f72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f74:	e7e9      	b.n	8004f4a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004f76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d009      	beq.n	8004fc4 <dir_sdi+0x3a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d301      	bcc.n	8004fc8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e0aa      	b.n	800511e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d110      	bne.n	8004ff0 <dir_sdi+0x66>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d107      	bne.n	8004ff0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d115      	bne.n	8005022 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	891b      	ldrh	r3, [r3, #8]
 8005004:	461a      	mov	r2, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4293      	cmp	r3, r2
 800500a:	d301      	bcc.n	8005010 <dir_sdi+0x86>
			return FR_INT_ERR;
 800500c:	2302      	movs	r3, #2
 800500e:	e086      	b.n	800511e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e043      	b.n	80050aa <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502e:	895b      	ldrh	r3, [r3, #10]
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	b29b      	uxth	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005042:	789b      	ldrb	r3, [r3, #2]
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800504a:	e021      	b.n	8005090 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fbff 	bl	800485a <get_fat>
 800505c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d101      	bne.n	800506a <dir_sdi+0xe0>
 8005066:	2301      	movs	r3, #1
 8005068:	e059      	b.n	800511e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d909      	bls.n	8005084 <dir_sdi+0xfa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	429a      	cmp	r2, r3
 8005082:	d301      	bcc.n	8005088 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005084:	2302      	movs	r3, #2
 8005086:	e04a      	b.n	800511e <dir_sdi+0x194>
			idx -= ic;
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d2d9      	bcs.n	800504c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fbb5 	bl	8004812 <clust2sect>
 80050a8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b0:	461a      	mov	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <dir_sdi+0x136>
 80050bc:	2302      	movs	r3, #2
 80050be:	e02e      	b.n	800511e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050cc:	895b      	ldrh	r3, [r3, #10]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050e4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fc:	895b      	ldrh	r3, [r3, #10]
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	fbb3 f1f2 	udiv	r1, r3, r2
 800510a:	fb01 f202 	mul.w	r2, r1, r2
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	015b      	lsls	r3, r3, #5
 8005112:	4403      	add	r3, r0
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800511a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005126:	b590      	push	{r4, r7, lr}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005136:	88db      	ldrh	r3, [r3, #6]
 8005138:	3301      	adds	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <dir_next+0x2a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <dir_next+0x2e>
		return FR_NO_FILE;
 8005150:	2304      	movs	r3, #4
 8005152:	e12e      	b.n	80053b2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005160:	895b      	ldrh	r3, [r3, #10]
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	b29b      	uxth	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	fbb3 f1f2 	udiv	r1, r3, r2
 800516e:	fb01 f202 	mul.w	r2, r1, r2
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 80fa 	bne.w	800536e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	3301      	adds	r3, #1
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800518a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10d      	bne.n	80051b4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	891b      	ldrh	r3, [r3, #8]
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	f0c0 80df 	bcc.w	800536e <dir_next+0x248>
				return FR_NO_FILE;
 80051b0:	2304      	movs	r3, #4
 80051b2:	e0fe      	b.n	80053b2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c0:	895b      	ldrh	r3, [r3, #10]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051da:	7892      	ldrb	r2, [r2, #2]
 80051dc:	3a01      	subs	r2, #1
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 80c4 	bne.w	800536e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff fb2e 	bl	800485a <get_fat>
 80051fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d801      	bhi.n	800520a <dir_next+0xe4>
 8005206:	2302      	movs	r3, #2
 8005208:	e0d3      	b.n	80053b2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d101      	bne.n	8005216 <dir_next+0xf0>
 8005212:	2301      	movs	r3, #1
 8005214:	e0cd      	b.n	80053b2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	f0c0 808e 	bcc.w	8005348 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <dir_next+0x110>
 8005232:	2304      	movs	r3, #4
 8005234:	e0bd      	b.n	80053b2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7ff fdb6 	bl	8004dba <create_chain>
 800524e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <dir_next+0x134>
 8005256:	2307      	movs	r3, #7
 8005258:	e0ab      	b.n	80053b2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <dir_next+0x13e>
 8005260:	2302      	movs	r3, #2
 8005262:	e0a6      	b.n	80053b2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d101      	bne.n	8005270 <dir_next+0x14a>
 800526c:	2301      	movs	r3, #1
 800526e:	e0a0      	b.n	80053b2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f987 	bl	800458c <sync_window>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <dir_next+0x162>
 8005284:	2301      	movs	r3, #1
 8005286:	e094      	b.n	80053b2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529e:	895b      	ldrh	r3, [r3, #10]
 80052a0:	461a      	mov	r2, r3
 80052a2:	2100      	movs	r1, #0
 80052a4:	f7fe ff5a 	bl	800415c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	681c      	ldr	r4, [r3, #0]
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7ff faa9 	bl	8004812 <clust2sect>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	e021      	b.n	8005312 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052da:	2201      	movs	r2, #1
 80052dc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f950 	bl	800458c <sync_window>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <dir_next+0x1d0>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e05d      	b.n	80053b2 <dir_next+0x28c>
						dp->fs->winsect++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005304:	3201      	adds	r2, #1
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3301      	adds	r3, #1
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531e:	789b      	ldrb	r3, [r3, #2]
 8005320:	461a      	mov	r2, r3
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4293      	cmp	r3, r2
 8005326:	d3d2      	bcc.n	80052ce <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1acb      	subs	r3, r1, r3
 8005342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005346:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534e:	461a      	mov	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fa57 	bl	8004812 <clust2sect>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005390:	895b      	ldrh	r3, [r3, #10]
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	fbb3 f1f2 	udiv	r1, r3, r2
 800539e:	fb01 f202 	mul.w	r2, r1, r2
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	4403      	add	r3, r0
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053ae:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd90      	pop	{r4, r7, pc}

080053ba <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80053c4:	2100      	movs	r1, #0
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fddf 	bl	8004f8a <dir_sdi>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d135      	bne.n	8005442 <dir_alloc+0x88>
		n = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7ff f91f 	bl	8004630 <move_window>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d121      	bne.n	8005440 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2be5      	cmp	r3, #229	; 0xe5
 8005408:	d006      	beq.n	8005418 <dir_alloc+0x5e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3301      	adds	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d102      	bne.n	800542c <dir_alloc+0x72>
 8005426:	e00c      	b.n	8005442 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800542c:	2101      	movs	r1, #1
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fe79 	bl	8005126 <dir_next>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0cd      	beq.n	80053da <dir_alloc+0x20>
 800543e:	e000      	b.n	8005442 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8005440:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d101      	bne.n	800544c <dir_alloc+0x92>
 8005448:	2307      	movs	r3, #7
 800544a:	73fb      	strb	r3, [r7, #15]
	return res;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	331b      	adds	r3, #27
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	b21a      	sxth	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	331a      	adds	r3, #26
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b21b      	sxth	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	b21b      	sxth	r3, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d10f      	bne.n	80054a6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3315      	adds	r3, #21
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21a      	sxth	r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b21b      	sxth	r3, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	b21b      	sxth	r3, r3
 800549c:	b29b      	uxth	r3, r3
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

	return cl;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	331a      	adds	r3, #26
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	331b      	adds	r3, #27
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	0c1a      	lsrs	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3314      	adds	r3, #20
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3315      	adds	r3, #21
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
	...

08005500 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005512:	1e5a      	subs	r2, r3, #1
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	2301      	movs	r3, #1
 8005526:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005528:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <cmp_lfn+0xd8>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4413      	add	r3, r2
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b21a      	sxth	r2, r3
 800553c:	4926      	ldr	r1, [pc, #152]	; (80055d8 <cmp_lfn+0xd8>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	440b      	add	r3, r1
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	440b      	add	r3, r1
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b21b      	sxth	r3, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	b21b      	sxth	r3, r3
 8005552:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d019      	beq.n	800558e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800555a:	89bb      	ldrh	r3, [r7, #12]
 800555c:	4618      	mov	r0, r3
 800555e:	f002 f941 	bl	80077e4 <ff_wtoupper>
 8005562:	4603      	mov	r3, r0
 8005564:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2bfe      	cmp	r3, #254	; 0xfe
 800556a:	d80e      	bhi.n	800558a <cmp_lfn+0x8a>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	617a      	str	r2, [r7, #20]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f002 f932 	bl	80077e4 <ff_wtoupper>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	4293      	cmp	r3, r2
 8005588:	d008      	beq.n	800559c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800558a:	2300      	movs	r3, #0
 800558c:	e01f      	b.n	80055ce <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800558e:	89bb      	ldrh	r3, [r7, #12]
 8005590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005594:	4293      	cmp	r3, r2
 8005596:	d001      	beq.n	800559c <cmp_lfn+0x9c>
 8005598:	2300      	movs	r3, #0
 800559a:	e018      	b.n	80055ce <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3301      	adds	r3, #1
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	d9bf      	bls.n	8005528 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <cmp_lfn+0xcc>
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <cmp_lfn+0xcc>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <cmp_lfn+0xcc>
		return 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80055cc:	2301      	movs	r3, #1
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08007b38 	.word	0x08007b38

080055dc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	460b      	mov	r3, r1
 80055ec:	71fb      	strb	r3, [r7, #7]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	330d      	adds	r3, #13
 80055f6:	79ba      	ldrb	r2, [r7, #6]
 80055f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	330b      	adds	r3, #11
 80055fe:	220f      	movs	r2, #15
 8005600:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	330c      	adds	r3, #12
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	331a      	adds	r3, #26
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	331b      	adds	r3, #27
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	1e5a      	subs	r2, r3, #1
 800561e:	4613      	mov	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	82fb      	strh	r3, [r7, #22]
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005632:	8afb      	ldrh	r3, [r7, #22]
 8005634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <fit_lfn+0x70>
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <fit_lfn+0xe4>)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4413      	add	r3, r2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	8afa      	ldrh	r2, [r7, #22]
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	8afb      	ldrh	r3, [r7, #22]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b299      	uxth	r1, r3
 8005666:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <fit_lfn+0xe4>)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	4413      	add	r3, r2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	4413      	add	r3, r2
 8005674:	b2ca      	uxtb	r2, r1
 8005676:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005678:	8afb      	ldrh	r3, [r7, #22]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <fit_lfn+0xa8>
 800567e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005682:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3301      	adds	r3, #1
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b0c      	cmp	r3, #12
 800568e:	d9d0      	bls.n	8005632 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005696:	4293      	cmp	r3, r2
 8005698:	d006      	beq.n	80056a8 <fit_lfn+0xcc>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <fit_lfn+0xd4>
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	79fa      	ldrb	r2, [r7, #7]
 80056b4:	701a      	strb	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	3724      	adds	r7, #36	; 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	08007b38 	.word	0x08007b38

080056c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80056d2:	220b      	movs	r2, #11
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7fe fd22 	bl	8004120 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d92b      	bls.n	800573a <gen_numname+0x76>
		sr = seq;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80056e6:	e022      	b.n	800572e <gen_numname+0x6a>
			wc = *lfn++;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f6:	e017      	b.n	8005728 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005a      	lsls	r2, r3, #1
 80056fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <gen_numname+0x5e>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800571c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005720:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	3301      	adds	r3, #1
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d9e4      	bls.n	80056f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d8      	bne.n	80056e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800573a:	2307      	movs	r3, #7
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800574e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005752:	2b39      	cmp	r3, #57	; 0x39
 8005754:	d904      	bls.n	8005760 <gen_numname+0x9c>
 8005756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800575a:	3307      	adds	r3, #7
 800575c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	1e5a      	subs	r2, r3, #1
 8005764:	62ba      	str	r2, [r7, #40]	; 0x28
 8005766:	3330      	adds	r3, #48	; 0x30
 8005768:	443b      	add	r3, r7
 800576a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800576e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1df      	bne.n	800573e <gen_numname+0x7a>
	ns[i] = '~';
 800577e:	f107 0214 	add.w	r2, r7, #20
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	4413      	add	r3, r2
 8005786:	227e      	movs	r2, #126	; 0x7e
 8005788:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800578a:	2300      	movs	r3, #0
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	e002      	b.n	8005796 <gen_numname+0xd2>
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	3301      	adds	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	429a      	cmp	r2, r3
 800579c:	d205      	bcs.n	80057aa <gen_numname+0xe6>
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d1f2      	bne.n	8005790 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	2b07      	cmp	r3, #7
 80057ae:	d807      	bhi.n	80057c0 <gen_numname+0xfc>
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80057b6:	3330      	adds	r3, #48	; 0x30
 80057b8:	443b      	add	r3, r7
 80057ba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80057be:	e000      	b.n	80057c2 <gen_numname+0xfe>
 80057c0:	2120      	movs	r1, #32
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	627a      	str	r2, [r7, #36]	; 0x24
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	460a      	mov	r2, r1
 80057ce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	d9e9      	bls.n	80057aa <gen_numname+0xe6>
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	3730      	adds	r7, #48	; 0x30
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80057ec:	230b      	movs	r3, #11
 80057ee:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	0852      	lsrs	r2, r2, #1
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	4313      	orrs	r3, r2
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6079      	str	r1, [r7, #4]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4413      	add	r3, r2
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ed      	bne.n	80057f0 <sum_sfn+0x10>
	return sum;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005828:	2100      	movs	r1, #0
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fbad 	bl	8004f8a <dir_sdi>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <dir_find+0x1e>
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	e0b8      	b.n	80059b0 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800583e:	23ff      	movs	r3, #255	; 0xff
 8005840:	753b      	strb	r3, [r7, #20]
 8005842:	7d3b      	ldrb	r3, [r7, #20]
 8005844:	757b      	strb	r3, [r7, #21]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005850:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe fee3 	bl	8004630 <move_window>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 8097 	bne.w	80059a4 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005886:	7dbb      	ldrb	r3, [r7, #22]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <dir_find+0x72>
 800588c:	2304      	movs	r3, #4
 800588e:	75fb      	strb	r3, [r7, #23]
 8005890:	e08d      	b.n	80059ae <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	330b      	adds	r3, #11
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800589c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800589e:	7dbb      	ldrb	r3, [r7, #22]
 80058a0:	2be5      	cmp	r3, #229	; 0xe5
 80058a2:	d007      	beq.n	80058b4 <dir_find+0x94>
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <dir_find+0xa6>
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b0f      	cmp	r3, #15
 80058b2:	d008      	beq.n	80058c6 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80058b4:	23ff      	movs	r3, #255	; 0xff
 80058b6:	757b      	strb	r3, [r7, #21]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80058c4:	e063      	b.n	800598e <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b0f      	cmp	r3, #15
 80058ca:	d137      	bne.n	800593c <dir_find+0x11c>
				if (dp->lfn) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d05a      	beq.n	800598e <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80058d8:	7dbb      	ldrb	r3, [r7, #22]
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	7b5b      	ldrb	r3, [r3, #13]
 80058e6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	75bb      	strb	r3, [r7, #22]
 80058f0:	7dbb      	ldrb	r3, [r7, #22]
 80058f2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fa:	88da      	ldrh	r2, [r3, #6]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005902:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005904:	7dba      	ldrb	r2, [r7, #22]
 8005906:	7d7b      	ldrb	r3, [r7, #21]
 8005908:	429a      	cmp	r2, r3
 800590a:	d114      	bne.n	8005936 <dir_find+0x116>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	330d      	adds	r3, #13
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	7d3a      	ldrb	r2, [r7, #20]
 8005914:	429a      	cmp	r2, r3
 8005916:	d10e      	bne.n	8005936 <dir_find+0x116>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fdec 	bl	8005500 <cmp_lfn>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <dir_find+0x116>
 800592e:	7d7b      	ldrb	r3, [r7, #21]
 8005930:	3b01      	subs	r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e000      	b.n	8005938 <dir_find+0x118>
 8005936:	23ff      	movs	r3, #255	; 0xff
 8005938:	757b      	strb	r3, [r7, #21]
 800593a:	e028      	b.n	800598e <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800593c:	7d7b      	ldrb	r3, [r7, #21]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <dir_find+0x132>
 8005942:	6938      	ldr	r0, [r7, #16]
 8005944:	f7ff ff4c 	bl	80057e0 <sum_sfn>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	7d3b      	ldrb	r3, [r7, #20]
 800594e:	4293      	cmp	r3, r2
 8005950:	d02a      	beq.n	80059a8 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	330b      	adds	r3, #11
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <dir_find+0x15e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	220b      	movs	r2, #11
 8005970:	4619      	mov	r1, r3
 8005972:	6938      	ldr	r0, [r7, #16]
 8005974:	f7fe fc0c 	bl	8004190 <mem_cmp>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800597e:	23ff      	movs	r3, #255	; 0xff
 8005980:	757b      	strb	r3, [r7, #21]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800598e:	2100      	movs	r1, #0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fbc8 	bl	8005126 <dir_next>
 8005996:	4603      	mov	r3, r0
 8005998:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f43f af58 	beq.w	8005852 <dir_find+0x32>
 80059a2:	e004      	b.n	80059ae <dir_find+0x18e>
		if (res != FR_OK) break;
 80059a4:	bf00      	nop
 80059a6:	e002      	b.n	80059ae <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80059ac:	bf00      	nop

	return res;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	220c      	movs	r2, #12
 80059da:	6a39      	ldr	r1, [r7, #32]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fb9f 	bl	8004120 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d03b      	beq.n	8005a64 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	330b      	adds	r3, #11
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fa:	461a      	mov	r2, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8005a00:	2301      	movs	r3, #1
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a04:	e013      	b.n	8005a2e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005a06:	f107 010c 	add.w	r1, r7, #12
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	6a38      	ldr	r0, [r7, #32]
 8005a10:	f7ff fe58 	bl	80056c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ff03 	bl	8005820 <dir_find>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2b63      	cmp	r3, #99	; 0x63
 8005a32:	d9e8      	bls.n	8005a06 <dir_register+0x4e>
 8005a34:	e000      	b.n	8005a38 <dir_register+0x80>
			if (res != FR_OK) break;
 8005a36:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b64      	cmp	r3, #100	; 0x64
 8005a3c:	d101      	bne.n	8005a42 <dir_register+0x8a>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e0d8      	b.n	8005bf4 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d002      	beq.n	8005a50 <dir_register+0x98>
 8005a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a4e:	e0d1      	b.n	8005bf4 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	330b      	adds	r3, #11
 8005a54:	7dfa      	ldrb	r2, [r7, #23]
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	461a      	mov	r2, r3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d014      	beq.n	8005a98 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a72:	e002      	b.n	8005a7a <dir_register+0xc2>
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	3301      	adds	r3, #1
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f5      	bne.n	8005a74 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	3319      	adds	r3, #25
 8005a8c:	4a5b      	ldr	r2, [pc, #364]	; (8005bfc <dir_register+0x244>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	e001      	b.n	8005a9c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fc8b 	bl	80053ba <dir_alloc>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d15b      	bne.n	8005b6a <dir_register+0x1b2>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d055      	beq.n	8005b6a <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac4:	88db      	ldrh	r3, [r3, #6]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fa5b 	bl	8004f8a <dir_sdi>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d143      	bne.n	8005b6a <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fe78 	bl	80057e0 <sum_sfn>
 8005af0:	4603      	mov	r3, r0
 8005af2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7fe fd92 	bl	8004630 <move_window>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d126      	bne.n	8005b68 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b20:	6a18      	ldr	r0, [r3, #32]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b28:	6959      	ldr	r1, [r3, #20]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	7efb      	ldrb	r3, [r7, #27]
 8005b30:	f7ff fd54 	bl	80055dc <fit_lfn>
				dp->fs->wflag = 1;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b40:	2201      	movs	r2, #1
 8005b42:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff faed 	bl	8005126 <dir_next>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <dir_register+0x1b2>
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1c6      	bne.n	8005af4 <dir_register+0x13c>
 8005b66:	e000      	b.n	8005b6a <dir_register+0x1b2>
				if (res != FR_OK) break;
 8005b68:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d13e      	bne.n	8005bf0 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7fe fd53 	bl	8004630 <move_window>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d12b      	bne.n	8005bf0 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fad9 	bl	800415c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb0:	6958      	ldr	r0, [r3, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	220b      	movs	r2, #11
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f7fe faaf 	bl	8004120 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	330b      	adds	r3, #11
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	f002 0218 	and.w	r2, r2, #24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bec:	2201      	movs	r2, #1
 8005bee:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3730      	adds	r7, #48	; 0x30
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	4ec4ec4f 	.word	0x4ec4ec4f

08005c00 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e002      	b.n	8005c18 <create_name+0x18>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3301      	adds	r3, #1
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c1e:	d0f8      	beq.n	8005c12 <create_name+0x12>
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b5c      	cmp	r3, #92	; 0x5c
 8005c26:	d0f4      	beq.n	8005c12 <create_name+0x12>
	lfn = dp->lfn;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	61ba      	str	r2, [r7, #24]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c4a:	2b1f      	cmp	r3, #31
 8005c4c:	d92f      	bls.n	8005cae <create_name+0xae>
 8005c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c50:	2b2f      	cmp	r3, #47	; 0x2f
 8005c52:	d02c      	beq.n	8005cae <create_name+0xae>
 8005c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c56:	2b5c      	cmp	r3, #92	; 0x5c
 8005c58:	d029      	beq.n	8005cae <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2bfe      	cmp	r3, #254	; 0xfe
 8005c5e:	d901      	bls.n	8005c64 <create_name+0x64>
			return FR_INVALID_NAME;
 8005c60:	2306      	movs	r3, #6
 8005c62:	e186      	b.n	8005f72 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fd7e 	bl	8007770 <ff_convert>
 8005c74:	4603      	mov	r3, r0
 8005c76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <create_name+0x82>
 8005c7e:	2306      	movs	r3, #6
 8005c80:	e177      	b.n	8005f72 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d809      	bhi.n	8005c9c <create_name+0x9c>
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	488e      	ldr	r0, [pc, #568]	; (8005ec8 <create_name+0x2c8>)
 8005c8e:	f7fe faa5 	bl	80041dc <chk_chr>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <create_name+0x9c>
			return FR_INVALID_NAME;
 8005c98:	2306      	movs	r3, #6
 8005c9a:	e16a      	b.n	8005f72 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	617a      	str	r2, [r7, #20]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005caa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005cac:	e7c5      	b.n	8005c3a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cba:	2b1f      	cmp	r3, #31
 8005cbc:	d801      	bhi.n	8005cc2 <create_name+0xc2>
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	e000      	b.n	8005cc4 <create_name+0xc4>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005cc8:	e011      	b.n	8005cee <create_name+0xee>
		w = lfn[di - 1];
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d002      	beq.n	8005ce8 <create_name+0xe8>
 8005ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce6:	d106      	bne.n	8005cf6 <create_name+0xf6>
		di--;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ea      	bne.n	8005cca <create_name+0xca>
 8005cf4:	e000      	b.n	8005cf8 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005cf6:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <create_name+0x102>
 8005cfe:	2306      	movs	r3, #6
 8005d00:	e137      	b.n	8005f72 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	220b      	movs	r2, #11
 8005d18:	2120      	movs	r1, #32
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fa1e 	bl	800415c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e002      	b.n	8005d2c <create_name+0x12c>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d0f5      	beq.n	8005d26 <create_name+0x126>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	2b2e      	cmp	r3, #46	; 0x2e
 8005d46:	d0ee      	beq.n	8005d26 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <create_name+0x162>
 8005d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d52:	f043 0303 	orr.w	r3, r3, #3
 8005d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005d5a:	e002      	b.n	8005d62 <create_name+0x162>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <create_name+0x17c>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	2b2e      	cmp	r3, #46	; 0x2e
 8005d7a:	d1ef      	bne.n	8005d5c <create_name+0x15c>

	b = i = 0; ni = 8;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d86:	2308      	movs	r3, #8
 8005d88:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	61ba      	str	r2, [r7, #24]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8091 	beq.w	8005ec4 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d006      	beq.n	8005db6 <create_name+0x1b6>
 8005da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005daa:	2b2e      	cmp	r3, #46	; 0x2e
 8005dac:	d10a      	bne.n	8005dc4 <create_name+0x1c4>
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d006      	beq.n	8005dc4 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dba:	f043 0303 	orr.w	r3, r3, #3
 8005dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dc2:	e07e      	b.n	8005ec2 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d203      	bcs.n	8005dd4 <create_name+0x1d4>
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d123      	bne.n	8005e1c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b0b      	cmp	r3, #11
 8005dd8:	d106      	bne.n	8005de8 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8005dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dde:	f043 0303 	orr.w	r3, r3, #3
 8005de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005de6:	e076      	b.n	8005ed6 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d005      	beq.n	8005dfc <create_name+0x1fc>
 8005df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df4:	f043 0303 	orr.w	r3, r3, #3
 8005df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d867      	bhi.n	8005ed4 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	2308      	movs	r3, #8
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	230b      	movs	r3, #11
 8005e0e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e1a:	e052      	b.n	8005ec2 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e20:	d914      	bls.n	8005e4c <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fca2 	bl	8007770 <ff_convert>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <create_name+0x240>
 8005e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e38:	3b80      	subs	r3, #128	; 0x80
 8005e3a:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <create_name+0x2cc>)
 8005e3c:	5cd3      	ldrb	r3, [r2, r3]
 8005e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <create_name+0x262>
 8005e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e54:	4619      	mov	r1, r3
 8005e56:	481e      	ldr	r0, [pc, #120]	; (8005ed0 <create_name+0x2d0>)
 8005e58:	f7fe f9c0 	bl	80041dc <chk_chr>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005e62:	235f      	movs	r3, #95	; 0x5f
 8005e64:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e6a:	f043 0303 	orr.w	r3, r3, #3
 8005e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e72:	e01b      	b.n	8005eac <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d909      	bls.n	8005e8e <create_name+0x28e>
 8005e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e7c:	2b5a      	cmp	r3, #90	; 0x5a
 8005e7e:	d806      	bhi.n	8005e8e <create_name+0x28e>
					b |= 2;
 8005e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e8c:	e00e      	b.n	8005eac <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e90:	2b60      	cmp	r3, #96	; 0x60
 8005e92:	d90b      	bls.n	8005eac <create_name+0x2ac>
 8005e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e96:	2b7a      	cmp	r3, #122	; 0x7a
 8005e98:	d808      	bhi.n	8005eac <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8005e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ea8:	3b20      	subs	r3, #32
 8005eaa:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	6239      	str	r1, [r7, #32]
 8005eba:	4413      	add	r3, r2
 8005ebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005ec2:	e762      	b.n	8005d8a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005ec4:	bf00      	nop
 8005ec6:	e006      	b.n	8005ed6 <create_name+0x2d6>
 8005ec8:	08007a58 	.word	0x08007a58
 8005ecc:	08007ab8 	.word	0x08007ab8
 8005ed0:	08007a64 	.word	0x08007a64
			if (si > di) break;			/* No extension */
 8005ed4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2be5      	cmp	r3, #229	; 0xe5
 8005ee2:	d105      	bne.n	8005ef0 <create_name+0x2f0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2205      	movs	r2, #5
 8005eee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d104      	bne.n	8005f00 <create_name+0x300>
 8005ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f04:	f003 030c 	and.w	r3, r3, #12
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d005      	beq.n	8005f18 <create_name+0x318>
 8005f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d105      	bne.n	8005f24 <create_name+0x324>
		cf |= NS_LFN;
 8005f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d117      	bne.n	8005f60 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f34:	f003 0303 	and.w	r3, r3, #3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <create_name+0x348>
 8005f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f40:	f043 0310 	orr.w	r3, r3, #16
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d105      	bne.n	8005f60 <create_name+0x360>
 8005f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	330b      	adds	r3, #11
 8005f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f70:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop

08005f7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f8c:	d003      	beq.n	8005f96 <follow_path+0x1a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b5c      	cmp	r3, #92	; 0x5c
 8005f94:	d102      	bne.n	8005f9c <follow_path+0x20>
		path++;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b1f      	cmp	r3, #31
 8005fae:	d80c      	bhi.n	8005fca <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fe ffe9 	bl	8004f8a <dir_sdi>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6153      	str	r3, [r2, #20]
 8005fc8:	e049      	b.n	800605e <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fca:	463b      	mov	r3, r7
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fe16 	bl	8005c00 <create_name>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d13a      	bne.n	8006054 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fc1e 	bl	8005820 <dir_find>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	7adb      	ldrb	r3, [r3, #11]
 8005ff2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d12b      	bne.n	8006058 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d126      	bne.n	8006058 <follow_path+0xdc>
 800600a:	2305      	movs	r3, #5
 800600c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800600e:	e023      	b.n	8006058 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d120      	bne.n	800605c <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	330b      	adds	r3, #11
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006032:	2305      	movs	r3, #5
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	e012      	b.n	800605e <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fa07 	bl	8005456 <ld_clust>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006050:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006052:	e7ba      	b.n	8005fca <follow_path+0x4e>
			if (res != FR_OK) break;
 8006054:	bf00      	nop
 8006056:	e002      	b.n	800605e <follow_path+0xe2>
				break;
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800605c:	bf00      	nop
		}
	}

	return res;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d031      	beq.n	80060e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e002      	b.n	800608c <get_ldnumber+0x24>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3301      	adds	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b1f      	cmp	r3, #31
 8006092:	d903      	bls.n	800609c <get_ldnumber+0x34>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b3a      	cmp	r3, #58	; 0x3a
 800609a:	d1f4      	bne.n	8006086 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b3a      	cmp	r3, #58	; 0x3a
 80060a2:	d11c      	bne.n	80060de <get_ldnumber+0x76>
			tp = *path;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	60fa      	str	r2, [r7, #12]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	3b30      	subs	r3, #48	; 0x30
 80060b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d80e      	bhi.n	80060da <get_ldnumber+0x72>
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d10a      	bne.n	80060da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d107      	bne.n	80060da <get_ldnumber+0x72>
					vol = (int)i;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	3301      	adds	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	e002      	b.n	80060e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060e2:	693b      	ldr	r3, [r7, #16]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
	...

080060f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	2200      	movs	r2, #0
 8006102:	711a      	strb	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	461a      	mov	r2, r3
 800610c:	f04f 33ff 	mov.w	r3, #4294967295
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fe fa8b 	bl	8004630 <move_window>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <check_fs+0x34>
		return 3;
 8006120:	2303      	movs	r3, #3
 8006122:	e04a      	b.n	80061ba <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800612a:	3301      	adds	r3, #1
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	b21a      	sxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006138:	b21b      	sxth	r3, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	b21b      	sxth	r3, r3
 800613e:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <check_fs+0xd4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d001      	beq.n	8006148 <check_fs+0x58>
		return 2;
 8006144:	2302      	movs	r3, #2
 8006146:	e038      	b.n	80061ba <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3336      	adds	r3, #54	; 0x36
 800614c:	3303      	adds	r3, #3
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	061a      	lsls	r2, r3, #24
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3336      	adds	r3, #54	; 0x36
 8006156:	3302      	adds	r3, #2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	4313      	orrs	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	3236      	adds	r2, #54	; 0x36
 8006162:	3201      	adds	r2, #1
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	0212      	lsls	r2, r2, #8
 8006168:	4313      	orrs	r3, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006170:	4313      	orrs	r3, r2
 8006172:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <check_fs+0xd8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <check_fs+0x90>
		return 0;
 800617c:	2300      	movs	r3, #0
 800617e:	e01c      	b.n	80061ba <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3352      	adds	r3, #82	; 0x52
 8006184:	3303      	adds	r3, #3
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	061a      	lsls	r2, r3, #24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3352      	adds	r3, #82	; 0x52
 800618e:	3302      	adds	r3, #2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	041b      	lsls	r3, r3, #16
 8006194:	4313      	orrs	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	3252      	adds	r2, #82	; 0x52
 800619a:	3201      	adds	r2, #1
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	0212      	lsls	r2, r2, #8
 80061a0:	4313      	orrs	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <check_fs+0xd8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d101      	bne.n	80061b8 <check_fs+0xc8>
		return 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <check_fs+0xca>

	return 1;
 80061b8:	2301      	movs	r3, #1
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	ffffaa55 	.word	0xffffaa55
 80061c8:	00544146 	.word	0x00544146

080061cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b096      	sub	sp, #88	; 0x58
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f7ff ff41 	bl	8006068 <get_ldnumber>
 80061e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da01      	bge.n	80061f2 <find_volume+0x26>
 80061ee:	230b      	movs	r3, #11
 80061f0:	e311      	b.n	8006816 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061f2:	4a98      	ldr	r2, [pc, #608]	; (8006454 <find_volume+0x288>)
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <find_volume+0x3a>
 8006202:	230c      	movs	r3, #12
 8006204:	e307      	b.n	8006816 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01c      	beq.n	8006252 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd fedf 	bl	8003fe4 <disk_status>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800622c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <find_volume+0x82>
 800623e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800624a:	230a      	movs	r3, #10
 800624c:	e2e3      	b.n	8006816 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800624e:	2300      	movs	r3, #0
 8006250:	e2e1      	b.n	8006816 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	b2da      	uxtb	r2, r3
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006266:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fd fed1 	bl	8004018 <disk_initialize>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800627c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006288:	2303      	movs	r3, #3
 800628a:	e2c4      	b.n	8006816 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <find_volume+0xd6>
 8006292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800629e:	230a      	movs	r3, #10
 80062a0:	e2b9      	b.n	8006816 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a8:	7858      	ldrb	r0, [r3, #1]
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	330a      	adds	r3, #10
 80062b2:	461a      	mov	r2, r3
 80062b4:	2102      	movs	r1, #2
 80062b6:	f7fd ff15 	bl	80040e4 <disk_ioctl>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10d      	bne.n	80062dc <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c6:	895b      	ldrh	r3, [r3, #10]
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d306      	bcc.n	80062dc <find_volume+0x110>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	895b      	ldrh	r3, [r3, #10]
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062da:	d901      	bls.n	80062e0 <find_volume+0x114>
 80062dc:	2301      	movs	r3, #1
 80062de:	e29a      	b.n	8006816 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80062e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062e8:	f7ff ff02 	bl	80060f0 <check_fs>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80062f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d153      	bne.n	80063a2 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80062fa:	2300      	movs	r3, #0
 80062fc:	643b      	str	r3, [r7, #64]	; 0x40
 80062fe:	e028      	b.n	8006352 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800630a:	4413      	add	r3, r2
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	3304      	adds	r3, #4
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <find_volume+0x172>
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	330b      	adds	r3, #11
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	061a      	lsls	r2, r3, #24
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	330a      	adds	r3, #10
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	4313      	orrs	r3, r2
 800632a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632c:	3209      	adds	r2, #9
 800632e:	7812      	ldrb	r2, [r2, #0]
 8006330:	0212      	lsls	r2, r2, #8
 8006332:	4313      	orrs	r3, r2
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	3208      	adds	r2, #8
 8006338:	7812      	ldrb	r2, [r2, #0]
 800633a:	431a      	orrs	r2, r3
 800633c:	e000      	b.n	8006340 <find_volume+0x174>
 800633e:	2200      	movs	r2, #0
 8006340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	3358      	adds	r3, #88	; 0x58
 8006346:	443b      	add	r3, r7
 8006348:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634e:	3301      	adds	r3, #1
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
 8006352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006354:	2b03      	cmp	r3, #3
 8006356:	d9d3      	bls.n	8006300 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006358:	2300      	movs	r3, #0
 800635a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800635c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <find_volume+0x19c>
 8006362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006364:	3b01      	subs	r3, #1
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3358      	adds	r3, #88	; 0x58
 800636e:	443b      	add	r3, r7
 8006370:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006374:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <find_volume+0x1bc>
 800637c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800637e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006380:	f7ff feb6 	bl	80060f0 <check_fs>
 8006384:	4603      	mov	r3, r0
 8006386:	e000      	b.n	800638a <find_volume+0x1be>
 8006388:	2302      	movs	r3, #2
 800638a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800638e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <find_volume+0x1d6>
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	3301      	adds	r3, #1
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d9e2      	bls.n	8006368 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80063a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d101      	bne.n	80063ae <find_volume+0x1e2>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e233      	b.n	8006816 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80063ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <find_volume+0x1ee>
 80063b6:	230d      	movs	r3, #13
 80063b8:	e22d      	b.n	8006816 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	7b1b      	ldrb	r3, [r3, #12]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	b21a      	sxth	r2, r3
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	7adb      	ldrb	r3, [r3, #11]
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	895b      	ldrh	r3, [r3, #10]
 80063d4:	b21b      	sxth	r3, r3
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d001      	beq.n	80063de <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80063da:	230d      	movs	r3, #13
 80063dc:	e21b      	b.n	8006816 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	7ddb      	ldrb	r3, [r3, #23]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	b21a      	sxth	r2, r3
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	7d9b      	ldrb	r3, [r3, #22]
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80063f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d112      	bne.n	8006420 <find_volume+0x254>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006400:	061a      	lsls	r2, r3, #24
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	4313      	orrs	r3, r2
 800640c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006412:	0212      	lsls	r2, r2, #8
 8006414:	4313      	orrs	r3, r2
 8006416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006418:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800641c:	4313      	orrs	r3, r2
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	461a      	mov	r2, r3
 8006428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	7c1a      	ldrb	r2, [r3, #16]
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006436:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d009      	beq.n	8006458 <find_volume+0x28c>
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d003      	beq.n	8006458 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006450:	230d      	movs	r3, #13
 8006452:	e1e0      	b.n	8006816 <find_volume+0x64a>
 8006454:	20002230 	.word	0x20002230
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645e:	78db      	ldrb	r3, [r3, #3]
 8006460:	461a      	mov	r2, r3
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	7b5a      	ldrb	r2, [r3, #13]
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006474:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	789b      	ldrb	r3, [r3, #2]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <find_volume+0x2d0>
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006488:	789b      	ldrb	r3, [r3, #2]
 800648a:	461a      	mov	r2, r3
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006492:	789b      	ldrb	r3, [r3, #2]
 8006494:	3b01      	subs	r3, #1
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800649c:	230d      	movs	r3, #13
 800649e:	e1ba      	b.n	8006816 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	7c9b      	ldrb	r3, [r3, #18]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	b21a      	sxth	r2, r3
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	7c5b      	ldrb	r3, [r3, #17]
 80064ac:	b21b      	sxth	r3, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	b21b      	sxth	r3, r3
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ba:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c2:	891b      	ldrh	r3, [r3, #8]
 80064c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ca:	8952      	ldrh	r2, [r2, #10]
 80064cc:	0952      	lsrs	r2, r2, #5
 80064ce:	b292      	uxth	r2, r2
 80064d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80064d4:	fb01 f202 	mul.w	r2, r1, r2
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80064e0:	230d      	movs	r3, #13
 80064e2:	e198      	b.n	8006816 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	7d1b      	ldrb	r3, [r3, #20]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	b21a      	sxth	r2, r3
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	7cdb      	ldrb	r3, [r3, #19]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80064fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <find_volume+0x35a>
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006506:	061a      	lsls	r2, r3, #24
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	4313      	orrs	r3, r2
 8006512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006514:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006518:	0212      	lsls	r2, r2, #8
 800651a:	4313      	orrs	r3, r2
 800651c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006522:	4313      	orrs	r3, r2
 8006524:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	7bdb      	ldrb	r3, [r3, #15]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	b21a      	sxth	r2, r3
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	7b9b      	ldrb	r3, [r3, #14]
 8006532:	b21b      	sxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b21b      	sxth	r3, r3
 8006538:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800653a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <find_volume+0x378>
 8006540:	230d      	movs	r3, #13
 8006542:	e168      	b.n	8006816 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	4413      	add	r3, r2
 800654a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006550:	8911      	ldrh	r1, [r2, #8]
 8006552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006558:	8952      	ldrh	r2, [r2, #10]
 800655a:	0952      	lsrs	r2, r2, #5
 800655c:	b292      	uxth	r2, r2
 800655e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006562:	b292      	uxth	r2, r2
 8006564:	4413      	add	r3, r2
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	429a      	cmp	r2, r3
 800656e:	d201      	bcs.n	8006574 <find_volume+0x3a8>
 8006570:	230d      	movs	r3, #13
 8006572:	e150      	b.n	8006816 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006580:	7892      	ldrb	r2, [r2, #2]
 8006582:	fbb3 f3f2 	udiv	r3, r3, r2
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <find_volume+0x3c6>
 800658e:	230d      	movs	r3, #13
 8006590:	e141      	b.n	8006816 <find_volume+0x64a>
	fmt = FS_FAT12;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800659e:	4293      	cmp	r3, r2
 80065a0:	d902      	bls.n	80065a8 <find_volume+0x3dc>
 80065a2:	2302      	movs	r3, #2
 80065a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d902      	bls.n	80065b8 <find_volume+0x3ec>
 80065b2:	2303      	movs	r3, #3
 80065b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	3302      	adds	r3, #2
 80065bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065c2:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ca:	461a      	mov	r2, r3
 80065cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ce:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80065d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	4413      	add	r3, r2
 80065d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065dc:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80065de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	4413      	add	r3, r2
 80065e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ea:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80065ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d124      	bne.n	800663e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	891b      	ldrh	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <find_volume+0x438>
 8006600:	230d      	movs	r3, #13
 8006602:	e108      	b.n	8006816 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800660a:	061a      	lsls	r2, r3, #24
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	4313      	orrs	r3, r2
 8006616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006618:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800661c:	0212      	lsls	r2, r2, #8
 800661e:	4313      	orrs	r3, r2
 8006620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006622:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006626:	4313      	orrs	r3, r2
 8006628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800662a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800662e:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	647b      	str	r3, [r7, #68]	; 0x44
 800663c:	e02b      	b.n	8006696 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	891b      	ldrh	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <find_volume+0x482>
 800664a:	230d      	movs	r3, #13
 800664c:	e0e3      	b.n	8006816 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	4413      	add	r3, r2
 800665a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006660:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006666:	2b02      	cmp	r3, #2
 8006668:	d105      	bne.n	8006676 <find_volume+0x4aa>
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	e00e      	b.n	8006694 <find_volume+0x4c8>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	4613      	mov	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4413      	add	r3, r2
 8006684:	085a      	lsrs	r2, r3, #1
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006694:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	440b      	add	r3, r1
 80066ac:	3b01      	subs	r3, #1
 80066ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066b0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80066b4:	8949      	ldrh	r1, [r1, #10]
 80066b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d201      	bcs.n	80066c2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80066be:	230d      	movs	r3, #13
 80066c0:	e0a9      	b.n	8006816 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c8:	461a      	mov	r2, r3
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	6113      	str	r3, [r2, #16]
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066de:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e6:	2280      	movs	r2, #128	; 0x80
 80066e8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80066ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d17a      	bne.n	80067e8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	b21a      	sxth	r2, r3
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006702:	b21b      	sxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b21b      	sxth	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d16d      	bne.n	80067e8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800670c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670e:	3301      	adds	r3, #1
 8006710:	4619      	mov	r1, r3
 8006712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006714:	f7fd ff8c 	bl	8004630 <move_window>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d164      	bne.n	80067e8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006724:	2200      	movs	r2, #0
 8006726:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	b21a      	sxth	r2, r3
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006738:	b21b      	sxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b21b      	sxth	r3, r3
 800673e:	4a38      	ldr	r2, [pc, #224]	; (8006820 <find_volume+0x654>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d151      	bne.n	80067e8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	061a      	lsls	r2, r3, #24
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	789b      	ldrb	r3, [r3, #2]
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	4313      	orrs	r3, r2
 8006752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006754:	7852      	ldrb	r2, [r2, #1]
 8006756:	0212      	lsls	r2, r2, #8
 8006758:	4313      	orrs	r3, r2
 800675a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	4a30      	ldr	r2, [pc, #192]	; (8006824 <find_volume+0x658>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d140      	bne.n	80067e8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800676c:	061a      	lsls	r2, r3, #24
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4313      	orrs	r3, r2
 8006778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800677a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800677e:	0212      	lsls	r2, r2, #8
 8006780:	4313      	orrs	r3, r2
 8006782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006784:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006788:	4313      	orrs	r3, r2
 800678a:	4a27      	ldr	r2, [pc, #156]	; (8006828 <find_volume+0x65c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d12b      	bne.n	80067e8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006796:	061a      	lsls	r2, r3, #24
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	4313      	orrs	r3, r2
 80067a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80067a8:	0212      	lsls	r2, r2, #8
 80067aa:	4313      	orrs	r3, r2
 80067ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ae:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80067b2:	4313      	orrs	r3, r2
 80067b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067ba:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80067c2:	061a      	lsls	r2, r3, #24
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	4313      	orrs	r3, r2
 80067ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067d0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80067d4:	0212      	lsls	r2, r2, #8
 80067d6:	4313      	orrs	r3, r2
 80067d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067da:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80067de:	4313      	orrs	r3, r2
 80067e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067e6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ee:	461a      	mov	r2, r3
 80067f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <find_volume+0x660>)
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	4b0b      	ldr	r3, [pc, #44]	; (800682c <find_volume+0x660>)
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <find_volume+0x660>)
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800680e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006810:	f7fd fe92 	bl	8004538 <clear_lock>
#endif

	return FR_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3758      	adds	r7, #88	; 0x58
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	ffffaa55 	.word	0xffffaa55
 8006824:	41615252 	.word	0x41615252
 8006828:	61417272 	.word	0x61417272
 800682c:	20002234 	.word	0x20002234

08006830 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02a      	beq.n	8006898 <validate+0x68>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d024      	beq.n	8006898 <validate+0x68>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <validate+0x68>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686c:	88da      	ldrh	r2, [r3, #6]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006874:	889b      	ldrh	r3, [r3, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d10e      	bne.n	8006898 <validate+0x68>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	4618      	mov	r0, r3
 800688a:	f7fd fbab 	bl	8003fe4 <disk_status>
 800688e:	4603      	mov	r3, r0
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006898:	2309      	movs	r3, #9
 800689a:	e000      	b.n	800689e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80068ba:	f107 0310 	add.w	r3, r7, #16
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fbd2 	bl	8006068 <get_ldnumber>
 80068c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da01      	bge.n	80068d0 <f_mount+0x28>
 80068cc:	230b      	movs	r3, #11
 80068ce:	e02f      	b.n	8006930 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <f_mount+0x90>)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80068e0:	69b8      	ldr	r0, [r7, #24]
 80068e2:	f7fd fe29 	bl	8004538 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	490d      	ldr	r1, [pc, #52]	; (8006938 <f_mount+0x90>)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <f_mount+0x6e>
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d001      	beq.n	800691a <f_mount+0x72>
 8006916:	2300      	movs	r3, #0
 8006918:	e00a      	b.n	8006930 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800691a:	f107 0108 	add.w	r1, r7, #8
 800691e:	f107 030c 	add.w	r3, r7, #12
 8006922:	2200      	movs	r2, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fc51 	bl	80061cc <find_volume>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20002230 	.word	0x20002230

0800693c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800694a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800694e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006952:	f843 1c50 	str.w	r1, [r3, #-80]
 8006956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800695a:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800695e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006962:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <f_open+0x32>
 800696a:	2309      	movs	r3, #9
 800696c:	e2f7      	b.n	8006f5e <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800696e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006972:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006984:	461a      	mov	r2, r3
 8006986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800698a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006996:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800699a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	f107 0118 	add.w	r1, r7, #24
 80069a8:	3910      	subs	r1, #16
 80069aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069ae:	3b18      	subs	r3, #24
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fc09 	bl	80061cc <find_volume>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069c0:	f102 0217 	add.w	r2, r2, #23
 80069c4:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80069c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80069ca:	f103 0317 	add.w	r3, r3, #23
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 82bf 	bne.w	8006f54 <f_open+0x618>
		INIT_BUF(dj);
 80069d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069da:	461a      	mov	r2, r3
 80069dc:	f107 0318 	add.w	r3, r7, #24
 80069e0:	3b04      	subs	r3, #4
 80069e2:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80069e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069ea:	461a      	mov	r2, r3
 80069ec:	4bd4      	ldr	r3, [pc, #848]	; (8006d40 <f_open+0x404>)
 80069ee:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80069f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069f6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80069fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069fe:	3b18      	subs	r3, #24
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff faba 	bl	8005f7c <follow_path>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a0e:	f102 0217 	add.w	r2, r2, #23
 8006a12:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006a14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a18:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8006a1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a20:	f102 0210 	add.w	r2, r2, #16
 8006a24:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006a26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a2a:	f103 0317 	add.w	r3, r3, #23
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d126      	bne.n	8006a82 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8006a34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a38:	f103 0310 	add.w	r3, r3, #16
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <f_open+0x114>
				res = FR_INVALID_NAME;
 8006a42:	2306      	movs	r3, #6
 8006a44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a48:	f102 0217 	add.w	r2, r2, #23
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	e018      	b.n	8006a82 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a54:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf14      	ite	ne
 8006a60:	2301      	movne	r3, #1
 8006a62:	2300      	moveq	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a6c:	3b18      	subs	r3, #24
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd fbcd 	bl	8004210 <chk_lock>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a7c:	f102 0217 	add.w	r2, r2, #23
 8006a80:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a86:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006a8a:	f003 031c 	and.w	r3, r3, #28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 813c 	beq.w	8006d0c <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8006a94:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a98:	f103 0317 	add.w	r3, r3, #23
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02e      	beq.n	8006b00 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aa6:	f103 0317 	add.w	r3, r3, #23
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d112      	bne.n	8006ad6 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ab0:	f7fd fc1e 	bl	80042f0 <enq_lock>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <f_open+0x18e>
 8006aba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006abe:	3b18      	subs	r3, #24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe ff79 	bl	80059b8 <dir_register>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e000      	b.n	8006acc <f_open+0x190>
 8006aca:	2312      	movs	r3, #18
 8006acc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ad0:	f102 0217 	add.w	r2, r2, #23
 8006ad4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ada:	461a      	mov	r2, r3
 8006adc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ae0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8006aec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006af0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8006af4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006af8:	f102 0210 	add.w	r2, r2, #16
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e01f      	b.n	8006b40 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b04:	f103 0310 	add.w	r3, r3, #16
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330b      	adds	r3, #11
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 0311 	and.w	r3, r3, #17
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d006      	beq.n	8006b24 <f_open+0x1e8>
					res = FR_DENIED;
 8006b16:	2307      	movs	r3, #7
 8006b18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b1c:	f102 0217 	add.w	r2, r2, #23
 8006b20:	7013      	strb	r3, [r2, #0]
 8006b22:	e00d      	b.n	8006b40 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006b24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b28:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <f_open+0x204>
						res = FR_EXIST;
 8006b34:	2308      	movs	r3, #8
 8006b36:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b3a:	f102 0217 	add.w	r2, r2, #23
 8006b3e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006b40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b44:	f103 0317 	add.w	r3, r3, #23
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8113 	bne.w	8006d76 <f_open+0x43a>
 8006b50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b54:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 810a 	beq.w	8006d76 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8006b62:	f7fd f9dd 	bl	8003f20 <get_fattime>
 8006b66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b6a:	f103 030c 	add.w	r3, r3, #12
 8006b6e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006b70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b74:	f103 0310 	add.w	r3, r3, #16
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330e      	adds	r3, #14
 8006b7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b80:	f102 020c 	add.w	r2, r2, #12
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b8e:	f103 030c 	add.w	r3, r3, #12
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b9e:	f103 0310 	add.w	r3, r3, #16
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330f      	adds	r3, #15
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bae:	f103 030c 	add.w	r3, r3, #12
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	0c1a      	lsrs	r2, r3, #16
 8006bb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bba:	f103 0310 	add.w	r3, r3, #16
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3310      	adds	r3, #16
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bca:	f103 030c 	add.w	r3, r3, #12
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0e1a      	lsrs	r2, r3, #24
 8006bd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bd6:	f103 0310 	add.w	r3, r3, #16
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3311      	adds	r3, #17
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006be2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006be6:	f103 0310 	add.w	r3, r3, #16
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330b      	adds	r3, #11
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006bf2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bf6:	f103 0310 	add.w	r3, r3, #16
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	331c      	adds	r3, #28
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c06:	f103 0310 	add.w	r3, r3, #16
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	331d      	adds	r3, #29
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c16:	f103 0310 	add.w	r3, r3, #16
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	331e      	adds	r3, #30
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c26:	f103 0310 	add.w	r3, r3, #16
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	331f      	adds	r3, #31
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c36:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006c3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c3e:	f102 0210 	add.w	r2, r2, #16
 8006c42:	6811      	ldr	r1, [r2, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fc06 	bl	8005456 <ld_clust>
 8006c4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c4e:	f103 0308 	add.w	r3, r3, #8
 8006c52:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006c54:	2100      	movs	r1, #0
 8006c56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c5a:	f103 0310 	add.w	r3, r3, #16
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	f7fe fc27 	bl	80054b2 <st_clust>
				dj.fs->wflag = 1;
 8006c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c68:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c70:	2201      	movs	r2, #1
 8006c72:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8006c74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c78:	f103 0308 	add.w	r3, r3, #8
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d079      	beq.n	8006d76 <f_open+0x43a>
					dw = dj.fs->winsect;
 8006c82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c86:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c94:	f102 020c 	add.w	r2, r2, #12
 8006c98:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c9e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006ca2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ca6:	f102 0208 	add.w	r2, r2, #8
 8006caa:	6811      	ldr	r1, [r2, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe f823 	bl	8004cf8 <remove_chain>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cb8:	f102 0217 	add.w	r2, r2, #23
 8006cbc:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006cbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006cc2:	f103 0317 	add.w	r3, r3, #23
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d154      	bne.n	8006d76 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006ccc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006cd0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8006cd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006cd8:	f103 0308 	add.w	r3, r3, #8
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ce4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006cea:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006cee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cf2:	f102 020c 	add.w	r2, r2, #12
 8006cf6:	6811      	ldr	r1, [r2, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd fc99 	bl	8004630 <move_window>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d04:	f102 0217 	add.w	r2, r2, #23
 8006d08:	7013      	strb	r3, [r2, #0]
 8006d0a:	e034      	b.n	8006d76 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006d0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d10:	f103 0317 	add.w	r3, r3, #23
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d12d      	bne.n	8006d76 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006d1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d1e:	f103 0310 	add.w	r3, r3, #16
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330b      	adds	r3, #11
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <f_open+0x408>
					res = FR_NO_FILE;
 8006d30:	2304      	movs	r3, #4
 8006d32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d36:	f102 0217 	add.w	r2, r2, #23
 8006d3a:	7013      	strb	r3, [r2, #0]
 8006d3c:	e01b      	b.n	8006d76 <f_open+0x43a>
 8006d3e:	bf00      	nop
 8006d40:	20002250 	.word	0x20002250
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006d44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d48:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <f_open+0x43a>
 8006d54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d58:	f103 0310 	add.w	r3, r3, #16
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330b      	adds	r3, #11
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <f_open+0x43a>
						res = FR_DENIED;
 8006d6a:	2307      	movs	r3, #7
 8006d6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d70:	f102 0217 	add.w	r2, r2, #23
 8006d74:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006d76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d7a:	f103 0317 	add.w	r3, r3, #23
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d157      	bne.n	8006e34 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006d84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d88:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <f_open+0x46e>
				mode |= FA__WRITTEN;
 8006d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d9e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006da2:	f043 0320 	orr.w	r3, r3, #32
 8006da6:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006dae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006dbc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006dc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dc4:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006dc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006dca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dd8:	f103 0310 	add.w	r3, r3, #16
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006de4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006dfc:	3b18      	subs	r3, #24
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd fa99 	bl	8004338 <inc_lock>
 8006e06:	4602      	mov	r2, r0
 8006e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e0c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8006e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e1a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <f_open+0x4f8>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e2e:	f102 0217 	add.w	r2, r2, #23
 8006e32:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006e34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e38:	f103 0317 	add.w	r3, r3, #23
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 8088 	bne.w	8006f54 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8006e44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e48:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e50:	461a      	mov	r2, r3
 8006e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e56:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006e5a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e60:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e68:	2200      	movs	r2, #0
 8006e6a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e70:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006e74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e78:	f102 0210 	add.w	r2, r2, #16
 8006e7c:	6811      	ldr	r1, [r2, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fae9 	bl	8005456 <ld_clust>
 8006e84:	4602      	mov	r2, r0
 8006e86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e8a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006e94:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e98:	f103 0310 	add.w	r3, r3, #16
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	331f      	adds	r3, #31
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	061a      	lsls	r2, r3, #24
 8006ea4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ea8:	f103 0310 	add.w	r3, r3, #16
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	331e      	adds	r3, #30
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006eba:	f102 0210 	add.w	r2, r2, #16
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	321d      	adds	r2, #29
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	0212      	lsls	r2, r2, #8
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ecc:	f102 0210 	add.w	r2, r2, #16
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	321c      	adds	r2, #28
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006edc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ee4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8006ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006eea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006ef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006efc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f04:	461a      	mov	r2, r3
 8006f06:	2300      	movs	r3, #0
 8006f08:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f0e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f20:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006f24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006f28:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f30:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8006f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f36:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f44:	88da      	ldrh	r2, [r3, #6]
 8006f46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f4a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006f54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f58:	f103 0317 	add.w	r3, r3, #23
 8006f5c:	781b      	ldrb	r3, [r3, #0]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fc53 	bl	8006830 <validate>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <f_write+0x2c>
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	e21e      	b.n	80073d6 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9e:	79db      	ldrb	r3, [r3, #7]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006faa:	79db      	ldrb	r3, [r3, #7]
 8006fac:	e213      	b.n	80073d6 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb4:	799b      	ldrb	r3, [r3, #6]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006fbe:	2307      	movs	r3, #7
 8006fc0:	e209      	b.n	80073d6 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	441a      	add	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	f080 81d9 	bcs.w	800738e <f_write+0x422>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006fe0:	e1d5      	b.n	800738e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ff6:	8952      	ldrh	r2, [r2, #10]
 8006ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ffc:	fb01 f202 	mul.w	r2, r1, r2
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 8169 	bne.w	80072da <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800701c:	8952      	ldrh	r2, [r2, #10]
 800701e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007022:	b2da      	uxtb	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	789b      	ldrb	r3, [r3, #2]
 8007032:	3b01      	subs	r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	4013      	ands	r3, r2
 8007038:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800703a:	7dbb      	ldrb	r3, [r7, #22]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d15f      	bne.n	8007100 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d111      	bne.n	8007070 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d126      	bne.n	80070aa <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fea7 	bl	8004dba <create_chain>
 800706c:	6278      	str	r0, [r7, #36]	; 0x24
 800706e:	e01c      	b.n	80070aa <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4619      	mov	r1, r3
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7fd ff3f 	bl	8004f0a <clmt_clust>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24
 800708e:	e00c      	b.n	80070aa <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fd fe89 	bl	8004dba <create_chain>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8173 	beq.w	8007398 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d106      	bne.n	80070c6 <f_write+0x15a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	2202      	movs	r2, #2
 80070c0:	71da      	strb	r2, [r3, #7]
 80070c2:	2302      	movs	r3, #2
 80070c4:	e187      	b.n	80073d6 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070cc:	d106      	bne.n	80070dc <f_write+0x170>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d4:	2201      	movs	r2, #1
 80070d6:	71da      	strb	r2, [r3, #7]
 80070d8:	2301      	movs	r3, #1
 80070da:	e17c      	b.n	80073d6 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e2:	461a      	mov	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <f_write+0x194>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fa:	461a      	mov	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	799b      	ldrb	r3, [r3, #6]
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d023      	beq.n	8007158 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711c:	7858      	ldrb	r0, [r3, #1]
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	2301      	movs	r3, #1
 800712a:	f7fc ffbb 	bl	80040a4 <disk_write>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713a:	2201      	movs	r2, #1
 800713c:	71da      	strb	r2, [r3, #7]
 800713e:	2301      	movs	r3, #1
 8007140:	e149      	b.n	80073d6 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	799b      	ldrb	r3, [r3, #6]
 800714a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007156:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7fd fb51 	bl	8004812 <clust2sect>
 8007170:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <f_write+0x21a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717e:	2202      	movs	r2, #2
 8007180:	71da      	strb	r2, [r3, #7]
 8007182:	2302      	movs	r3, #2
 8007184:	e127      	b.n	80073d6 <f_write+0x46a>
			sect += csect;
 8007186:	7dbb      	ldrb	r3, [r7, #22]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4413      	add	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719a:	895b      	ldrh	r3, [r3, #10]
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d069      	beq.n	8007280 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80071ac:	7dba      	ldrb	r2, [r7, #22]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071be:	7892      	ldrb	r2, [r2, #2]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d90a      	bls.n	80071da <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	789b      	ldrb	r3, [r3, #2]
 80071d2:	461a      	mov	r2, r3
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	7858      	ldrb	r0, [r3, #1]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	f7fc ff59 	bl	80040a4 <disk_write>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	2201      	movs	r2, #1
 8007200:	71da      	strb	r2, [r3, #7]
 8007202:	2301      	movs	r3, #1
 8007204:	e0e7      	b.n	80073d6 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	429a      	cmp	r2, r3
 8007216:	d926      	bls.n	8007266 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007232:	8952      	ldrh	r2, [r2, #10]
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	18d1      	adds	r1, r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007248:	895b      	ldrh	r3, [r3, #10]
 800724a:	461a      	mov	r2, r3
 800724c:	f7fc ff68 	bl	8004120 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007256:	799b      	ldrb	r3, [r3, #6]
 8007258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	461a      	mov	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	623b      	str	r3, [r7, #32]
				continue;
 800727e:	e06e      	b.n	800735e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d01f      	beq.n	80072ce <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d215      	bcs.n	80072ce <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ae:	7858      	ldrb	r0, [r3, #1]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	2301      	movs	r3, #1
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	f7fc fed5 	bl	8004064 <disk_read>
 80072ba:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	2201      	movs	r2, #1
 80072c8:	71da      	strb	r2, [r3, #7]
 80072ca:	2301      	movs	r3, #1
 80072cc:	e083      	b.n	80073d6 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d4:	461a      	mov	r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	4618      	mov	r0, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072fe:	8952      	ldrh	r2, [r2, #10]
 8007300:	fbb3 f1f2 	udiv	r1, r3, r2
 8007304:	fb01 f202 	mul.w	r2, r1, r2
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	1ac3      	subs	r3, r0, r3
 800730c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d901      	bls.n	800731a <f_write+0x3ae>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800732e:	8952      	ldrh	r2, [r2, #10]
 8007330:	fbb3 f1f2 	udiv	r1, r3, r2
 8007334:	fb01 f202 	mul.w	r2, r1, r2
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	6a3a      	ldr	r2, [r7, #32]
 8007340:	69b9      	ldr	r1, [r7, #24]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fc feec 	bl	8004120 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	799b      	ldrb	r3, [r3, #6]
 8007350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007354:	b2da      	uxtb	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	4413      	add	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	4413      	add	r3, r2
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007378:	6093      	str	r3, [r2, #8]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	441a      	add	r2, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f47f ae26 	bne.w	8006fe2 <f_write+0x76>
 8007396:	e000      	b.n	800739a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007398:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d907      	bls.n	80073be <f_write+0x452>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073bc:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c4:	799b      	ldrb	r3, [r3, #6]
 80073c6:	f043 0320 	orr.w	r3, r3, #32
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3728      	adds	r7, #40	; 0x28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fa22 	bl	8006830 <validate>
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f040 80bc 	bne.w	8007570 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fe:	799b      	ldrb	r3, [r3, #6]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80b3 	beq.w	8007570 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007410:	799b      	ldrb	r3, [r3, #6]
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01e      	beq.n	8007458 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	7858      	ldrb	r0, [r3, #1]
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	2301      	movs	r3, #1
 8007434:	f7fc fe36 	bl	80040a4 <disk_write>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800743e:	2301      	movs	r3, #1
 8007440:	e097      	b.n	8007572 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	799b      	ldrb	r3, [r3, #6]
 800744a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4619      	mov	r1, r3
 800746a:	4610      	mov	r0, r2
 800746c:	f7fd f8e0 	bl	8004630 <move_window>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d17a      	bne.n	8007570 <f_sync+0x192>
				dir = fp->dir_ptr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	330b      	adds	r3, #11
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	330b      	adds	r3, #11
 800748e:	f042 0220 	orr.w	r2, r2, #32
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	331c      	adds	r3, #28
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	331d      	adds	r3, #29
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	0c1a      	lsrs	r2, r3, #16
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	331e      	adds	r3, #30
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	0e1a      	lsrs	r2, r3, #24
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	331f      	adds	r3, #31
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6938      	ldr	r0, [r7, #16]
 80074ec:	f7fd ffe1 	bl	80054b2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80074f0:	f7fc fd16 	bl	8003f20 <get_fattime>
 80074f4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3316      	adds	r3, #22
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	b29b      	uxth	r3, r3
 8007504:	0a1b      	lsrs	r3, r3, #8
 8007506:	b29a      	uxth	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3317      	adds	r3, #23
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	0c1a      	lsrs	r2, r3, #16
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3318      	adds	r3, #24
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0e1a      	lsrs	r2, r3, #24
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3319      	adds	r3, #25
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3312      	adds	r3, #18
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3313      	adds	r3, #19
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	799b      	ldrb	r3, [r3, #6]
 8007540:	f023 0320 	bic.w	r3, r3, #32
 8007544:	b2da      	uxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755a:	2201      	movs	r2, #1
 800755c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd f894 	bl	8004694 <sync_fs>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ff2b 	bl	80073de <f_sync>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d119      	bne.n	80075c6 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff f94c 	bl	8006830 <validate>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d111      	bne.n	80075c6 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fc ff80 	bl	80044b0 <dec_lock>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c0:	461a      	mov	r2, r3
 80075c2:	2300      	movs	r3, #0
 80075c4:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	2b0a      	cmp	r3, #10
 80075e0:	d103      	bne.n	80075ea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80075e2:	210d      	movs	r1, #13
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fff3 	bl	80075d0 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	db25      	blt.n	8007642 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	60fa      	str	r2, [r7, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b3c      	cmp	r3, #60	; 0x3c
 8007608:	dd12      	ble.n	8007630 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f103 010c 	add.w	r1, r3, #12
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	f107 0308 	add.w	r3, r7, #8
 800761a:	f7ff fca7 	bl	8006f6c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	429a      	cmp	r2, r3
 8007624:	d101      	bne.n	800762a <putc_bfd+0x5a>
 8007626:	2300      	movs	r3, #0
 8007628:	e001      	b.n	800762e <putc_bfd+0x5e>
 800762a:	f04f 33ff 	mov.w	r3, #4294967295
 800762e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	e000      	b.n	8007644 <putc_bfd+0x74>
	if (i < 0) return;
 8007642:	bf00      	nop
}
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800764a:	b590      	push	{r4, r7, lr}
 800764c:	b097      	sub	sp, #92	; 0x5c
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007660:	e009      	b.n	8007676 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	f107 030c 	add.w	r3, r7, #12
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff ffad 	bl	80075d0 <putc_bfd>
	while (*str)			/* Put the string */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f1      	bne.n	8007662 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	db15      	blt.n	80076b0 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	461c      	mov	r4, r3
 800768a:	f107 0208 	add.w	r2, r7, #8
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	f103 010c 	add.w	r1, r3, #12
 8007696:	4613      	mov	r3, r2
 8007698:	4622      	mov	r2, r4
 800769a:	f7ff fc67 	bl	8006f6c <f_write>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d101      	bne.n	80076b0 <f_puts+0x66>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	e001      	b.n	80076b4 <f_puts+0x6a>
	return EOF;
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	375c      	adds	r7, #92	; 0x5c
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}

080076bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80076ca:	2301      	movs	r3, #1
 80076cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80076d2:	4b1e      	ldr	r3, [pc, #120]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076d4:	7a5b      	ldrb	r3, [r3, #9]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d831      	bhi.n	8007740 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80076dc:	4b1b      	ldr	r3, [pc, #108]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076de:	7a5b      	ldrb	r3, [r3, #9]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076e6:	2100      	movs	r1, #0
 80076e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076ec:	7a5b      	ldrb	r3, [r3, #9]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	4a16      	ldr	r2, [pc, #88]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <FATFS_LinkDriverEx+0x90>)
 80076fc:	7a5b      	ldrb	r3, [r3, #9]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <FATFS_LinkDriverEx+0x90>)
 8007704:	4413      	add	r3, r2
 8007706:	79fa      	ldrb	r2, [r7, #7]
 8007708:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <FATFS_LinkDriverEx+0x90>)
 800770c:	7a5b      	ldrb	r3, [r3, #9]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	b2d1      	uxtb	r1, r2
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <FATFS_LinkDriverEx+0x90>)
 8007716:	7251      	strb	r1, [r2, #9]
 8007718:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800771a:	7dbb      	ldrb	r3, [r7, #22]
 800771c:	3330      	adds	r3, #48	; 0x30
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3301      	adds	r3, #1
 8007728:	223a      	movs	r2, #58	; 0x3a
 800772a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	3302      	adds	r3, #2
 8007730:	222f      	movs	r2, #47	; 0x2f
 8007732:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3303      	adds	r3, #3
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
}
 8007742:	4618      	mov	r0, r3
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr
 800774c:	20002450 	.word	0x20002450

08007750 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800775a:	2200      	movs	r2, #0
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff ffac 	bl	80076bc <FATFS_LinkDriverEx>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	2b7f      	cmp	r3, #127	; 0x7f
 8007780:	d802      	bhi.n	8007788 <ff_convert+0x18>
		c = chr;
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	81fb      	strh	r3, [r7, #14]
 8007786:	e025      	b.n	80077d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	2bff      	cmp	r3, #255	; 0xff
 8007792:	d805      	bhi.n	80077a0 <ff_convert+0x30>
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	3b80      	subs	r3, #128	; 0x80
 8007798:	4a11      	ldr	r2, [pc, #68]	; (80077e0 <ff_convert+0x70>)
 800779a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800779e:	e000      	b.n	80077a2 <ff_convert+0x32>
 80077a0:	2300      	movs	r3, #0
 80077a2:	81fb      	strh	r3, [r7, #14]
 80077a4:	e016      	b.n	80077d4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80077a6:	2300      	movs	r3, #0
 80077a8:	81fb      	strh	r3, [r7, #14]
 80077aa:	e009      	b.n	80077c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80077ac:	89fb      	ldrh	r3, [r7, #14]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <ff_convert+0x70>)
 80077b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d006      	beq.n	80077c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80077ba:	89fb      	ldrh	r3, [r7, #14]
 80077bc:	3301      	adds	r3, #1
 80077be:	81fb      	strh	r3, [r7, #14]
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	2b7f      	cmp	r3, #127	; 0x7f
 80077c4:	d9f2      	bls.n	80077ac <ff_convert+0x3c>
 80077c6:	e000      	b.n	80077ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80077c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80077ca:	89fb      	ldrh	r3, [r7, #14]
 80077cc:	3380      	adds	r3, #128	; 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80077d4:	89fb      	ldrh	r3, [r7, #14]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr
 80077e0:	08007b48 	.word	0x08007b48

080077e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e002      	b.n	80077fa <ff_wtoupper+0x16>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	4a0f      	ldr	r2, [pc, #60]	; (8007838 <ff_wtoupper+0x54>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <ff_wtoupper+0x30>
 8007806:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <ff_wtoupper+0x54>)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	429a      	cmp	r2, r3
 8007812:	d1ef      	bne.n	80077f4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007814:	4a08      	ldr	r2, [pc, #32]	; (8007838 <ff_wtoupper+0x54>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <ff_wtoupper+0x46>
 8007820:	4a06      	ldr	r2, [pc, #24]	; (800783c <ff_wtoupper+0x58>)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007828:	e000      	b.n	800782c <ff_wtoupper+0x48>
 800782a:	88fb      	ldrh	r3, [r7, #6]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	08007c48 	.word	0x08007c48
 800783c:	08007e28 	.word	0x08007e28

08007840 <__libc_init_array>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	2600      	movs	r6, #0
 8007844:	4d0c      	ldr	r5, [pc, #48]	; (8007878 <__libc_init_array+0x38>)
 8007846:	4c0d      	ldr	r4, [pc, #52]	; (800787c <__libc_init_array+0x3c>)
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	42a6      	cmp	r6, r4
 800784e:	d109      	bne.n	8007864 <__libc_init_array+0x24>
 8007850:	f000 f822 	bl	8007898 <_init>
 8007854:	2600      	movs	r6, #0
 8007856:	4d0a      	ldr	r5, [pc, #40]	; (8007880 <__libc_init_array+0x40>)
 8007858:	4c0a      	ldr	r4, [pc, #40]	; (8007884 <__libc_init_array+0x44>)
 800785a:	1b64      	subs	r4, r4, r5
 800785c:	10a4      	asrs	r4, r4, #2
 800785e:	42a6      	cmp	r6, r4
 8007860:	d105      	bne.n	800786e <__libc_init_array+0x2e>
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	f855 3b04 	ldr.w	r3, [r5], #4
 8007868:	4798      	blx	r3
 800786a:	3601      	adds	r6, #1
 800786c:	e7ee      	b.n	800784c <__libc_init_array+0xc>
 800786e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007872:	4798      	blx	r3
 8007874:	3601      	adds	r6, #1
 8007876:	e7f2      	b.n	800785e <__libc_init_array+0x1e>
 8007878:	08008010 	.word	0x08008010
 800787c:	08008010 	.word	0x08008010
 8007880:	08008010 	.word	0x08008010
 8007884:	08008014 	.word	0x08008014

08007888 <memset>:
 8007888:	4603      	mov	r3, r0
 800788a:	4402      	add	r2, r0
 800788c:	4293      	cmp	r3, r2
 800788e:	d100      	bne.n	8007892 <memset+0xa>
 8007890:	4770      	bx	lr
 8007892:	f803 1b01 	strb.w	r1, [r3], #1
 8007896:	e7f9      	b.n	800788c <memset+0x4>

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
